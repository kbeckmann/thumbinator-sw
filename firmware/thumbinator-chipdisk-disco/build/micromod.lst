ARM GAS  /tmp/ccuyegJO.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"micromod.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.calculate_num_patterns,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.code	16
  19              		.thumb_func
  20              		.fpu softvfp
  22              	calculate_num_patterns:
  23              	.LFB0:
  24              		.file 1 "Src/micromod.c"
   1:Src/micromod.c **** #include "micromod.h"
   2:Src/micromod.c **** 
   3:Src/micromod.c **** /* fast protracker replay version 20150922 (c)2015 mumart@gmail.com */
   4:Src/micromod.c **** 
   5:Src/micromod.c **** #define MAX_CHANNELS 16
   6:Src/micromod.c **** #define FP_SHIFT 14
   7:Src/micromod.c **** #define FP_ONE   16384
   8:Src/micromod.c **** #define FP_MASK  16383
   9:Src/micromod.c **** 
  10:Src/micromod.c **** struct note {
  11:Src/micromod.c **** 	unsigned short key;
  12:Src/micromod.c **** 	unsigned char instrument, effect, param;
  13:Src/micromod.c **** };
  14:Src/micromod.c **** 
  15:Src/micromod.c **** struct instrument {
  16:Src/micromod.c **** 	unsigned char volume, fine_tune;
  17:Src/micromod.c **** 	unsigned long loop_start, loop_length;
  18:Src/micromod.c **** 	signed char *sample_data;
  19:Src/micromod.c **** };
  20:Src/micromod.c **** 
  21:Src/micromod.c **** struct channel {
  22:Src/micromod.c **** 	struct note note;
  23:Src/micromod.c **** 	unsigned short period, porta_period;
  24:Src/micromod.c **** 	unsigned long sample_offset, sample_idx, step;
  25:Src/micromod.c **** 	unsigned char volume, panning, fine_tune, ampl;
  26:Src/micromod.c **** 	unsigned char id, instrument, assigned, porta_speed, pl_row, fx_count;
  27:Src/micromod.c **** 	unsigned char vibrato_type, vibrato_phase, vibrato_speed, vibrato_depth;
  28:Src/micromod.c **** 	unsigned char tremolo_type, tremolo_phase, tremolo_speed, tremolo_depth;
  29:Src/micromod.c **** 	signed char tremolo_add, vibrato_add, arpeggio_add;
  30:Src/micromod.c **** };
  31:Src/micromod.c **** 
  32:Src/micromod.c **** static const unsigned short fine_tuning[] = {
  33:Src/micromod.c **** 	4340, 4308, 4277, 4247, 4216, 4186, 4156, 4126,
  34:Src/micromod.c **** 	4096, 4067, 4037, 4008, 3979, 3951, 3922, 3894
ARM GAS  /tmp/ccuyegJO.s 			page 2


  35:Src/micromod.c **** };
  36:Src/micromod.c **** 
  37:Src/micromod.c **** static const unsigned short arp_tuning[] = {
  38:Src/micromod.c **** 	4096, 3866, 3649, 3444, 3251, 3069, 2896, 2734,
  39:Src/micromod.c **** 	2580, 2435, 2299, 2170, 2048, 1933, 1825, 1722
  40:Src/micromod.c **** };
  41:Src/micromod.c **** 
  42:Src/micromod.c **** static const unsigned char sine_table[] = {
  43:Src/micromod.c **** 	  0,  24,  49,  74,  97, 120, 141, 161, 180, 197, 212, 224, 235, 244, 250, 253,
  44:Src/micromod.c **** 	255, 253, 250, 244, 235, 224, 212, 197, 180, 161, 141, 120,  97,  74,  49,  24
  45:Src/micromod.c **** };
  46:Src/micromod.c **** 
  47:Src/micromod.c **** static signed char *module_data;
  48:Src/micromod.c **** static unsigned char *pattern_data, *sequence;
  49:Src/micromod.c **** static long song_length, restart, num_patterns, num_channels;
  50:Src/micromod.c **** static struct instrument instruments[ 32 ];
  51:Src/micromod.c **** 
  52:Src/micromod.c **** static long sample_rate, c2_rate, gain, tick_len, tick_offset;
  53:Src/micromod.c **** static long pattern, break_pattern, row, next_row, tick;
  54:Src/micromod.c **** static long speed, pl_count, pl_channel, random_seed;
  55:Src/micromod.c **** 
  56:Src/micromod.c **** static struct channel channels[ MAX_CHANNELS ];
  57:Src/micromod.c **** 
  58:Src/micromod.c **** static long calculate_num_patterns( signed char *module_header ) {
  25              		.loc 1 58 0
  26              		.cfi_startproc
  27              	.LVL0:
  28 0000 EE23     		movs	r3, #238
  29 0002 8722     		movs	r2, #135
  30 0004 9B00     		lsls	r3, r3, #2
  31 0006 D200     		lsls	r2, r2, #3
  32 0008 10B5     		push	{r4, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 4, -8
  36              		.cfi_offset 14, -4
  37 000a C318     		adds	r3, r0, r3
  38 000c 8218     		adds	r2, r0, r2
  59:Src/micromod.c **** 	long num_patterns, order_entry, pattern;
  60:Src/micromod.c **** 	num_patterns = 0;
  61:Src/micromod.c **** 	for( pattern = 0; pattern < 128; pattern++ ) {
  62:Src/micromod.c **** 		order_entry = module_header[ 952 + pattern ] & 0x7F;
  39              		.loc 1 62 0
  40 000e 7F24     		movs	r4, #127
  60:Src/micromod.c **** 	for( pattern = 0; pattern < 128; pattern++ ) {
  41              		.loc 1 60 0
  42 0010 0020     		movs	r0, #0
  43              	.LVL1:
  44              	.L3:
  45              		.loc 1 62 0
  46 0012 1978     		ldrb	r1, [r3]
  47 0014 2140     		ands	r1, r4
  48              	.LVL2:
  63:Src/micromod.c **** 		if( order_entry >= num_patterns ) num_patterns = order_entry + 1;
  49              		.loc 1 63 0
  50 0016 8142     		cmp	r1, r0
  51 0018 00DB     		blt	.L2
ARM GAS  /tmp/ccuyegJO.s 			page 3


  52              	.LVL3:
  53              		.loc 1 63 0 is_stmt 0 discriminator 1
  54 001a 481C     		adds	r0, r1, #1
  55              	.LVL4:
  56              	.L2:
  57 001c 0133     		adds	r3, r3, #1
  58              	.LVL5:
  61:Src/micromod.c **** 		order_entry = module_header[ 952 + pattern ] & 0x7F;
  59              		.loc 1 61 0 is_stmt 1 discriminator 2
  60 001e 9A42     		cmp	r2, r3
  61 0020 F7D1     		bne	.L3
  64:Src/micromod.c **** 	}
  65:Src/micromod.c **** 	return num_patterns;
  66:Src/micromod.c **** }
  62              		.loc 1 66 0
  63              		@ sp needed
  64 0022 10BD     		pop	{r4, pc}
  65              		.cfi_endproc
  66              	.LFE0:
  68              		.section	.text.calculate_num_channels,"ax",%progbits
  69              		.align	1
  70              		.syntax unified
  71              		.code	16
  72              		.thumb_func
  73              		.fpu softvfp
  75              	calculate_num_channels:
  76              	.LFB1:
  67:Src/micromod.c **** 
  68:Src/micromod.c **** static long calculate_num_channels( signed char *module_header ) {
  77              		.loc 1 68 0
  78              		.cfi_startproc
  79              	.LVL6:
  69:Src/micromod.c **** 	long numchan;
  70:Src/micromod.c **** 	switch( ( module_header[ 1082 ] << 8 ) | module_header[ 1083 ] ) {
  80              		.loc 1 70 0
  81 0000 174B     		ldr	r3, .L14
  82 0002 184A     		ldr	r2, .L14+4
  83 0004 C356     		ldrsb	r3, [r0, r3]
  84 0006 8256     		ldrsb	r2, [r0, r2]
  85 0008 1B02     		lsls	r3, r3, #8
  86 000a 1343     		orrs	r3, r2
  87 000c 164A     		ldr	r2, .L14+8
  88 000e 9342     		cmp	r3, r2
  89 0010 11D0     		beq	.L12
  90 0012 07DC     		bgt	.L8
  91 0014 154A     		ldr	r2, .L14+12
  92 0016 9342     		cmp	r3, r2
  93 0018 16D0     		beq	.L9
  94 001a 154A     		ldr	r2, .L14+16
  95 001c 9342     		cmp	r3, r2
  96 001e 0CD0     		beq	.L10
  97              	.LVL7:
  98              	.L13:
  71:Src/micromod.c **** 		case 0x4b2e: /* M.K. */
  72:Src/micromod.c **** 		case 0x4b21: /* M!K! */
  73:Src/micromod.c **** 		case 0x542e: /* N.T. */
  74:Src/micromod.c **** 		case 0x5434: /* FLT4 */
ARM GAS  /tmp/ccuyegJO.s 			page 4


  75:Src/micromod.c **** 			numchan = 4;
  76:Src/micromod.c **** 			break;
  77:Src/micromod.c **** 		case 0x484e: /* xCHN */
  78:Src/micromod.c **** 			numchan = module_header[ 1080 ] - 48;
  79:Src/micromod.c **** 			break;
  80:Src/micromod.c **** 		case 0x4348: /* xxCH */
  81:Src/micromod.c **** 			numchan = ( ( module_header[ 1080 ] - 48 ) * 10 ) + ( module_header[ 1081 ] - 48 );
  82:Src/micromod.c **** 			break;
  83:Src/micromod.c **** 		default: /* Not recognised. */
  84:Src/micromod.c **** 			numchan = 0;
  85:Src/micromod.c **** 			break;
  86:Src/micromod.c **** 	}
  87:Src/micromod.c **** 	if( numchan > MAX_CHANNELS ) numchan = 0;
  99              		.loc 1 87 0
 100 0020 0020     		movs	r0, #0
 101 0022 10E0     		b	.L5
 102              	.LVL8:
 103              	.L8:
  70:Src/micromod.c **** 		case 0x4b2e: /* M.K. */
 104              		.loc 1 70 0
 105 0024 134A     		ldr	r2, .L14+20
 106 0026 9342     		cmp	r3, r2
 107 0028 05D0     		beq	.L12
 108 002a 134A     		ldr	r2, .L14+24
 109 002c 9342     		cmp	r3, r2
 110 002e 02D0     		beq	.L12
 111 0030 124A     		ldr	r2, .L14+28
 112 0032 9342     		cmp	r3, r2
 113 0034 F4D1     		bne	.L13
 114              	.L12:
  75:Src/micromod.c **** 			break;
 115              		.loc 1 75 0
 116 0036 0420     		movs	r0, #4
 117              	.LVL9:
  88:Src/micromod.c **** 	return numchan;
 118              		.loc 1 88 0
 119 0038 05E0     		b	.L5
 120              	.LVL10:
 121              	.L10:
  78:Src/micromod.c **** 			break;
 122              		.loc 1 78 0
 123 003a 8723     		movs	r3, #135
 124 003c DB00     		lsls	r3, r3, #3
 125 003e C056     		ldrsb	r0, [r0, r3]
 126              	.LVL11:
 127 0040 3038     		subs	r0, r0, #48
 128              	.LVL12:
 129              	.L11:
  87:Src/micromod.c **** 	return numchan;
 130              		.loc 1 87 0
 131 0042 1028     		cmp	r0, #16
 132 0044 ECDC     		bgt	.L13
 133              	.LVL13:
 134              	.L5:
  89:Src/micromod.c **** }
 135              		.loc 1 89 0
 136              		@ sp needed
ARM GAS  /tmp/ccuyegJO.s 			page 5


 137 0046 7047     		bx	lr
 138              	.LVL14:
 139              	.L9:
  81:Src/micromod.c **** 			break;
 140              		.loc 1 81 0
 141 0048 8723     		movs	r3, #135
 142 004a DB00     		lsls	r3, r3, #3
 143 004c C256     		ldrsb	r2, [r0, r3]
 144 004e 0A23     		movs	r3, #10
 145 0050 303A     		subs	r2, r2, #48
 146 0052 5343     		muls	r3, r2
 147 0054 0A4A     		ldr	r2, .L14+32
 148 0056 8056     		ldrsb	r0, [r0, r2]
 149              	.LVL15:
 150 0058 3038     		subs	r0, r0, #48
 151 005a 1818     		adds	r0, r3, r0
 152              	.LVL16:
  82:Src/micromod.c **** 		default: /* Not recognised. */
 153              		.loc 1 82 0
 154 005c F1E7     		b	.L11
 155              	.L15:
 156 005e C046     		.align	2
 157              	.L14:
 158 0060 3A040000 		.word	1082
 159 0064 3B040000 		.word	1083
 160 0068 214B0000 		.word	19233
 161 006c 48430000 		.word	17224
 162 0070 4E480000 		.word	18510
 163 0074 2E540000 		.word	21550
 164 0078 34540000 		.word	21556
 165 007c 2E4B0000 		.word	19246
 166 0080 39040000 		.word	1081
 167              		.cfi_endproc
 168              	.LFE1:
 170              		.section	.text.unsigned_short_big_endian,"ax",%progbits
 171              		.align	1
 172              		.syntax unified
 173              		.code	16
 174              		.thumb_func
 175              		.fpu softvfp
 177              	unsigned_short_big_endian:
 178              	.LFB2:
  90:Src/micromod.c **** 
  91:Src/micromod.c **** static long unsigned_short_big_endian( signed char *buf, long offset ) {
 179              		.loc 1 91 0
 180              		.cfi_startproc
 181              	.LVL17:
  92:Src/micromod.c **** 	return ( ( buf[ offset ] & 0xFF ) << 8 ) | ( buf[ offset + 1 ] & 0xFF );
 182              		.loc 1 92 0
 183 0000 435C     		ldrb	r3, [r0, r1]
 184 0002 4018     		adds	r0, r0, r1
 185              	.LVL18:
 186 0004 4078     		ldrb	r0, [r0, #1]
 187 0006 1B02     		lsls	r3, r3, #8
 188 0008 1843     		orrs	r0, r3
  93:Src/micromod.c **** }
 189              		.loc 1 93 0
ARM GAS  /tmp/ccuyegJO.s 			page 6


 190              		@ sp needed
 191 000a 7047     		bx	lr
 192              		.cfi_endproc
 193              	.LFE2:
 195              		.global	__aeabi_idiv
 196              		.global	__aeabi_uidiv
 197              		.section	.text.update_frequency,"ax",%progbits
 198              		.align	1
 199              		.syntax unified
 200              		.code	16
 201              		.thumb_func
 202              		.fpu softvfp
 204              	update_frequency:
 205              	.LFB4:
  94:Src/micromod.c **** 
  95:Src/micromod.c **** static void set_tempo( long tempo ) {
  96:Src/micromod.c **** 	tick_len = ( ( sample_rate << 1 ) + ( sample_rate >> 1 ) ) / tempo;
  97:Src/micromod.c **** }
  98:Src/micromod.c **** 
  99:Src/micromod.c **** static void update_frequency( struct channel *chan ) {
 206              		.loc 1 99 0
 207              		.cfi_startproc
 208              	.LVL19:
 100:Src/micromod.c **** 	long period, volume;
 101:Src/micromod.c **** 	unsigned long freq;
 102:Src/micromod.c **** 	period = chan->period + chan->vibrato_add;
 209              		.loc 1 102 0
 210 0000 2B21     		movs	r1, #43
  99:Src/micromod.c **** 	long period, volume;
 211              		.loc 1 99 0
 212 0002 10B5     		push	{r4, lr}
 213              	.LCFI1:
 214              		.cfi_def_cfa_offset 8
 215              		.cfi_offset 4, -8
 216              		.cfi_offset 14, -4
 217              		.loc 1 102 0
 218 0004 C388     		ldrh	r3, [r0, #6]
 219 0006 4156     		ldrsb	r1, [r0, r1]
 103:Src/micromod.c **** 	period = period * arp_tuning[ chan->arpeggio_add ] >> 11;
 220              		.loc 1 103 0
 221 0008 174A     		ldr	r2, .L21
 102:Src/micromod.c **** 	period = period * arp_tuning[ chan->arpeggio_add ] >> 11;
 222              		.loc 1 102 0
 223 000a 5918     		adds	r1, r3, r1
 224              		.loc 1 103 0
 225 000c 0300     		movs	r3, r0
 226 000e 2C33     		adds	r3, r3, #44
 227 0010 1B78     		ldrb	r3, [r3]
  99:Src/micromod.c **** 	long period, volume;
 228              		.loc 1 99 0
 229 0012 0400     		movs	r4, r0
 230              		.loc 1 103 0
 231 0014 5BB2     		sxtb	r3, r3
 232 0016 5B00     		lsls	r3, r3, #1
 233 0018 9B5A     		ldrh	r3, [r3, r2]
 234 001a 4B43     		muls	r3, r1
 235              	.LVL20:
ARM GAS  /tmp/ccuyegJO.s 			page 7


 104:Src/micromod.c **** 	period = ( period >> 1 ) + ( period & 1 );
 236              		.loc 1 104 0
 237 001c 1A05     		lsls	r2, r3, #20
 238 001e D20F     		lsrs	r2, r2, #31
 239 0020 1913     		asrs	r1, r3, #12
 240 0022 8918     		adds	r1, r1, r2
 241              	.LVL21:
 105:Src/micromod.c **** 	if( period < 14 ) period = 6848;
 242              		.loc 1 105 0
 243 0024 0D29     		cmp	r1, #13
 244 0026 01DC     		bgt	.L18
 245 0028 D621     		movs	r1, #214
 246              	.LVL22:
 247 002a 4901     		lsls	r1, r1, #5
 248              	.L18:
 249              	.LVL23:
 106:Src/micromod.c **** 	freq = c2_rate * 428 / period;
 250              		.loc 1 106 0
 251 002c D620     		movs	r0, #214
 252              	.LVL24:
 253 002e 0F4B     		ldr	r3, .L21+4
 254 0030 4000     		lsls	r0, r0, #1
 255 0032 1B68     		ldr	r3, [r3]
 256 0034 5843     		muls	r0, r3
 257 0036 FFF7FEFF 		bl	__aeabi_idiv
 258              	.LVL25:
 107:Src/micromod.c **** 	chan->step = ( freq << FP_SHIFT ) / sample_rate;
 259              		.loc 1 107 0
 260 003a 0D4B     		ldr	r3, .L21+8
 261 003c 8003     		lsls	r0, r0, #14
 262 003e 1968     		ldr	r1, [r3]
 263 0040 FFF7FEFF 		bl	__aeabi_uidiv
 264              	.LVL26:
 108:Src/micromod.c **** 	volume = chan->volume + chan->tremolo_add;
 265              		.loc 1 108 0
 266 0044 2200     		movs	r2, r4
 107:Src/micromod.c **** 	chan->step = ( freq << FP_SHIFT ) / sample_rate;
 267              		.loc 1 107 0
 268 0046 6061     		str	r0, [r4, #20]
 269              	.LVL27:
 270              		.loc 1 108 0
 271 0048 2A32     		adds	r2, r2, #42
 272              	.LVL28:
 273 004a 1278     		ldrb	r2, [r2]
 274              	.LVL29:
 275 004c 237E     		ldrb	r3, [r4, #24]
 276 004e 52B2     		sxtb	r2, r2
 277              	.LVL30:
 278 0050 9B18     		adds	r3, r3, r2
 279 0052 05D5     		bpl	.L19
 280              	.LVL31:
 281 0054 0023     		movs	r3, #0
 282              	.LVL32:
 283              	.L20:
 109:Src/micromod.c **** 	if( volume > 64 ) volume = 64;
 110:Src/micromod.c **** 	if( volume < 0 ) volume = 0;
 111:Src/micromod.c **** 	chan->ampl = volume * gain;
ARM GAS  /tmp/ccuyegJO.s 			page 8


 284              		.loc 1 111 0
 285 0056 074A     		ldr	r2, .L21+12
 112:Src/micromod.c **** }
 286              		.loc 1 112 0
 287              		@ sp needed
 111:Src/micromod.c **** }
 288              		.loc 1 111 0
 289 0058 1268     		ldr	r2, [r2]
 290 005a 5343     		muls	r3, r2
 291 005c E376     		strb	r3, [r4, #27]
 292              	.LVL33:
 293              		.loc 1 112 0
 294 005e 10BD     		pop	{r4, pc}
 295              	.LVL34:
 296              	.L19:
 111:Src/micromod.c **** }
 297              		.loc 1 111 0
 298 0060 402B     		cmp	r3, #64
 299 0062 F8DD     		ble	.L20
 300 0064 4023     		movs	r3, #64
 301              	.LVL35:
 302 0066 F6E7     		b	.L20
 303              	.L22:
 304              		.align	2
 305              	.L21:
 306 0068 00000000 		.word	.LANCHOR0
 307 006c 00000000 		.word	.LANCHOR1
 308 0070 00000000 		.word	.LANCHOR2
 309 0074 00000000 		.word	.LANCHOR3
 310              		.cfi_endproc
 311              	.LFE4:
 313              		.section	.text.tone_portamento,"ax",%progbits
 314              		.align	1
 315              		.syntax unified
 316              		.code	16
 317              		.thumb_func
 318              		.fpu softvfp
 320              	tone_portamento:
 321              	.LFB5:
 113:Src/micromod.c **** 
 114:Src/micromod.c **** static void tone_portamento( struct channel *chan ) {
 322              		.loc 1 114 0
 323              		.cfi_startproc
 324              	.LVL36:
 115:Src/micromod.c **** 	long source, dest;
 116:Src/micromod.c **** 	source = chan->period;
 325              		.loc 1 116 0
 326 0000 C388     		ldrh	r3, [r0, #6]
 327              	.LVL37:
 117:Src/micromod.c **** 	dest = chan->porta_period;
 328              		.loc 1 117 0
 329 0002 0289     		ldrh	r2, [r0, #8]
 330              	.LVL38:
 118:Src/micromod.c **** 	if( source < dest ) {
 331              		.loc 1 118 0
 332 0004 9342     		cmp	r3, r2
 333 0006 05DA     		bge	.L24
ARM GAS  /tmp/ccuyegJO.s 			page 9


 334              	.LVL39:
 119:Src/micromod.c **** 		source += chan->porta_speed;
 335              		.loc 1 119 0
 336 0008 C17F     		ldrb	r1, [r0, #31]
 337 000a CB18     		adds	r3, r1, r3
 338              	.LVL40:
 339 000c 9342     		cmp	r3, r2
 340 000e 07DD     		ble	.L26
 341              	.L28:
 342 0010 1300     		movs	r3, r2
 343              	.LVL41:
 344 0012 05E0     		b	.L26
 345              	.LVL42:
 346              	.L24:
 120:Src/micromod.c **** 		if( source > dest ) source = dest;
 121:Src/micromod.c **** 	} else if( source > dest ) {
 347              		.loc 1 121 0
 348 0014 9342     		cmp	r3, r2
 349 0016 03DD     		ble	.L26
 350              	.LVL43:
 122:Src/micromod.c **** 		source -= chan->porta_speed;
 351              		.loc 1 122 0
 352 0018 C17F     		ldrb	r1, [r0, #31]
 353 001a 5B1A     		subs	r3, r3, r1
 354              	.LVL44:
 355 001c 9342     		cmp	r3, r2
 356 001e F7DB     		blt	.L28
 357              	.LVL45:
 358              	.L26:
 123:Src/micromod.c **** 		if( source < dest ) source = dest;
 124:Src/micromod.c **** 	}
 125:Src/micromod.c **** 	chan->period = source;
 359              		.loc 1 125 0
 360 0020 C380     		strh	r3, [r0, #6]
 126:Src/micromod.c **** }
 361              		.loc 1 126 0
 362              		@ sp needed
 363 0022 7047     		bx	lr
 364              		.cfi_endproc
 365              	.LFE5:
 367              		.section	.text.trigger,"ax",%progbits
 368              		.align	1
 369              		.syntax unified
 370              		.code	16
 371              		.thumb_func
 372              		.fpu softvfp
 374              	trigger:
 375              	.LFB10:
 127:Src/micromod.c **** 
 128:Src/micromod.c **** static void volume_slide( struct channel *chan, long param ) {
 129:Src/micromod.c **** 	long volume;
 130:Src/micromod.c **** 	volume = chan->volume + ( param >> 4 ) - ( param & 0xF );
 131:Src/micromod.c **** 	if( volume < 0 ) volume = 0;
 132:Src/micromod.c **** 	if( volume > 64 ) volume = 64;
 133:Src/micromod.c **** 	chan->volume = volume;
 134:Src/micromod.c **** }
 135:Src/micromod.c **** 
ARM GAS  /tmp/ccuyegJO.s 			page 10


 136:Src/micromod.c **** static long waveform( long phase, long type ) {
 137:Src/micromod.c **** 	long amplitude = 0;
 138:Src/micromod.c **** 	switch( type & 0x3 ) {
 139:Src/micromod.c **** 		case 0: /* Sine. */
 140:Src/micromod.c **** 			amplitude = sine_table[ phase & 0x1F ];
 141:Src/micromod.c **** 			if( ( phase & 0x20 ) > 0 ) amplitude = -amplitude;
 142:Src/micromod.c **** 			break;
 143:Src/micromod.c **** 		case 1: /* Saw Down. */
 144:Src/micromod.c **** 			amplitude = 255 - ( ( ( phase + 0x20 ) & 0x3F ) << 3 );
 145:Src/micromod.c **** 			break;
 146:Src/micromod.c **** 		case 2: /* Square. */
 147:Src/micromod.c **** 			amplitude = 255 - ( ( phase & 0x20 ) << 4 );
 148:Src/micromod.c **** 			break;
 149:Src/micromod.c **** 		case 3: /* Random. */
 150:Src/micromod.c **** 			amplitude = ( random_seed >> 20 ) - 255;
 151:Src/micromod.c **** 			random_seed = ( random_seed * 65 + 17 ) & 0x1FFFFFFF;
 152:Src/micromod.c **** 			break;
 153:Src/micromod.c **** 	}
 154:Src/micromod.c **** 	return amplitude;
 155:Src/micromod.c **** }
 156:Src/micromod.c **** 
 157:Src/micromod.c **** static void vibrato( struct channel *chan ) {
 158:Src/micromod.c **** 	chan->vibrato_add = waveform( chan->vibrato_phase, chan->vibrato_type ) * chan->vibrato_depth >> 7
 159:Src/micromod.c **** }
 160:Src/micromod.c **** 
 161:Src/micromod.c **** static void tremolo( struct channel *chan ) {
 162:Src/micromod.c **** 	chan->tremolo_add = waveform( chan->tremolo_phase, chan->tremolo_type ) * chan->tremolo_depth >> 6
 163:Src/micromod.c **** }
 164:Src/micromod.c **** 
 165:Src/micromod.c **** static void trigger( struct channel *channel ) {
 376              		.loc 1 165 0
 377              		.cfi_startproc
 378              	.LVL46:
 379 0000 30B5     		push	{r4, r5, lr}
 380              	.LCFI2:
 381              		.cfi_def_cfa_offset 12
 382              		.cfi_offset 4, -12
 383              		.cfi_offset 5, -8
 384              		.cfi_offset 14, -4
 166:Src/micromod.c **** 	long period, ins;
 167:Src/micromod.c **** 	ins = channel->note.instrument;
 385              		.loc 1 167 0
 386 0002 8378     		ldrb	r3, [r0, #2]
 387              	.LVL47:
 168:Src/micromod.c **** 	if( ins > 0 && ins < 32 ) {
 388              		.loc 1 168 0
 389 0004 5A1E     		subs	r2, r3, #1
 390 0006 1E2A     		cmp	r2, #30
 391 0008 10D8     		bhi	.L31
 169:Src/micromod.c **** 		channel->assigned = ins;
 170:Src/micromod.c **** 		channel->sample_offset = 0;
 392              		.loc 1 170 0
 393 000a 0022     		movs	r2, #0
 171:Src/micromod.c **** 		channel->fine_tune = instruments[ ins ].fine_tune;
 394              		.loc 1 171 0
 395 000c 2149     		ldr	r1, .L48
 396 000e 1C01     		lsls	r4, r3, #4
ARM GAS  /tmp/ccuyegJO.s 			page 11


 170:Src/micromod.c **** 		channel->fine_tune = instruments[ ins ].fine_tune;
 397              		.loc 1 170 0
 398 0010 C260     		str	r2, [r0, #12]
 399              		.loc 1 171 0
 400 0012 0A19     		adds	r2, r1, r4
 401 0014 5578     		ldrb	r5, [r2, #1]
 172:Src/micromod.c **** 		channel->volume = instruments[ ins ].volume;
 402              		.loc 1 172 0
 403 0016 615C     		ldrb	r1, [r4, r1]
 173:Src/micromod.c **** 		if( instruments[ ins ].loop_length > 0 && channel->instrument > 0 )
 404              		.loc 1 173 0
 405 0018 9268     		ldr	r2, [r2, #8]
 169:Src/micromod.c **** 		channel->sample_offset = 0;
 406              		.loc 1 169 0
 407 001a 8377     		strb	r3, [r0, #30]
 171:Src/micromod.c **** 		channel->volume = instruments[ ins ].volume;
 408              		.loc 1 171 0
 409 001c 8576     		strb	r5, [r0, #26]
 172:Src/micromod.c **** 		if( instruments[ ins ].loop_length > 0 && channel->instrument > 0 )
 410              		.loc 1 172 0
 411 001e 0176     		strb	r1, [r0, #24]
 412              		.loc 1 173 0
 413 0020 002A     		cmp	r2, #0
 414 0022 03D0     		beq	.L31
 415              		.loc 1 173 0 is_stmt 0 discriminator 1
 416 0024 427F     		ldrb	r2, [r0, #29]
 417 0026 002A     		cmp	r2, #0
 418 0028 00D0     		beq	.L31
 174:Src/micromod.c **** 			channel->instrument = ins;
 419              		.loc 1 174 0 is_stmt 1
 420 002a 4377     		strb	r3, [r0, #29]
 421              	.L31:
 175:Src/micromod.c **** 	}
 176:Src/micromod.c **** 	if( channel->note.effect == 0x09 ) {
 422              		.loc 1 176 0
 423 002c C178     		ldrb	r1, [r0, #3]
 424 002e 0929     		cmp	r1, #9
 425 0030 2BD1     		bne	.L33
 177:Src/micromod.c **** 		channel->sample_offset = ( channel->note.param & 0xFF ) << 8;
 426              		.loc 1 177 0
 427 0032 0379     		ldrb	r3, [r0, #4]
 428              	.LVL48:
 429 0034 1B02     		lsls	r3, r3, #8
 430 0036 C360     		str	r3, [r0, #12]
 431              	.L34:
 178:Src/micromod.c **** 	} else if( channel->note.effect == 0x15 ) {
 179:Src/micromod.c **** 		channel->fine_tune = channel->note.param;
 180:Src/micromod.c **** 	}
 181:Src/micromod.c **** 	if( channel->note.key > 0 ) {
 432              		.loc 1 181 0
 433 0038 0288     		ldrh	r2, [r0]
 434 003a 002A     		cmp	r2, #0
 435 003c 24D0     		beq	.L29
 182:Src/micromod.c **** 		period = ( channel->note.key * fine_tuning[ channel->fine_tune & 0xF ] ) >> 11;
 436              		.loc 1 182 0
 437 003e 0F24     		movs	r4, #15
 438 0040 837E     		ldrb	r3, [r0, #26]
ARM GAS  /tmp/ccuyegJO.s 			page 12


 183:Src/micromod.c **** 		channel->porta_period = ( period >> 1 ) + ( period & 1 );
 184:Src/micromod.c **** 		if( channel->note.effect != 0x3 && channel->note.effect != 0x5 ) {
 439              		.loc 1 184 0
 440 0042 0339     		subs	r1, r1, #3
 182:Src/micromod.c **** 		period = ( channel->note.key * fine_tuning[ channel->fine_tune & 0xF ] ) >> 11;
 441              		.loc 1 182 0
 442 0044 2340     		ands	r3, r4
 443 0046 144C     		ldr	r4, .L48+4
 444 0048 5B00     		lsls	r3, r3, #1
 445 004a 1B5B     		ldrh	r3, [r3, r4]
 446 004c 5A43     		muls	r2, r3
 447              	.LVL49:
 183:Src/micromod.c **** 		channel->porta_period = ( period >> 1 ) + ( period & 1 );
 448              		.loc 1 183 0
 449 004e 1305     		lsls	r3, r2, #20
 450 0050 DB0F     		lsrs	r3, r3, #31
 451 0052 1213     		asrs	r2, r2, #12
 452              	.LVL50:
 453 0054 9B18     		adds	r3, r3, r2
 454              		.loc 1 184 0
 455 0056 FD22     		movs	r2, #253
 183:Src/micromod.c **** 		channel->porta_period = ( period >> 1 ) + ( period & 1 );
 456              		.loc 1 183 0
 457 0058 9BB2     		uxth	r3, r3
 458 005a 0381     		strh	r3, [r0, #8]
 459              		.loc 1 184 0
 460 005c 1142     		tst	r1, r2
 461 005e 13D0     		beq	.L29
 185:Src/micromod.c **** 			channel->instrument = channel->assigned;
 186:Src/micromod.c **** 			channel->period = channel->porta_period;
 462              		.loc 1 186 0
 463 0060 C380     		strh	r3, [r0, #6]
 187:Src/micromod.c **** 			channel->sample_idx = ( channel->sample_offset << FP_SHIFT );
 464              		.loc 1 187 0
 465 0062 C368     		ldr	r3, [r0, #12]
 185:Src/micromod.c **** 			channel->instrument = channel->assigned;
 466              		.loc 1 185 0
 467 0064 827F     		ldrb	r2, [r0, #30]
 468              		.loc 1 187 0
 469 0066 9B03     		lsls	r3, r3, #14
 470 0068 0361     		str	r3, [r0, #16]
 185:Src/micromod.c **** 			channel->instrument = channel->assigned;
 471              		.loc 1 185 0
 472 006a 4277     		strb	r2, [r0, #29]
 188:Src/micromod.c **** 			if( channel->vibrato_type < 4 ) channel->vibrato_phase = 0;
 473              		.loc 1 188 0
 474 006c C31C     		adds	r3, r0, #3
 475 006e DB7F     		ldrb	r3, [r3, #31]
 476 0070 032B     		cmp	r3, #3
 477 0072 02D8     		bhi	.L38
 478              		.loc 1 188 0 is_stmt 0 discriminator 1
 479 0074 0022     		movs	r2, #0
 480 0076 031D     		adds	r3, r0, #4
 481 0078 DA77     		strb	r2, [r3, #31]
 482              	.L38:
 189:Src/micromod.c **** 			if( channel->tremolo_type < 4 ) channel->tremolo_phase = 0;
 483              		.loc 1 189 0 is_stmt 1
ARM GAS  /tmp/ccuyegJO.s 			page 13


 484 007a C31D     		adds	r3, r0, #7
 485 007c DB7F     		ldrb	r3, [r3, #31]
 486 007e 032B     		cmp	r3, #3
 487 0080 02D8     		bhi	.L29
 488              		.loc 1 189 0 is_stmt 0 discriminator 1
 489 0082 0023     		movs	r3, #0
 490 0084 0830     		adds	r0, r0, #8
 491              	.LVL51:
 492 0086 C377     		strb	r3, [r0, #31]
 493              	.LVL52:
 494              	.L29:
 190:Src/micromod.c **** 		}
 191:Src/micromod.c **** 	}
 192:Src/micromod.c **** }
 495              		.loc 1 192 0 is_stmt 1
 496              		@ sp needed
 497 0088 30BD     		pop	{r4, r5, pc}
 498              	.LVL53:
 499              	.L33:
 178:Src/micromod.c **** 		channel->fine_tune = channel->note.param;
 500              		.loc 1 178 0
 501 008a 1529     		cmp	r1, #21
 502 008c D4D1     		bne	.L34
 179:Src/micromod.c **** 	}
 503              		.loc 1 179 0
 504 008e 0379     		ldrb	r3, [r0, #4]
 505              	.LVL54:
 506 0090 8376     		strb	r3, [r0, #26]
 507 0092 D1E7     		b	.L34
 508              	.L49:
 509              		.align	2
 510              	.L48:
 511 0094 00000000 		.word	.LANCHOR4
 512 0098 00000000 		.word	.LANCHOR5
 513              		.cfi_endproc
 514              	.LFE10:
 516              		.section	.text.volume_slide.isra.0,"ax",%progbits
 517              		.align	1
 518              		.syntax unified
 519              		.code	16
 520              		.thumb_func
 521              		.fpu softvfp
 523              	volume_slide.isra.0:
 524              	.LFB22:
 128:Src/micromod.c **** 	long volume;
 525              		.loc 1 128 0
 526              		.cfi_startproc
 527              	.LVL55:
 130:Src/micromod.c **** 	if( volume < 0 ) volume = 0;
 528              		.loc 1 130 0
 529 0000 0378     		ldrb	r3, [r0]
 530 0002 0A11     		asrs	r2, r1, #4
 531 0004 9B18     		adds	r3, r3, r2
 532 0006 0F22     		movs	r2, #15
 533 0008 1140     		ands	r1, r2
 534              	.LVL56:
 535 000a 591A     		subs	r1, r3, r1
ARM GAS  /tmp/ccuyegJO.s 			page 14


 536 000c 4029     		cmp	r1, #64
 537 000e 02DD     		ble	.L51
 538 0010 4021     		movs	r1, #64
 539              	.LVL57:
 540              	.L52:
 133:Src/micromod.c **** }
 541              		.loc 1 133 0
 542 0012 0170     		strb	r1, [r0]
 134:Src/micromod.c **** 
 543              		.loc 1 134 0
 544              		@ sp needed
 545 0014 7047     		bx	lr
 546              	.LVL58:
 547              	.L51:
 133:Src/micromod.c **** }
 548              		.loc 1 133 0
 549 0016 CB43     		mvns	r3, r1
 550 0018 DB17     		asrs	r3, r3, #31
 551 001a 1940     		ands	r1, r3
 552              	.LVL59:
 553 001c F9E7     		b	.L52
 554              		.cfi_endproc
 555              	.LFE22:
 557              		.section	.text.waveform,"ax",%progbits
 558              		.align	1
 559              		.syntax unified
 560              		.code	16
 561              		.thumb_func
 562              		.fpu softvfp
 564              	waveform:
 565              	.LFB7:
 136:Src/micromod.c **** 	long amplitude = 0;
 566              		.loc 1 136 0
 567              		.cfi_startproc
 568              	.LVL60:
 138:Src/micromod.c **** 		case 0: /* Sine. */
 569              		.loc 1 138 0
 570 0000 0323     		movs	r3, #3
 136:Src/micromod.c **** 	long amplitude = 0;
 571              		.loc 1 136 0
 572 0002 10B5     		push	{r4, lr}
 573              	.LCFI3:
 574              		.cfi_def_cfa_offset 8
 575              		.cfi_offset 4, -8
 576              		.cfi_offset 14, -4
 138:Src/micromod.c **** 		case 0: /* Sine. */
 577              		.loc 1 138 0
 578 0004 1940     		ands	r1, r3
 579              	.LVL61:
 580 0006 0229     		cmp	r1, #2
 581 0008 14D0     		beq	.L55
 582 000a 9942     		cmp	r1, r3
 583 000c 19D0     		beq	.L56
 584 000e 0129     		cmp	r1, #1
 585 0010 08D0     		beq	.L57
 140:Src/micromod.c **** 			if( ( phase & 0x20 ) > 0 ) amplitude = -amplitude;
 586              		.loc 1 140 0
ARM GAS  /tmp/ccuyegJO.s 			page 15


 587 0012 1C33     		adds	r3, r3, #28
 588 0014 104A     		ldr	r2, .L63
 589 0016 0340     		ands	r3, r0
 590 0018 D35C     		ldrb	r3, [r2, r3]
 591              	.LVL62:
 141:Src/micromod.c **** 			break;
 592              		.loc 1 141 0
 593 001a 8206     		lsls	r2, r0, #26
 594 001c 00D5     		bpl	.L53
 141:Src/micromod.c **** 			break;
 595              		.loc 1 141 0 is_stmt 0 discriminator 1
 596 001e 5B42     		rsbs	r3, r3, #0
 597              	.LVL63:
 598              	.L53:
 155:Src/micromod.c **** 
 599              		.loc 1 155 0 is_stmt 1
 600 0020 1800     		movs	r0, r3
 601              		@ sp needed
 602 0022 10BD     		pop	{r4, pc}
 603              	.LVL64:
 604              	.L57:
 144:Src/micromod.c **** 			break;
 605              		.loc 1 144 0
 606 0024 FC23     		movs	r3, #252
 607 0026 2030     		adds	r0, r0, #32
 608              	.LVL65:
 609 0028 5B00     		lsls	r3, r3, #1
 610 002a C000     		lsls	r0, r0, #3
 611              	.LVL66:
 612 002c 1840     		ands	r0, r3
 613 002e F93B     		subs	r3, r3, #249
 614              	.L62:
 147:Src/micromod.c **** 			break;
 615              		.loc 1 147 0
 616 0030 1B1A     		subs	r3, r3, r0
 617              	.LVL67:
 148:Src/micromod.c **** 		case 3: /* Random. */
 618              		.loc 1 148 0
 619 0032 F5E7     		b	.L53
 620              	.LVL68:
 621              	.L55:
 147:Src/micromod.c **** 			break;
 622              		.loc 1 147 0
 623 0034 8023     		movs	r3, #128
 624 0036 0001     		lsls	r0, r0, #4
 625              	.LVL69:
 626 0038 9B00     		lsls	r3, r3, #2
 627 003a 1840     		ands	r0, r3
 628 003c 023B     		subs	r3, r3, #2
 629 003e FF3B     		subs	r3, r3, #255
 630 0040 F6E7     		b	.L62
 631              	.LVL70:
 632              	.L56:
 633              	.LBB4:
 634              	.LBB5:
 151:Src/micromod.c **** 			break;
 635              		.loc 1 151 0
ARM GAS  /tmp/ccuyegJO.s 			page 16


 636 0042 4122     		movs	r2, #65
 150:Src/micromod.c **** 			random_seed = ( random_seed * 65 + 17 ) & 0x1FFFFFFF;
 637              		.loc 1 150 0
 638 0044 0549     		ldr	r1, .L63+4
 639 0046 0C68     		ldr	r4, [r1]
 151:Src/micromod.c **** 			break;
 640              		.loc 1 151 0
 641 0048 6243     		muls	r2, r4
 642 004a 1132     		adds	r2, r2, #17
 643 004c D200     		lsls	r2, r2, #3
 150:Src/micromod.c **** 			random_seed = ( random_seed * 65 + 17 ) & 0x1FFFFFFF;
 644              		.loc 1 150 0
 645 004e 2315     		asrs	r3, r4, #20
 151:Src/micromod.c **** 			break;
 646              		.loc 1 151 0
 647 0050 D208     		lsrs	r2, r2, #3
 150:Src/micromod.c **** 			random_seed = ( random_seed * 65 + 17 ) & 0x1FFFFFFF;
 648              		.loc 1 150 0
 649 0052 FF3B     		subs	r3, r3, #255
 650              	.LVL71:
 151:Src/micromod.c **** 			break;
 651              		.loc 1 151 0
 652 0054 0A60     		str	r2, [r1]
 653              	.LVL72:
 654              	.LBE5:
 655              	.LBE4:
 154:Src/micromod.c **** }
 656              		.loc 1 154 0
 657 0056 E3E7     		b	.L53
 658              	.L64:
 659              		.align	2
 660              	.L63:
 661 0058 00000000 		.word	.LANCHOR6
 662 005c 00000000 		.word	.LANCHOR7
 663              		.cfi_endproc
 664              	.LFE7:
 666              		.section	.text.vibrato,"ax",%progbits
 667              		.align	1
 668              		.syntax unified
 669              		.code	16
 670              		.thumb_func
 671              		.fpu softvfp
 673              	vibrato:
 674              	.LFB8:
 157:Src/micromod.c **** 	chan->vibrato_add = waveform( chan->vibrato_phase, chan->vibrato_type ) * chan->vibrato_depth >> 7
 675              		.loc 1 157 0
 676              		.cfi_startproc
 677              	.LVL73:
 678 0000 10B5     		push	{r4, lr}
 679              	.LCFI4:
 680              		.cfi_def_cfa_offset 8
 681              		.cfi_offset 4, -8
 682              		.cfi_offset 14, -4
 158:Src/micromod.c **** }
 683              		.loc 1 158 0
 684 0002 C31C     		adds	r3, r0, #3
 157:Src/micromod.c **** 	chan->vibrato_add = waveform( chan->vibrato_phase, chan->vibrato_type ) * chan->vibrato_depth >> 7
ARM GAS  /tmp/ccuyegJO.s 			page 17


 685              		.loc 1 157 0
 686 0004 0400     		movs	r4, r0
 158:Src/micromod.c **** }
 687              		.loc 1 158 0
 688 0006 D97F     		ldrb	r1, [r3, #31]
 689 0008 031D     		adds	r3, r0, #4
 690 000a D87F     		ldrb	r0, [r3, #31]
 691              	.LVL74:
 692 000c FFF7FEFF 		bl	waveform
 693              	.LVL75:
 694 0010 A31D     		adds	r3, r4, #6
 695 0012 DB7F     		ldrb	r3, [r3, #31]
 696 0014 2B34     		adds	r4, r4, #43
 697              	.LVL76:
 698 0016 5843     		muls	r0, r3
 699 0018 C011     		asrs	r0, r0, #7
 700 001a 2070     		strb	r0, [r4]
 159:Src/micromod.c **** 
 701              		.loc 1 159 0
 702              		@ sp needed
 703              	.LVL77:
 704 001c 10BD     		pop	{r4, pc}
 705              		.cfi_endproc
 706              	.LFE8:
 708              		.section	.text.sequence_tick,"ax",%progbits
 709              		.align	1
 710              		.syntax unified
 711              		.code	16
 712              		.thumb_func
 713              		.fpu softvfp
 715              	sequence_tick:
 716              	.LFB14:
 193:Src/micromod.c **** 
 194:Src/micromod.c **** static void channel_row( struct channel *chan ) {
 195:Src/micromod.c **** 	long effect, param, volume, period;
 196:Src/micromod.c **** 	effect = chan->note.effect;
 197:Src/micromod.c **** 	param = chan->note.param;
 198:Src/micromod.c **** 	chan->vibrato_add = chan->tremolo_add = chan->arpeggio_add = chan->fx_count = 0;
 199:Src/micromod.c **** 	if( !( effect == 0x1D && param > 0 ) ) {
 200:Src/micromod.c **** 		/* Not note delay. */
 201:Src/micromod.c **** 		trigger( chan );
 202:Src/micromod.c **** 	}
 203:Src/micromod.c **** 	switch( effect ) {
 204:Src/micromod.c **** 		case 0x3: /* Tone Portamento.*/
 205:Src/micromod.c **** 			if( param > 0 ) chan->porta_speed = param;
 206:Src/micromod.c **** 			break;
 207:Src/micromod.c **** 		case 0x4: /* Vibrato.*/
 208:Src/micromod.c **** 			if( ( param & 0xF0 ) > 0 ) chan->vibrato_speed = param >> 4;
 209:Src/micromod.c **** 			if( ( param & 0x0F ) > 0 ) chan->vibrato_depth = param & 0xF;
 210:Src/micromod.c **** 			vibrato( chan );
 211:Src/micromod.c **** 			break;
 212:Src/micromod.c **** 		case 0x6: /* Vibrato + Volume Slide.*/
 213:Src/micromod.c **** 			vibrato( chan );
 214:Src/micromod.c **** 			break;
 215:Src/micromod.c **** 		case 0x7: /* Tremolo.*/
 216:Src/micromod.c **** 			if( ( param & 0xF0 ) > 0 ) chan->tremolo_speed = param >> 4;
 217:Src/micromod.c **** 			if( ( param & 0x0F ) > 0 ) chan->tremolo_depth = param & 0xF;
ARM GAS  /tmp/ccuyegJO.s 			page 18


 218:Src/micromod.c **** 			tremolo( chan );
 219:Src/micromod.c **** 			break;
 220:Src/micromod.c **** 		case 0x8: /* Set Panning. Not for 4-channel ProTracker. */
 221:Src/micromod.c **** 			if( num_channels != 4 ) {
 222:Src/micromod.c **** 				chan->panning = ( param < 128 ) ? ( param << 1 ) : 255;
 223:Src/micromod.c **** 			}
 224:Src/micromod.c **** 			break;
 225:Src/micromod.c **** 		case 0xB: /* Pattern Jump.*/
 226:Src/micromod.c **** 			if( pl_count < 0 ) {
 227:Src/micromod.c **** 				break_pattern = param;
 228:Src/micromod.c **** 				next_row = 0;
 229:Src/micromod.c **** 			}
 230:Src/micromod.c **** 			break;
 231:Src/micromod.c **** 		case 0xC: /* Set Volume.*/
 232:Src/micromod.c **** 			chan->volume = param > 64 ? 64 : param;
 233:Src/micromod.c **** 			break;
 234:Src/micromod.c **** 		case 0xD: /* Pattern Break.*/
 235:Src/micromod.c **** 			if( pl_count < 0 ) {
 236:Src/micromod.c **** 				if( break_pattern < 0 ) break_pattern = pattern + 1;
 237:Src/micromod.c **** 				next_row = ( param >> 4 ) * 10 + ( param & 0xF );
 238:Src/micromod.c **** 				if( next_row >= 64 ) next_row = 0;
 239:Src/micromod.c **** 			}
 240:Src/micromod.c **** 			break;
 241:Src/micromod.c **** 		case 0xF: /* Set Speed.*/
 242:Src/micromod.c **** 			if( param > 0 ) {
 243:Src/micromod.c **** 				if( param < 32 ) tick = speed = param;
 244:Src/micromod.c **** 				else set_tempo( param );
 245:Src/micromod.c **** 			}
 246:Src/micromod.c **** 			break;
 247:Src/micromod.c **** 		case 0x11: /* Fine Portamento Up.*/
 248:Src/micromod.c **** 			period = chan->period - param;
 249:Src/micromod.c **** 			chan->period = period < 0 ? 0 : period;
 250:Src/micromod.c **** 			break;
 251:Src/micromod.c **** 		case 0x12: /* Fine Portamento Down.*/
 252:Src/micromod.c **** 			period = chan->period + param;
 253:Src/micromod.c **** 			chan->period = period > 65535 ? 65535 : period;
 254:Src/micromod.c **** 			break;
 255:Src/micromod.c **** 		case 0x14: /* Set Vibrato Waveform.*/
 256:Src/micromod.c **** 			if( param < 8 ) chan->vibrato_type = param;
 257:Src/micromod.c **** 			break;
 258:Src/micromod.c **** 		case 0x16: /* Pattern Loop.*/
 259:Src/micromod.c **** 			if( param == 0 ) /* Set loop marker on this channel. */
 260:Src/micromod.c **** 				chan->pl_row = row;
 261:Src/micromod.c **** 			if( chan->pl_row < row ) { /* Marker valid. Begin looping. */
 262:Src/micromod.c **** 				if( pl_count < 0 ) { /* Not already looping, begin. */
 263:Src/micromod.c **** 					pl_count = param;
 264:Src/micromod.c **** 					pl_channel = chan->id;
 265:Src/micromod.c **** 				}
 266:Src/micromod.c **** 				if( pl_channel == chan->id ) { /* Next Loop.*/
 267:Src/micromod.c **** 					if( pl_count == 0 ) { /* Loop finished. */
 268:Src/micromod.c **** 						/* Invalidate current marker. */
 269:Src/micromod.c **** 						chan->pl_row = row + 1;
 270:Src/micromod.c **** 					} else { /* Loop and cancel any breaks on this row. */
 271:Src/micromod.c **** 						next_row = chan->pl_row;
 272:Src/micromod.c **** 						break_pattern = -1;
 273:Src/micromod.c **** 					}
 274:Src/micromod.c **** 					pl_count--;
ARM GAS  /tmp/ccuyegJO.s 			page 19


 275:Src/micromod.c **** 				}
 276:Src/micromod.c **** 			}
 277:Src/micromod.c **** 			break;
 278:Src/micromod.c **** 		case 0x17: /* Set Tremolo Waveform.*/
 279:Src/micromod.c **** 			if( param < 8 ) chan->tremolo_type = param;
 280:Src/micromod.c **** 			break;
 281:Src/micromod.c **** 		case 0x1A: /* Fine Volume Up.*/
 282:Src/micromod.c **** 			volume = chan->volume + param;
 283:Src/micromod.c **** 			chan->volume = volume > 64 ? 64 : volume;
 284:Src/micromod.c **** 			break;
 285:Src/micromod.c **** 		case 0x1B: /* Fine Volume Down.*/
 286:Src/micromod.c **** 			volume = chan->volume - param;
 287:Src/micromod.c **** 			chan->volume = volume < 0 ? 0 : volume;
 288:Src/micromod.c **** 			break;
 289:Src/micromod.c **** 		case 0x1C: /* Note Cut.*/
 290:Src/micromod.c **** 			if( param <= 0 ) chan->volume = 0;
 291:Src/micromod.c **** 			break;
 292:Src/micromod.c **** 		case 0x1E: /* Pattern Delay.*/
 293:Src/micromod.c **** 			tick = speed + speed * param;
 294:Src/micromod.c **** 			break;
 295:Src/micromod.c **** 	}
 296:Src/micromod.c **** 	update_frequency( chan );
 297:Src/micromod.c **** }
 298:Src/micromod.c **** 
 299:Src/micromod.c **** static void channel_tick( struct channel *chan ) {
 300:Src/micromod.c **** 	long effect, param, period;
 301:Src/micromod.c **** 	effect = chan->note.effect;
 302:Src/micromod.c **** 	param = chan->note.param;
 303:Src/micromod.c **** 	chan->fx_count++;
 304:Src/micromod.c **** 	switch( effect ) {
 305:Src/micromod.c **** 		case 0x1: /* Portamento Up.*/
 306:Src/micromod.c **** 			period = chan->period - param;
 307:Src/micromod.c **** 			chan->period = period < 0 ? 0 : period;
 308:Src/micromod.c **** 			break;
 309:Src/micromod.c **** 		case 0x2: /* Portamento Down.*/
 310:Src/micromod.c **** 			period = chan->period + param;
 311:Src/micromod.c **** 			chan->period = period > 65535 ? 65535 : period;
 312:Src/micromod.c **** 			break;
 313:Src/micromod.c **** 		case 0x3: /* Tone Portamento.*/
 314:Src/micromod.c **** 			tone_portamento( chan );
 315:Src/micromod.c **** 			break;
 316:Src/micromod.c **** 		case 0x4: /* Vibrato.*/
 317:Src/micromod.c **** 			chan->vibrato_phase += chan->vibrato_speed;
 318:Src/micromod.c **** 			vibrato( chan );
 319:Src/micromod.c **** 			break;
 320:Src/micromod.c **** 		case 0x5: /* Tone Porta + Volume Slide.*/
 321:Src/micromod.c **** 			tone_portamento( chan );
 322:Src/micromod.c **** 			volume_slide( chan, param );
 323:Src/micromod.c **** 			break;
 324:Src/micromod.c **** 		case 0x6: /* Vibrato + Volume Slide.*/
 325:Src/micromod.c **** 			chan->vibrato_phase += chan->vibrato_speed;
 326:Src/micromod.c **** 			vibrato( chan );
 327:Src/micromod.c **** 			volume_slide( chan, param );
 328:Src/micromod.c **** 			break;
 329:Src/micromod.c **** 		case 0x7: /* Tremolo.*/
 330:Src/micromod.c **** 			chan->tremolo_phase += chan->tremolo_speed;
 331:Src/micromod.c **** 			tremolo( chan );
ARM GAS  /tmp/ccuyegJO.s 			page 20


 332:Src/micromod.c **** 			break;
 333:Src/micromod.c **** 		case 0xA: /* Volume Slide.*/
 334:Src/micromod.c **** 			volume_slide( chan, param );
 335:Src/micromod.c **** 			break;
 336:Src/micromod.c **** 		case 0xE: /* Arpeggio.*/
 337:Src/micromod.c **** 			if( chan->fx_count > 2 ) chan->fx_count = 0;
 338:Src/micromod.c **** 			if( chan->fx_count == 0 ) chan->arpeggio_add = 0;
 339:Src/micromod.c **** 			if( chan->fx_count == 1 ) chan->arpeggio_add = param >> 4;
 340:Src/micromod.c **** 			if( chan->fx_count == 2 ) chan->arpeggio_add = param & 0xF;
 341:Src/micromod.c **** 			break;
 342:Src/micromod.c **** 		case 0x19: /* Retrig.*/
 343:Src/micromod.c **** 			if( chan->fx_count >= param ) {
 344:Src/micromod.c **** 				chan->fx_count = 0;
 345:Src/micromod.c **** 				chan->sample_idx = 0;
 346:Src/micromod.c **** 			}
 347:Src/micromod.c **** 			break;
 348:Src/micromod.c **** 		case 0x1C: /* Note Cut.*/
 349:Src/micromod.c **** 			if( param == chan->fx_count ) chan->volume = 0;
 350:Src/micromod.c **** 			break;
 351:Src/micromod.c **** 		case 0x1D: /* Note Delay.*/
 352:Src/micromod.c **** 			if( param == chan->fx_count ) trigger( chan );
 353:Src/micromod.c **** 			break;
 354:Src/micromod.c **** 	}
 355:Src/micromod.c **** 	if( effect > 0 ) update_frequency( chan );
 356:Src/micromod.c **** }
 357:Src/micromod.c **** 
 358:Src/micromod.c **** static long sequence_row() {
 359:Src/micromod.c **** 	long song_end, chan_idx, pat_offset;
 360:Src/micromod.c **** 	long effect, param;
 361:Src/micromod.c **** 	struct note *note;
 362:Src/micromod.c **** 	song_end = 0;
 363:Src/micromod.c **** 	if( break_pattern >= 0 ) {
 364:Src/micromod.c **** 		if( break_pattern >= song_length ) break_pattern = next_row = 0;
 365:Src/micromod.c **** 		if( break_pattern <= pattern ) song_end = 1;
 366:Src/micromod.c **** 		pattern = break_pattern;
 367:Src/micromod.c **** 		for( chan_idx = 0; chan_idx < num_channels; chan_idx++ ) channels[ chan_idx ].pl_row = 0;
 368:Src/micromod.c **** 		break_pattern = -1;
 369:Src/micromod.c **** 	}
 370:Src/micromod.c **** 	row = next_row;
 371:Src/micromod.c **** 	next_row = row + 1;
 372:Src/micromod.c **** 	if( next_row >= 64 ) {
 373:Src/micromod.c **** 		break_pattern = pattern + 1;
 374:Src/micromod.c **** 		next_row = 0;
 375:Src/micromod.c **** 	}
 376:Src/micromod.c **** 	pat_offset = ( sequence[ pattern ] * 64 + row ) * num_channels * 4;
 377:Src/micromod.c **** 	for( chan_idx = 0; chan_idx < num_channels; chan_idx++ ) {
 378:Src/micromod.c **** 		note = &channels[ chan_idx ].note;
 379:Src/micromod.c **** 		note->key  = ( pattern_data[ pat_offset ] & 0xF ) << 8;
 380:Src/micromod.c **** 		note->key |=   pattern_data[ pat_offset + 1 ];
 381:Src/micromod.c **** 		note->instrument  = pattern_data[ pat_offset + 2 ] >> 4;
 382:Src/micromod.c **** 		note->instrument |= pattern_data[ pat_offset ] & 0x10;
 383:Src/micromod.c **** 		effect = pattern_data[ pat_offset + 2 ] & 0xF;
 384:Src/micromod.c **** 		param = pattern_data[ pat_offset + 3 ];
 385:Src/micromod.c **** 		pat_offset += 4;
 386:Src/micromod.c **** 		if( effect == 0xE ) {
 387:Src/micromod.c **** 			effect = 0x10 | ( param >> 4 );
 388:Src/micromod.c **** 			param &= 0xF;
ARM GAS  /tmp/ccuyegJO.s 			page 21


 389:Src/micromod.c **** 		}
 390:Src/micromod.c **** 		if( effect == 0 && param > 0 ) effect = 0xE;
 391:Src/micromod.c **** 		note->effect = effect;
 392:Src/micromod.c **** 		note->param = param;
 393:Src/micromod.c **** 		channel_row( &channels[ chan_idx ] );
 394:Src/micromod.c **** 	}
 395:Src/micromod.c **** 	return song_end;
 396:Src/micromod.c **** }
 397:Src/micromod.c **** 
 398:Src/micromod.c **** static long sequence_tick() {
 717              		.loc 1 398 0
 718              		.cfi_startproc
 719              	.LVL78:
 720 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 721              	.LCFI5:
 722              		.cfi_def_cfa_offset 20
 723              		.cfi_offset 4, -20
 724              		.cfi_offset 5, -16
 725              		.cfi_offset 6, -12
 726              		.cfi_offset 7, -8
 727              		.cfi_offset 14, -4
 399:Src/micromod.c **** 	long song_end, chan_idx;
 400:Src/micromod.c **** 	song_end = 0;
 401:Src/micromod.c **** 	if( --tick <= 0 ) {
 728              		.loc 1 401 0
 729 0002 BB4A     		ldr	r2, .L176
 398:Src/micromod.c **** 	long song_end, chan_idx;
 730              		.loc 1 398 0
 731 0004 87B0     		sub	sp, sp, #28
 732              	.LCFI6:
 733              		.cfi_def_cfa_offset 48
 734              		.loc 1 401 0
 735 0006 1368     		ldr	r3, [r2]
 736 0008 BA4C     		ldr	r4, .L176+4
 737 000a 013B     		subs	r3, r3, #1
 738 000c 1360     		str	r3, [r2]
 739 000e 002B     		cmp	r3, #0
 740 0010 0EDD     		ble	.L67
 741              		.loc 1 401 0 is_stmt 0 discriminator 1
 742 0012 0023     		movs	r3, #0
 743 0014 E61C     		adds	r6, r4, #3
 744 0016 0193     		str	r3, [sp, #4]
 745 0018 1834     		adds	r4, r4, #24
 746              	.L68:
 747              	.LVL79:
 402:Src/micromod.c **** 		tick = speed;
 403:Src/micromod.c **** 		song_end = sequence_row();
 404:Src/micromod.c **** 	} else {
 405:Src/micromod.c **** 		for( chan_idx = 0; chan_idx < num_channels; chan_idx++ )
 748              		.loc 1 405 0 is_stmt 1 discriminator 1
 749 001a B74B     		ldr	r3, .L176+8
 750 001c 1B68     		ldr	r3, [r3]
 751 001e 0293     		str	r3, [sp, #8]
 752 0020 029A     		ldr	r2, [sp, #8]
 753 0022 019B     		ldr	r3, [sp, #4]
 754 0024 9342     		cmp	r3, r2
 755 0026 00DA     		bge	.LCB679
ARM GAS  /tmp/ccuyegJO.s 			page 22


 756 0028 A5E1     		b	.L141	@long jump
 757              	.LCB679:
 400:Src/micromod.c **** 	if( --tick <= 0 ) {
 758              		.loc 1 400 0
 759 002a 0023     		movs	r3, #0
 760 002c 0393     		str	r3, [sp, #12]
 406:Src/micromod.c **** 			channel_tick( &channels[ chan_idx ] );
 407:Src/micromod.c **** 	}
 408:Src/micromod.c **** 	return song_end;
 761              		.loc 1 408 0
 762 002e 44E0     		b	.L66
 763              	.LVL80:
 764              	.L67:
 765              	.LBB20:
 766              	.LBB21:
 767              	.LBB22:
 362:Src/micromod.c **** 	if( break_pattern >= 0 ) {
 768              		.loc 1 362 0
 769 0030 0021     		movs	r1, #0
 770              	.LBE22:
 771              	.LBE21:
 402:Src/micromod.c **** 		song_end = sequence_row();
 772              		.loc 1 402 0
 773 0032 B24B     		ldr	r3, .L176+12
 774 0034 B248     		ldr	r0, .L176+16
 775 0036 1B68     		ldr	r3, [r3]
 776              	.LBB38:
 777              	.LBB35:
 362:Src/micromod.c **** 	if( break_pattern >= 0 ) {
 778              		.loc 1 362 0
 779 0038 0391     		str	r1, [sp, #12]
 780              	.LBE35:
 781              	.LBE38:
 402:Src/micromod.c **** 		song_end = sequence_row();
 782              		.loc 1 402 0
 783 003a 1360     		str	r3, [r2]
 784              	.LBB39:
 785              	.LBB36:
 363:Src/micromod.c **** 		if( break_pattern >= song_length ) break_pattern = next_row = 0;
 786              		.loc 1 363 0
 787 003c B14B     		ldr	r3, .L176+20
 788 003e 1A68     		ldr	r2, [r3]
 789 0040 8A42     		cmp	r2, r1
 790 0042 19DB     		blt	.L69
 364:Src/micromod.c **** 		if( break_pattern <= pattern ) song_end = 1;
 791              		.loc 1 364 0
 792 0044 B049     		ldr	r1, .L176+24
 793 0046 0968     		ldr	r1, [r1]
 794 0048 8A42     		cmp	r2, r1
 795 004a 03DB     		blt	.L70
 796 004c 0022     		movs	r2, #0
 797 004e AF49     		ldr	r1, .L176+28
 798 0050 1A60     		str	r2, [r3]
 799 0052 0A60     		str	r2, [r1]
 800              	.L70:
 365:Src/micromod.c **** 		pattern = break_pattern;
 801              		.loc 1 365 0
ARM GAS  /tmp/ccuyegJO.s 			page 23


 802 0054 1A68     		ldr	r2, [r3]
 803 0056 0168     		ldr	r1, [r0]
 804 0058 D60F     		lsrs	r6, r2, #31
 805 005a CD17     		asrs	r5, r1, #31
 806 005c 9142     		cmp	r1, r2
 807 005e 6E41     		adcs	r6, r6, r5
 366:Src/micromod.c **** 		for( chan_idx = 0; chan_idx < num_channels; chan_idx++ ) channels[ chan_idx ].pl_row = 0;
 808              		.loc 1 366 0
 809 0060 0260     		str	r2, [r0]
 367:Src/micromod.c **** 		break_pattern = -1;
 810              		.loc 1 367 0
 811 0062 A54A     		ldr	r2, .L176+8
 365:Src/micromod.c **** 		pattern = break_pattern;
 812              		.loc 1 365 0
 813 0064 0396     		str	r6, [sp, #12]
 814              	.LVL81:
 367:Src/micromod.c **** 		break_pattern = -1;
 815              		.loc 1 367 0
 816 0066 1568     		ldr	r5, [r2]
 817 0068 0022     		movs	r2, #0
 818 006a 3026     		movs	r6, #48
 819              	.LVL82:
 820 006c 1700     		movs	r7, r2
 821              	.LVL83:
 822              	.L71:
 823 006e AA42     		cmp	r2, r5
 824 0070 26DB     		blt	.L72
 368:Src/micromod.c **** 	}
 825              		.loc 1 368 0
 826 0072 0122     		movs	r2, #1
 827              	.LVL84:
 828 0074 5242     		rsbs	r2, r2, #0
 829 0076 1A60     		str	r2, [r3]
 830              	.LVL85:
 831              	.L69:
 370:Src/micromod.c **** 	next_row = row + 1;
 832              		.loc 1 370 0
 833 0078 A449     		ldr	r1, .L176+28
 834 007a A54D     		ldr	r5, .L176+32
 835 007c 0A68     		ldr	r2, [r1]
 836 007e 2A60     		str	r2, [r5]
 371:Src/micromod.c **** 	if( next_row >= 64 ) {
 837              		.loc 1 371 0
 838 0080 551C     		adds	r5, r2, #1
 839 0082 0D60     		str	r5, [r1]
 372:Src/micromod.c **** 		break_pattern = pattern + 1;
 840              		.loc 1 372 0
 841 0084 3F2D     		cmp	r5, #63
 842 0086 04DD     		ble	.L73
 373:Src/micromod.c **** 		next_row = 0;
 843              		.loc 1 373 0
 844 0088 0568     		ldr	r5, [r0]
 845 008a 0135     		adds	r5, r5, #1
 846 008c 1D60     		str	r5, [r3]
 374:Src/micromod.c **** 	}
 847              		.loc 1 374 0
 848 008e 0023     		movs	r3, #0
ARM GAS  /tmp/ccuyegJO.s 			page 24


 849 0090 0B60     		str	r3, [r1]
 850              	.L73:
 376:Src/micromod.c **** 	for( chan_idx = 0; chan_idx < num_channels; chan_idx++ ) {
 851              		.loc 1 376 0
 852 0092 A04B     		ldr	r3, .L176+36
 853 0094 1968     		ldr	r1, [r3]
 854 0096 0368     		ldr	r3, [r0]
 855 0098 CB5C     		ldrb	r3, [r1, r3]
 856 009a 9B01     		lsls	r3, r3, #6
 857 009c 9B18     		adds	r3, r3, r2
 858 009e 964A     		ldr	r2, .L176+8
 859 00a0 1268     		ldr	r2, [r2]
 860 00a2 5343     		muls	r3, r2
 861 00a4 9B00     		lsls	r3, r3, #2
 862 00a6 0193     		str	r3, [sp, #4]
 863              	.LVL86:
 377:Src/micromod.c **** 		note = &channels[ chan_idx ].note;
 864              		.loc 1 377 0
 865 00a8 0023     		movs	r3, #0
 866              	.LVL87:
 867 00aa 0293     		str	r3, [sp, #8]
 868              	.LVL88:
 869              	.L74:
 870 00ac 924B     		ldr	r3, .L176+8
 871 00ae 1B68     		ldr	r3, [r3]
 872 00b0 0493     		str	r3, [sp, #16]
 873 00b2 049A     		ldr	r2, [sp, #16]
 874 00b4 029B     		ldr	r3, [sp, #8]
 875 00b6 9342     		cmp	r3, r2
 876 00b8 09DB     		blt	.L116
 877              	.LVL89:
 878              	.L66:
 879              	.LBE36:
 880              	.LBE39:
 881              	.LBE20:
 409:Src/micromod.c **** }
 882              		.loc 1 409 0
 883 00ba 0398     		ldr	r0, [sp, #12]
 884 00bc 07B0     		add	sp, sp, #28
 885              		@ sp needed
 886 00be F0BD     		pop	{r4, r5, r6, r7, pc}
 887              	.LVL90:
 888              	.L72:
 889              	.LBB41:
 890              	.LBB40:
 891              	.LBB37:
 367:Src/micromod.c **** 		break_pattern = -1;
 892              		.loc 1 367 0
 893 00c0 3100     		movs	r1, r6
 894 00c2 5143     		muls	r1, r2
 895 00c4 2031     		adds	r1, r1, #32
 896 00c6 6118     		adds	r1, r4, r1
 897 00c8 0F70     		strb	r7, [r1]
 898 00ca 0132     		adds	r2, r2, #1
 899              	.LVL91:
 900 00cc CFE7     		b	.L71
 901              	.LVL92:
ARM GAS  /tmp/ccuyegJO.s 			page 25


 902              	.L116:
 379:Src/micromod.c **** 		note->key |=   pattern_data[ pat_offset + 1 ];
 903              		.loc 1 379 0
 904 00ce F020     		movs	r0, #240
 382:Src/micromod.c **** 		effect = pattern_data[ pat_offset + 2 ] & 0xF;
 905              		.loc 1 382 0
 906 00d0 1025     		movs	r5, #16
 379:Src/micromod.c **** 		note->key |=   pattern_data[ pat_offset + 1 ];
 907              		.loc 1 379 0
 908 00d2 914B     		ldr	r3, .L176+40
 909              	.LVL93:
 910 00d4 0001     		lsls	r0, r0, #4
 911 00d6 1968     		ldr	r1, [r3]
 912 00d8 019B     		ldr	r3, [sp, #4]
 913 00da CA18     		adds	r2, r1, r3
 914 00dc 1378     		ldrb	r3, [r2]
 915 00de 1B02     		lsls	r3, r3, #8
 916 00e0 0340     		ands	r3, r0
 917 00e2 2380     		strh	r3, [r4]
 380:Src/micromod.c **** 		note->instrument  = pattern_data[ pat_offset + 2 ] >> 4;
 918              		.loc 1 380 0
 919 00e4 5078     		ldrb	r0, [r2, #1]
 920 00e6 0343     		orrs	r3, r0
 921 00e8 2380     		strh	r3, [r4]
 381:Src/micromod.c **** 		note->instrument |= pattern_data[ pat_offset ] & 0x10;
 922              		.loc 1 381 0
 923 00ea 019B     		ldr	r3, [sp, #4]
 924 00ec 0233     		adds	r3, r3, #2
 925 00ee C918     		adds	r1, r1, r3
 926 00f0 0B78     		ldrb	r3, [r1]
 927 00f2 1B09     		lsrs	r3, r3, #4
 928 00f4 A370     		strb	r3, [r4, #2]
 382:Src/micromod.c **** 		effect = pattern_data[ pat_offset + 2 ] & 0xF;
 929              		.loc 1 382 0
 930 00f6 1078     		ldrb	r0, [r2]
 931 00f8 2840     		ands	r0, r5
 932 00fa 0343     		orrs	r3, r0
 933 00fc A370     		strb	r3, [r4, #2]
 934 00fe 0B78     		ldrb	r3, [r1]
 935 0100 0F21     		movs	r1, #15
 384:Src/micromod.c **** 		pat_offset += 4;
 936              		.loc 1 384 0
 937 0102 D578     		ldrb	r5, [r2, #3]
 385:Src/micromod.c **** 		if( effect == 0xE ) {
 938              		.loc 1 385 0
 939 0104 019A     		ldr	r2, [sp, #4]
 940 0106 0B40     		ands	r3, r1
 941              	.LVL94:
 942 0108 0432     		adds	r2, r2, #4
 943 010a 0192     		str	r2, [sp, #4]
 944              	.LVL95:
 386:Src/micromod.c **** 			effect = 0x10 | ( param >> 4 );
 945              		.loc 1 386 0
 946 010c 0E2B     		cmp	r3, #14
 947 010e 38D1     		bne	.L75
 387:Src/micromod.c **** 			param &= 0xF;
 948              		.loc 1 387 0
ARM GAS  /tmp/ccuyegJO.s 			page 26


 949 0110 1022     		movs	r2, #16
 950              	.LVL96:
 951 0112 2B11     		asrs	r3, r5, #4
 952              	.LVL97:
 953 0114 1343     		orrs	r3, r2
 954              	.LVL98:
 388:Src/micromod.c **** 		}
 955              		.loc 1 388 0
 956 0116 0D40     		ands	r5, r1
 957              	.LVL99:
 958              	.L76:
 959              	.LBB23:
 960              	.LBB24:
 198:Src/micromod.c **** 	if( !( effect == 0x1D && param > 0 ) ) {
 961              		.loc 1 198 0
 962 0118 2100     		movs	r1, r4
 963 011a 0022     		movs	r2, #0
 964 011c 2131     		adds	r1, r1, #33
 965              	.LBE24:
 966              	.LBE23:
 391:Src/micromod.c **** 		note->param = param;
 967              		.loc 1 391 0
 968 011e DFB2     		uxtb	r7, r3
 392:Src/micromod.c **** 		channel_row( &channels[ chan_idx ] );
 969              		.loc 1 392 0
 970 0120 EEB2     		uxtb	r6, r5
 391:Src/micromod.c **** 		note->param = param;
 971              		.loc 1 391 0
 972 0122 E770     		strb	r7, [r4, #3]
 392:Src/micromod.c **** 		channel_row( &channels[ chan_idx ] );
 973              		.loc 1 392 0
 974 0124 2671     		strb	r6, [r4, #4]
 975              	.LVL100:
 976              	.LBB32:
 977              	.LBB29:
 198:Src/micromod.c **** 	if( !( effect == 0x1D && param > 0 ) ) {
 978              		.loc 1 198 0
 979 0126 CA72     		strb	r2, [r1, #11]
 980 0128 0A70     		strb	r2, [r1]
 981 012a 0931     		adds	r1, r1, #9
 982 012c 0591     		str	r1, [sp, #20]
 983 012e 0A70     		strb	r2, [r1]
 984 0130 4A70     		strb	r2, [r1, #1]
 199:Src/micromod.c **** 		/* Not note delay. */
 985              		.loc 1 199 0
 986 0132 1D2B     		cmp	r3, #29
 987 0134 01D1     		bne	.L77
 988 0136 9542     		cmp	r5, r2
 989 0138 2FD1     		bne	.L78
 990              	.L77:
 201:Src/micromod.c **** 	}
 991              		.loc 1 201 0
 992 013a 2000     		movs	r0, r4
 993 013c FFF7FEFF 		bl	trigger
 994              	.LVL101:
 203:Src/micromod.c **** 		case 0x3: /* Tone Portamento.*/
 995              		.loc 1 203 0
ARM GAS  /tmp/ccuyegJO.s 			page 27


 996 0140 F81E     		subs	r0, r7, #3
 997 0142 1B28     		cmp	r0, #27
 998 0144 29D8     		bhi	.L78
 999 0146 FFF7FEFF 		bl	__gnu_thumb1_case_uhi
 1000              	.L80:
 1001 014a 2500     		.2byte	(.L79-.L80)/2
 1002 014c 3000     		.2byte	(.L81-.L80)/2
 1003 014e 2800     		.2byte	(.L78-.L80)/2
 1004 0150 3D00     		.2byte	(.L82-.L80)/2
 1005 0152 4100     		.2byte	(.L83-.L80)/2
 1006 0154 5B00     		.2byte	(.L84-.L80)/2
 1007 0156 2800     		.2byte	(.L78-.L80)/2
 1008 0158 2800     		.2byte	(.L78-.L80)/2
 1009 015a 6500     		.2byte	(.L85-.L80)/2
 1010 015c 0201     		.2byte	(.L175-.L80)/2
 1011 015e 6F00     		.2byte	(.L87-.L80)/2
 1012 0160 2800     		.2byte	(.L78-.L80)/2
 1013 0162 8800     		.2byte	(.L88-.L80)/2
 1014 0164 2800     		.2byte	(.L78-.L80)/2
 1015 0166 9C00     		.2byte	(.L89-.L80)/2
 1016 0168 A300     		.2byte	(.L90-.L80)/2
 1017 016a 2800     		.2byte	(.L78-.L80)/2
 1018 016c AA00     		.2byte	(.L91-.L80)/2
 1019 016e 2800     		.2byte	(.L78-.L80)/2
 1020 0170 B100     		.2byte	(.L92-.L80)/2
 1021 0172 FA00     		.2byte	(.L93-.L80)/2
 1022 0174 2800     		.2byte	(.L78-.L80)/2
 1023 0176 2800     		.2byte	(.L78-.L80)/2
 1024 0178 0001     		.2byte	(.L94-.L80)/2
 1025 017a 0701     		.2byte	(.L95-.L80)/2
 1026 017c 0D01     		.2byte	(.L96-.L80)/2
 1027 017e 2800     		.2byte	(.L78-.L80)/2
 1028 0180 1101     		.2byte	(.L97-.L80)/2
 1029              	.LVL102:
 1030              		.p2align 1
 1031              	.L75:
 1032              	.LBE29:
 1033              	.LBE32:
 390:Src/micromod.c **** 		note->effect = effect;
 1034              		.loc 1 390 0
 1035 0182 002B     		cmp	r3, #0
 1036 0184 C8D1     		bne	.L76
 1037 0186 2A00     		movs	r2, r5
 1038              	.LVL103:
 1039 0188 511E     		subs	r1, r2, #1
 1040 018a 8A41     		sbcs	r2, r2, r1
 1041 018c 0E33     		adds	r3, r3, #14
 1042              	.LVL104:
 1043 018e 5242     		rsbs	r2, r2, #0
 1044 0190 1340     		ands	r3, r2
 1045              	.LVL105:
 1046 0192 C1E7     		b	.L76
 1047              	.LVL106:
 1048              	.L79:
 1049              	.LBB33:
 1050              	.LBB30:
 205:Src/micromod.c **** 			break;
ARM GAS  /tmp/ccuyegJO.s 			page 28


 1051              		.loc 1 205 0
 1052 0194 002D     		cmp	r5, #0
 1053 0196 00D0     		beq	.L78
 1054 0198 E677     		strb	r6, [r4, #31]
 1055              	.LVL107:
 1056              	.L78:
 296:Src/micromod.c **** }
 1057              		.loc 1 296 0
 1058 019a 2000     		movs	r0, r4
 1059 019c FFF7FEFF 		bl	update_frequency
 1060              	.LVL108:
 1061              	.LBE30:
 1062              	.LBE33:
 377:Src/micromod.c **** 		note = &channels[ chan_idx ].note;
 1063              		.loc 1 377 0
 1064 01a0 029B     		ldr	r3, [sp, #8]
 1065 01a2 3034     		adds	r4, r4, #48
 1066 01a4 0133     		adds	r3, r3, #1
 1067 01a6 0293     		str	r3, [sp, #8]
 1068              	.LVL109:
 1069 01a8 80E7     		b	.L74
 1070              	.LVL110:
 1071              	.L81:
 1072              	.LBB34:
 1073              	.LBB31:
 208:Src/micromod.c **** 			if( ( param & 0x0F ) > 0 ) chan->vibrato_depth = param & 0xF;
 1074              		.loc 1 208 0
 1075 01aa 0F23     		movs	r3, #15
 1076 01ac 3200     		movs	r2, r6
 1077 01ae 9A43     		bics	r2, r3
 1078 01b0 03D0     		beq	.L99
 1079 01b2 2200     		movs	r2, r4
 1080 01b4 2D11     		asrs	r5, r5, #4
 1081              	.LVL111:
 1082 01b6 2432     		adds	r2, r2, #36
 1083 01b8 1570     		strb	r5, [r2]
 1084              	.L99:
 1085 01ba 1E40     		ands	r6, r3
 209:Src/micromod.c **** 			vibrato( chan );
 1086              		.loc 1 209 0
 1087 01bc 02D0     		beq	.L82
 1088 01be 2300     		movs	r3, r4
 1089 01c0 2533     		adds	r3, r3, #37
 1090 01c2 1E70     		strb	r6, [r3]
 1091              	.L82:
 213:Src/micromod.c **** 			break;
 1092              		.loc 1 213 0
 1093 01c4 2000     		movs	r0, r4
 1094 01c6 FFF7FEFF 		bl	vibrato
 1095              	.LVL112:
 1096 01ca E6E7     		b	.L78
 1097              	.LVL113:
 1098              	.L83:
 216:Src/micromod.c **** 			if( ( param & 0x0F ) > 0 ) chan->tremolo_depth = param & 0xF;
 1099              		.loc 1 216 0
 1100 01cc 0F23     		movs	r3, #15
 1101 01ce 3200     		movs	r2, r6
ARM GAS  /tmp/ccuyegJO.s 			page 29


 1102 01d0 9A43     		bics	r2, r3
 1103 01d2 03D0     		beq	.L101
 1104 01d4 2200     		movs	r2, r4
 1105 01d6 2D11     		asrs	r5, r5, #4
 1106              	.LVL114:
 1107 01d8 2832     		adds	r2, r2, #40
 1108 01da 1570     		strb	r5, [r2]
 1109              	.L101:
 1110 01dc 2700     		movs	r7, r4
 1111 01de 1E40     		ands	r6, r3
 1112 01e0 2937     		adds	r7, r7, #41
 217:Src/micromod.c **** 			tremolo( chan );
 1113              		.loc 1 217 0
 1114 01e2 002E     		cmp	r6, #0
 1115 01e4 00D0     		beq	.L102
 1116 01e6 3E70     		strb	r6, [r7]
 1117              	.L102:
 1118              	.LVL115:
 1119              	.LBB25:
 1120              	.LBB26:
 162:Src/micromod.c **** }
 1121              		.loc 1 162 0
 1122 01e8 2300     		movs	r3, r4
 1123 01ea 2633     		adds	r3, r3, #38
 1124 01ec 1978     		ldrb	r1, [r3]
 1125 01ee 5878     		ldrb	r0, [r3, #1]
 1126 01f0 FFF7FEFF 		bl	waveform
 1127              	.LVL116:
 1128 01f4 3B78     		ldrb	r3, [r7]
 1129 01f6 5843     		muls	r0, r3
 1130 01f8 059B     		ldr	r3, [sp, #20]
 1131 01fa 8011     		asrs	r0, r0, #6
 1132 01fc 1870     		strb	r0, [r3]
 1133 01fe CCE7     		b	.L78
 1134              	.LVL117:
 1135              	.L84:
 1136              	.LBE26:
 1137              	.LBE25:
 221:Src/micromod.c **** 				chan->panning = ( param < 128 ) ? ( param << 1 ) : 255;
 1138              		.loc 1 221 0
 1139 0200 049B     		ldr	r3, [sp, #16]
 1140 0202 042B     		cmp	r3, #4
 1141 0204 C9D0     		beq	.L78
 222:Src/micromod.c **** 			}
 1142              		.loc 1 222 0
 1143 0206 FF23     		movs	r3, #255
 1144 0208 7F2D     		cmp	r5, #127
 1145 020a 01DC     		bgt	.L103
 1146 020c 7600     		lsls	r6, r6, #1
 1147 020e F3B2     		uxtb	r3, r6
 1148              	.L103:
 1149 0210 6376     		strb	r3, [r4, #25]
 1150 0212 C2E7     		b	.L78
 1151              	.L85:
 226:Src/micromod.c **** 				break_pattern = param;
 1152              		.loc 1 226 0
 1153 0214 414B     		ldr	r3, .L176+44
ARM GAS  /tmp/ccuyegJO.s 			page 30


 1154 0216 1B68     		ldr	r3, [r3]
 1155 0218 002B     		cmp	r3, #0
 1156 021a BEDA     		bge	.L78
 228:Src/micromod.c **** 			}
 1157              		.loc 1 228 0
 1158 021c 0022     		movs	r2, #0
 227:Src/micromod.c **** 				next_row = 0;
 1159              		.loc 1 227 0
 1160 021e 394B     		ldr	r3, .L176+20
 1161 0220 1D60     		str	r5, [r3]
 228:Src/micromod.c **** 			}
 1162              		.loc 1 228 0
 1163 0222 3A4B     		ldr	r3, .L176+28
 1164              	.LVL118:
 1165              	.L170:
 238:Src/micromod.c **** 			}
 1166              		.loc 1 238 0
 1167 0224 1A60     		str	r2, [r3]
 1168 0226 B8E7     		b	.L78
 1169              	.LVL119:
 1170              	.L87:
 235:Src/micromod.c **** 				if( break_pattern < 0 ) break_pattern = pattern + 1;
 1171              		.loc 1 235 0
 1172 0228 3C4B     		ldr	r3, .L176+44
 1173 022a 1B68     		ldr	r3, [r3]
 1174 022c 002B     		cmp	r3, #0
 1175 022e B4DA     		bge	.L78
 236:Src/micromod.c **** 				next_row = ( param >> 4 ) * 10 + ( param & 0xF );
 1176              		.loc 1 236 0
 1177 0230 344A     		ldr	r2, .L176+20
 1178 0232 1368     		ldr	r3, [r2]
 1179 0234 002B     		cmp	r3, #0
 1180 0236 03DA     		bge	.L105
 1181 0238 314B     		ldr	r3, .L176+16
 1182 023a 1B68     		ldr	r3, [r3]
 1183 023c 0133     		adds	r3, r3, #1
 1184 023e 1360     		str	r3, [r2]
 1185              	.L105:
 237:Src/micromod.c **** 				if( next_row >= 64 ) next_row = 0;
 1186              		.loc 1 237 0
 1187 0240 0A23     		movs	r3, #10
 1188 0242 2D11     		asrs	r5, r5, #4
 1189              	.LVL120:
 1190 0244 5D43     		muls	r5, r3
 1191 0246 0533     		adds	r3, r3, #5
 1192 0248 1E40     		ands	r6, r3
 1193 024a AE19     		adds	r6, r5, r6
 1194 024c 2F4B     		ldr	r3, .L176+28
 238:Src/micromod.c **** 			}
 1195              		.loc 1 238 0
 1196 024e 3F2E     		cmp	r6, #63
 1197 0250 01DC     		bgt	.L106
 237:Src/micromod.c **** 				if( next_row >= 64 ) next_row = 0;
 1198              		.loc 1 237 0
 1199 0252 1E60     		str	r6, [r3]
 1200 0254 A1E7     		b	.L78
 1201              	.L106:
ARM GAS  /tmp/ccuyegJO.s 			page 31


 238:Src/micromod.c **** 			}
 1202              		.loc 1 238 0
 1203 0256 0022     		movs	r2, #0
 1204 0258 E4E7     		b	.L170
 1205              	.LVL121:
 1206              	.L88:
 242:Src/micromod.c **** 				if( param < 32 ) tick = speed = param;
 1207              		.loc 1 242 0
 1208 025a 002D     		cmp	r5, #0
 1209 025c 9DD0     		beq	.L78
 243:Src/micromod.c **** 				else set_tempo( param );
 1210              		.loc 1 243 0
 1211 025e 1F2D     		cmp	r5, #31
 1212 0260 04DC     		bgt	.L107
 1213 0262 264B     		ldr	r3, .L176+12
 1214 0264 1D60     		str	r5, [r3]
 1215              	.LVL122:
 1216              	.L172:
 293:Src/micromod.c **** 			break;
 1217              		.loc 1 293 0
 1218 0266 224B     		ldr	r3, .L176
 1219 0268 1D60     		str	r5, [r3]
 1220 026a 96E7     		b	.L78
 1221              	.LVL123:
 1222              	.L107:
 1223              	.LBB27:
 1224              	.LBB28:
  96:Src/micromod.c **** }
 1225              		.loc 1 96 0
 1226 026c 2C4B     		ldr	r3, .L176+48
 1227 026e 2900     		movs	r1, r5
 1228 0270 1B68     		ldr	r3, [r3]
 1229 0272 5800     		lsls	r0, r3, #1
 1230 0274 5B10     		asrs	r3, r3, #1
 1231 0276 C018     		adds	r0, r0, r3
 1232 0278 FFF7FEFF 		bl	__aeabi_idiv
 1233              	.LVL124:
 1234 027c 294B     		ldr	r3, .L176+52
 1235 027e 1860     		str	r0, [r3]
 1236 0280 8BE7     		b	.L78
 1237              	.LVL125:
 1238              	.L89:
 1239              	.LBE28:
 1240              	.LBE27:
 248:Src/micromod.c **** 			chan->period = period < 0 ? 0 : period;
 1241              		.loc 1 248 0
 1242 0282 E388     		ldrh	r3, [r4, #6]
 1243 0284 5D1B     		subs	r5, r3, r5
 1244              	.LVL126:
 249:Src/micromod.c **** 			break;
 1245              		.loc 1 249 0
 1246 0286 EB43     		mvns	r3, r5
 1247 0288 DB17     		asrs	r3, r3, #31
 1248 028a 1D40     		ands	r5, r3
 1249              	.LVL127:
 1250              	.L109:
 253:Src/micromod.c **** 			break;
ARM GAS  /tmp/ccuyegJO.s 			page 32


 1251              		.loc 1 253 0
 1252 028c E580     		strh	r5, [r4, #6]
 1253 028e 84E7     		b	.L78
 1254              	.LVL128:
 1255              	.L90:
 252:Src/micromod.c **** 			chan->period = period > 65535 ? 65535 : period;
 1256              		.loc 1 252 0
 1257 0290 E388     		ldrh	r3, [r4, #6]
 1258 0292 5D19     		adds	r5, r3, r5
 1259              	.LVL129:
 253:Src/micromod.c **** 			break;
 1260              		.loc 1 253 0
 1261 0294 244B     		ldr	r3, .L176+56
 1262 0296 9D42     		cmp	r5, r3
 1263 0298 F8DD     		ble	.L109
 1264 029a 1D00     		movs	r5, r3
 1265              	.LVL130:
 1266 029c F6E7     		b	.L109
 1267              	.LVL131:
 1268              	.L91:
 256:Src/micromod.c **** 			break;
 1269              		.loc 1 256 0
 1270 029e 072D     		cmp	r5, #7
 1271 02a0 00DD     		ble	.LCB1253
 1272 02a2 7AE7     		b	.L78	@long jump
 1273              	.LCB1253:
 1274 02a4 2300     		movs	r3, r4
 1275 02a6 2233     		adds	r3, r3, #34
 1276              	.L171:
 279:Src/micromod.c **** 			break;
 1277              		.loc 1 279 0
 1278 02a8 1E70     		strb	r6, [r3]
 1279 02aa 76E7     		b	.L78
 1280              	.L92:
 1281 02ac 2000     		movs	r0, r4
 1282 02ae 184B     		ldr	r3, .L176+32
 1283 02b0 2030     		adds	r0, r0, #32
 259:Src/micromod.c **** 				chan->pl_row = row;
 1284              		.loc 1 259 0
 1285 02b2 002D     		cmp	r5, #0
 1286 02b4 01D1     		bne	.L110
 260:Src/micromod.c **** 			if( chan->pl_row < row ) { /* Marker valid. Begin looping. */
 1287              		.loc 1 260 0
 1288 02b6 1A78     		ldrb	r2, [r3]
 1289 02b8 0270     		strb	r2, [r0]
 1290              	.L110:
 261:Src/micromod.c **** 				if( pl_count < 0 ) { /* Not already looping, begin. */
 1291              		.loc 1 261 0
 1292 02ba 0678     		ldrb	r6, [r0]
 1293 02bc 1A68     		ldr	r2, [r3]
 1294 02be 9642     		cmp	r6, r2
 1295 02c0 00DB     		blt	.LCB1277
 1296 02c2 6AE7     		b	.L78	@long jump
 1297              	.LCB1277:
 262:Src/micromod.c **** 					pl_count = param;
 1298              		.loc 1 262 0
 1299 02c4 1549     		ldr	r1, .L176+44
ARM GAS  /tmp/ccuyegJO.s 			page 33


 1300 02c6 237F     		ldrb	r3, [r4, #28]
 1301 02c8 0F68     		ldr	r7, [r1]
 1302 02ca 002F     		cmp	r7, #0
 1303 02cc 02DA     		bge	.L111
 263:Src/micromod.c **** 					pl_channel = chan->id;
 1304              		.loc 1 263 0
 1305 02ce 0D60     		str	r5, [r1]
 264:Src/micromod.c **** 				}
 1306              		.loc 1 264 0
 1307 02d0 1649     		ldr	r1, .L176+60
 1308 02d2 0B60     		str	r3, [r1]
 1309              	.L111:
 266:Src/micromod.c **** 					if( pl_count == 0 ) { /* Loop finished. */
 1310              		.loc 1 266 0
 1311 02d4 1549     		ldr	r1, .L176+60
 1312 02d6 0968     		ldr	r1, [r1]
 1313 02d8 8B42     		cmp	r3, r1
 1314 02da 00D0     		beq	.LCB1294
 1315 02dc 5DE7     		b	.L78	@long jump
 1316              	.LCB1294:
 267:Src/micromod.c **** 						/* Invalidate current marker. */
 1317              		.loc 1 267 0
 1318 02de 0F49     		ldr	r1, .L176+44
 1319 02e0 0B68     		ldr	r3, [r1]
 1320 02e2 002B     		cmp	r3, #0
 1321 02e4 24D1     		bne	.L112
 269:Src/micromod.c **** 					} else { /* Loop and cancel any breaks on this row. */
 1322              		.loc 1 269 0
 1323 02e6 0132     		adds	r2, r2, #1
 1324 02e8 0270     		strb	r2, [r0]
 1325              	.L113:
 274:Src/micromod.c **** 				}
 1326              		.loc 1 274 0
 1327 02ea 013B     		subs	r3, r3, #1
 1328 02ec 0B60     		str	r3, [r1]
 1329 02ee 54E7     		b	.L78
 1330              	.L177:
 1331              		.align	2
 1332              	.L176:
 1333 02f0 00000000 		.word	.LANCHOR8
 1334 02f4 00000000 		.word	.LANCHOR9
 1335 02f8 00000000 		.word	.LANCHOR15
 1336 02fc 00000000 		.word	.LANCHOR10
 1337 0300 00000000 		.word	.LANCHOR14
 1338 0304 00000000 		.word	.LANCHOR11
 1339 0308 00000000 		.word	.LANCHOR12
 1340 030c 00000000 		.word	.LANCHOR13
 1341 0310 00000000 		.word	.LANCHOR16
 1342 0314 00000000 		.word	.LANCHOR17
 1343 0318 00000000 		.word	.LANCHOR18
 1344 031c 00000000 		.word	.LANCHOR19
 1345 0320 00000000 		.word	.LANCHOR2
 1346 0324 00000000 		.word	.LANCHOR20
 1347 0328 FFFF0000 		.word	65535
 1348 032c 00000000 		.word	.LANCHOR21
 1349              	.L112:
 272:Src/micromod.c **** 					}
ARM GAS  /tmp/ccuyegJO.s 			page 34


 1350              		.loc 1 272 0
 1351 0330 0120     		movs	r0, #1
 271:Src/micromod.c **** 						break_pattern = -1;
 1352              		.loc 1 271 0
 1353 0332 544A     		ldr	r2, .L178
 272:Src/micromod.c **** 					}
 1354              		.loc 1 272 0
 1355 0334 4042     		rsbs	r0, r0, #0
 271:Src/micromod.c **** 						break_pattern = -1;
 1356              		.loc 1 271 0
 1357 0336 1660     		str	r6, [r2]
 272:Src/micromod.c **** 					}
 1358              		.loc 1 272 0
 1359 0338 534A     		ldr	r2, .L178+4
 1360 033a 1060     		str	r0, [r2]
 1361 033c D5E7     		b	.L113
 1362              	.L93:
 279:Src/micromod.c **** 			break;
 1363              		.loc 1 279 0
 1364 033e 072D     		cmp	r5, #7
 1365 0340 00DD     		ble	.LCB1342
 1366 0342 2AE7     		b	.L78	@long jump
 1367              	.LCB1342:
 1368 0344 2300     		movs	r3, r4
 1369 0346 2633     		adds	r3, r3, #38
 1370 0348 AEE7     		b	.L171
 1371              	.L94:
 1372              	.LVL132:
 282:Src/micromod.c **** 			chan->volume = volume > 64 ? 64 : volume;
 1373              		.loc 1 282 0
 1374 034a 237E     		ldrb	r3, [r4, #24]
 1375 034c 5D19     		adds	r5, r3, r5
 1376              	.LVL133:
 1377              	.L175:
 283:Src/micromod.c **** 			break;
 1378              		.loc 1 283 0
 1379 034e 402D     		cmp	r5, #64
 1380 0350 00DD     		ble	.L169
 1381 0352 4025     		movs	r5, #64
 1382              	.L169:
 290:Src/micromod.c **** 			break;
 1383              		.loc 1 290 0
 1384 0354 2576     		strb	r5, [r4, #24]
 1385 0356 20E7     		b	.L78
 1386              	.LVL134:
 1387              	.L95:
 286:Src/micromod.c **** 			chan->volume = volume < 0 ? 0 : volume;
 1388              		.loc 1 286 0
 1389 0358 237E     		ldrb	r3, [r4, #24]
 1390 035a 5D1B     		subs	r5, r3, r5
 1391              	.LVL135:
 287:Src/micromod.c **** 			break;
 1392              		.loc 1 287 0
 1393 035c EB43     		mvns	r3, r5
 1394 035e DB17     		asrs	r3, r3, #31
 1395 0360 1D40     		ands	r5, r3
 1396              	.LVL136:
ARM GAS  /tmp/ccuyegJO.s 			page 35


 1397 0362 F7E7     		b	.L169
 1398              	.LVL137:
 1399              	.L96:
 290:Src/micromod.c **** 			break;
 1400              		.loc 1 290 0
 1401 0364 002D     		cmp	r5, #0
 1402 0366 00D0     		beq	.LCB1394
 1403 0368 17E7     		b	.L78	@long jump
 1404              	.LCB1394:
 1405 036a F3E7     		b	.L169
 1406              	.L97:
 293:Src/micromod.c **** 			break;
 1407              		.loc 1 293 0
 1408 036c 474B     		ldr	r3, .L178+8
 1409 036e 0135     		adds	r5, r5, #1
 1410              	.LVL138:
 1411 0370 1B68     		ldr	r3, [r3]
 1412 0372 5D43     		muls	r5, r3
 1413              	.LVL139:
 1414 0374 77E7     		b	.L172
 1415              	.LVL140:
 1416              	.L141:
 1417 0376 2700     		movs	r7, r4
 1418              	.LBE31:
 1419              	.LBE34:
 1420              	.LBE37:
 1421              	.LBE40:
 1422              	.LBE41:
 1423              	.LBB42:
 1424              	.LBB43:
 303:Src/micromod.c **** 	switch( effect ) {
 1425              		.loc 1 303 0 discriminator 3
 1426 0378 B37F     		ldrb	r3, [r6, #30]
 1427              	.LVL141:
 301:Src/micromod.c **** 	param = chan->note.param;
 1428              		.loc 1 301 0 discriminator 3
 1429 037a 3278     		ldrb	r2, [r6]
 303:Src/micromod.c **** 	switch( effect ) {
 1430              		.loc 1 303 0 discriminator 3
 1431 037c 0133     		adds	r3, r3, #1
 1432 037e DBB2     		uxtb	r3, r3
 304:Src/micromod.c **** 		case 0x1: /* Portamento Up.*/
 1433              		.loc 1 304 0 discriminator 3
 1434 0380 501E     		subs	r0, r2, #1
 1435 0382 183F     		subs	r7, r7, #24
 1436              	.LVL142:
 302:Src/micromod.c **** 	chan->fx_count++;
 1437              		.loc 1 302 0 discriminator 3
 1438 0384 7578     		ldrb	r5, [r6, #1]
 1439              	.LVL143:
 303:Src/micromod.c **** 	switch( effect ) {
 1440              		.loc 1 303 0 discriminator 3
 1441 0386 B377     		strb	r3, [r6, #30]
 304:Src/micromod.c **** 		case 0x1: /* Portamento Up.*/
 1442              		.loc 1 304 0 discriminator 3
 1443 0388 1C28     		cmp	r0, #28
 1444 038a 72D8     		bhi	.L118
ARM GAS  /tmp/ccuyegJO.s 			page 36


 1445 038c FFF7FEFF 		bl	__gnu_thumb1_case_uqi
 1446              	.L120:
 1447 0390 0F       		.byte	(.L119-.L120)/2
 1448 0391 1A       		.byte	(.L121-.L120)/2
 1449 0392 22       		.byte	(.L122-.L120)/2
 1450 0393 26       		.byte	(.L123-.L120)/2
 1451 0394 2E       		.byte	(.L124-.L120)/2
 1452 0395 36       		.byte	(.L125-.L120)/2
 1453 0396 3E       		.byte	(.L126-.L120)/2
 1454 0397 71       		.byte	(.L118-.L120)/2
 1455 0398 71       		.byte	(.L118-.L120)/2
 1456 0399 31       		.byte	(.L127-.L120)/2
 1457 039a 71       		.byte	(.L118-.L120)/2
 1458 039b 71       		.byte	(.L118-.L120)/2
 1459 039c 71       		.byte	(.L118-.L120)/2
 1460 039d 4B       		.byte	(.L128-.L120)/2
 1461 039e 71       		.byte	(.L118-.L120)/2
 1462 039f 71       		.byte	(.L118-.L120)/2
 1463 03a0 71       		.byte	(.L118-.L120)/2
 1464 03a1 71       		.byte	(.L118-.L120)/2
 1465 03a2 71       		.byte	(.L118-.L120)/2
 1466 03a3 71       		.byte	(.L118-.L120)/2
 1467 03a4 71       		.byte	(.L118-.L120)/2
 1468 03a5 71       		.byte	(.L118-.L120)/2
 1469 03a6 71       		.byte	(.L118-.L120)/2
 1470 03a7 71       		.byte	(.L118-.L120)/2
 1471 03a8 5E       		.byte	(.L129-.L120)/2
 1472 03a9 71       		.byte	(.L118-.L120)/2
 1473 03aa 71       		.byte	(.L118-.L120)/2
 1474 03ab 66       		.byte	(.L130-.L120)/2
 1475 03ac 6B       		.byte	(.L131-.L120)/2
 1476 03ad 00       		.p2align 1
 1477              	.L119:
 1478 03ae F21C     		adds	r2, r6, #3
 1479              	.LVL144:
 306:Src/micromod.c **** 			chan->period = period < 0 ? 0 : period;
 1480              		.loc 1 306 0
 1481 03b0 1388     		ldrh	r3, [r2]
 1482 03b2 5D1B     		subs	r5, r3, r5
 1483              	.LVL145:
 307:Src/micromod.c **** 			break;
 1484              		.loc 1 307 0
 1485 03b4 EB43     		mvns	r3, r5
 1486 03b6 DB17     		asrs	r3, r3, #31
 1487 03b8 1D40     		ands	r5, r3
 1488              	.LVL146:
 1489              	.L134:
 311:Src/micromod.c **** 			break;
 1490              		.loc 1 311 0
 1491 03ba 1580     		strh	r5, [r2]
 1492              	.LVL147:
 1493              	.L133:
 355:Src/micromod.c **** }
 1494              		.loc 1 355 0
 1495 03bc 3800     		movs	r0, r7
 1496 03be FFF7FEFF 		bl	update_frequency
 1497              	.LVL148:
ARM GAS  /tmp/ccuyegJO.s 			page 37


 1498 03c2 58E0     		b	.L140
 1499              	.LVL149:
 1500              	.L121:
 1501 03c4 F21C     		adds	r2, r6, #3
 1502              	.LVL150:
 310:Src/micromod.c **** 			chan->period = period > 65535 ? 65535 : period;
 1503              		.loc 1 310 0
 1504 03c6 1388     		ldrh	r3, [r2]
 1505 03c8 5D19     		adds	r5, r3, r5
 1506              	.LVL151:
 311:Src/micromod.c **** 			break;
 1507              		.loc 1 311 0
 1508 03ca 314B     		ldr	r3, .L178+12
 1509 03cc 9D42     		cmp	r5, r3
 1510 03ce F4DD     		ble	.L134
 1511 03d0 1D00     		movs	r5, r3
 1512              	.LVL152:
 1513 03d2 F2E7     		b	.L134
 1514              	.LVL153:
 1515              	.L122:
 314:Src/micromod.c **** 			break;
 1516              		.loc 1 314 0
 1517 03d4 3800     		movs	r0, r7
 1518 03d6 FFF7FEFF 		bl	tone_portamento
 1519              	.LVL154:
 1520 03da EFE7     		b	.L133
 1521              	.LVL155:
 1522              	.L123:
 317:Src/micromod.c **** 			vibrato( chan );
 1523              		.loc 1 317 0
 1524 03dc E37A     		ldrb	r3, [r4, #11]
 1525 03de 227B     		ldrb	r2, [r4, #12]
 1526              	.LVL156:
 318:Src/micromod.c **** 			break;
 1527              		.loc 1 318 0
 1528 03e0 3800     		movs	r0, r7
 1529              	.LVL157:
 317:Src/micromod.c **** 			vibrato( chan );
 1530              		.loc 1 317 0
 1531 03e2 9B18     		adds	r3, r3, r2
 1532 03e4 E372     		strb	r3, [r4, #11]
 1533              	.LVL158:
 318:Src/micromod.c **** 			break;
 1534              		.loc 1 318 0
 1535 03e6 FFF7FEFF 		bl	vibrato
 1536              	.LVL159:
 1537 03ea E7E7     		b	.L133
 1538              	.LVL160:
 1539              	.L124:
 321:Src/micromod.c **** 			volume_slide( chan, param );
 1540              		.loc 1 321 0
 1541 03ec 3800     		movs	r0, r7
 1542 03ee FFF7FEFF 		bl	tone_portamento
 1543              	.LVL161:
 1544              	.L127:
 334:Src/micromod.c **** 			break;
 1545              		.loc 1 334 0
ARM GAS  /tmp/ccuyegJO.s 			page 38


 1546 03f2 2900     		movs	r1, r5
 1547 03f4 2000     		movs	r0, r4
 1548 03f6 FFF7FEFF 		bl	volume_slide.isra.0
 1549              	.LVL162:
 1550 03fa DFE7     		b	.L133
 1551              	.LVL163:
 1552              	.L125:
 325:Src/micromod.c **** 			vibrato( chan );
 1553              		.loc 1 325 0
 1554 03fc E37A     		ldrb	r3, [r4, #11]
 1555 03fe 227B     		ldrb	r2, [r4, #12]
 1556              	.LVL164:
 326:Src/micromod.c **** 			volume_slide( chan, param );
 1557              		.loc 1 326 0
 1558 0400 3800     		movs	r0, r7
 1559              	.LVL165:
 325:Src/micromod.c **** 			vibrato( chan );
 1560              		.loc 1 325 0
 1561 0402 9B18     		adds	r3, r3, r2
 1562 0404 E372     		strb	r3, [r4, #11]
 1563              	.LVL166:
 326:Src/micromod.c **** 			volume_slide( chan, param );
 1564              		.loc 1 326 0
 1565 0406 FFF7FEFF 		bl	vibrato
 1566              	.LVL167:
 1567 040a F2E7     		b	.L127
 1568              	.LVL168:
 1569              	.L126:
 330:Src/micromod.c **** 			tremolo( chan );
 1570              		.loc 1 330 0
 1571 040c E07B     		ldrb	r0, [r4, #15]
 1572 040e 237C     		ldrb	r3, [r4, #16]
 1573              	.LBB44:
 1574              	.LBB45:
 162:Src/micromod.c **** }
 1575              		.loc 1 162 0
 1576 0410 A17B     		ldrb	r1, [r4, #14]
 1577              	.LBE45:
 1578              	.LBE44:
 330:Src/micromod.c **** 			tremolo( chan );
 1579              		.loc 1 330 0
 1580 0412 C018     		adds	r0, r0, r3
 1581 0414 C0B2     		uxtb	r0, r0
 1582 0416 E073     		strb	r0, [r4, #15]
 1583              	.LVL169:
 1584              	.LBB47:
 1585              	.LBB46:
 162:Src/micromod.c **** }
 1586              		.loc 1 162 0
 1587 0418 FFF7FEFF 		bl	waveform
 1588              	.LVL170:
 1589 041c 637C     		ldrb	r3, [r4, #17]
 1590 041e 5843     		muls	r0, r3
 1591 0420 8011     		asrs	r0, r0, #6
 1592 0422 A074     		strb	r0, [r4, #18]
 1593 0424 CAE7     		b	.L133
 1594              	.LVL171:
ARM GAS  /tmp/ccuyegJO.s 			page 39


 1595              	.L128:
 1596              	.LBE46:
 1597              	.LBE47:
 337:Src/micromod.c **** 			if( chan->fx_count == 0 ) chan->arpeggio_add = 0;
 1598              		.loc 1 337 0
 1599 0426 022B     		cmp	r3, #2
 1600 0428 01D9     		bls	.L135
 1601 042a 0023     		movs	r3, #0
 1602 042c B377     		strb	r3, [r6, #30]
 1603              	.L135:
 338:Src/micromod.c **** 			if( chan->fx_count == 1 ) chan->arpeggio_add = param >> 4;
 1604              		.loc 1 338 0
 1605 042e B37F     		ldrb	r3, [r6, #30]
 1606 0430 002B     		cmp	r3, #0
 1607 0432 01D1     		bne	.L136
 1608 0434 2375     		strb	r3, [r4, #20]
 1609 0436 C1E7     		b	.L133
 1610              	.L136:
 339:Src/micromod.c **** 			if( chan->fx_count == 2 ) chan->arpeggio_add = param & 0xF;
 1611              		.loc 1 339 0
 1612 0438 012B     		cmp	r3, #1
 1613 043a 02D1     		bne	.L137
 1614 043c 2D11     		asrs	r5, r5, #4
 1615              	.LVL172:
 1616              	.L173:
 340:Src/micromod.c **** 			break;
 1617              		.loc 1 340 0
 1618 043e 2575     		strb	r5, [r4, #20]
 1619              	.LVL173:
 1620 0440 BCE7     		b	.L133
 1621              	.LVL174:
 1622              	.L137:
 1623 0442 022B     		cmp	r3, #2
 1624 0444 BAD1     		bne	.L133
 1625 0446 0D33     		adds	r3, r3, #13
 1626 0448 1D40     		ands	r5, r3
 1627              	.LVL175:
 1628 044a F8E7     		b	.L173
 1629              	.LVL176:
 1630              	.L129:
 343:Src/micromod.c **** 				chan->fx_count = 0;
 1631              		.loc 1 343 0
 1632 044c 9D42     		cmp	r5, r3
 1633 044e B5DC     		bgt	.L133
 345:Src/micromod.c **** 			}
 1634              		.loc 1 345 0
 1635 0450 3200     		movs	r2, r6
 1636              	.LVL177:
 344:Src/micromod.c **** 				chan->sample_idx = 0;
 1637              		.loc 1 344 0
 1638 0452 0023     		movs	r3, #0
 345:Src/micromod.c **** 			}
 1639              		.loc 1 345 0
 1640 0454 0D32     		adds	r2, r2, #13
 344:Src/micromod.c **** 				chan->sample_idx = 0;
 1641              		.loc 1 344 0
 1642 0456 B377     		strb	r3, [r6, #30]
ARM GAS  /tmp/ccuyegJO.s 			page 40


 345:Src/micromod.c **** 			}
 1643              		.loc 1 345 0
 1644 0458 1360     		str	r3, [r2]
 1645 045a AFE7     		b	.L133
 1646              	.LVL178:
 1647              	.L130:
 349:Src/micromod.c **** 			break;
 1648              		.loc 1 349 0
 1649 045c 9D42     		cmp	r5, r3
 1650 045e ADD1     		bne	.L133
 1651 0460 0023     		movs	r3, #0
 1652 0462 7375     		strb	r3, [r6, #21]
 1653 0464 AAE7     		b	.L133
 1654              	.L131:
 352:Src/micromod.c **** 			break;
 1655              		.loc 1 352 0
 1656 0466 9D42     		cmp	r5, r3
 1657 0468 A8D1     		bne	.L133
 1658 046a 3800     		movs	r0, r7
 1659 046c FFF7FEFF 		bl	trigger
 1660              	.LVL179:
 1661 0470 A4E7     		b	.L133
 1662              	.LVL180:
 1663              	.L118:
 355:Src/micromod.c **** }
 1664              		.loc 1 355 0
 1665 0472 002A     		cmp	r2, #0
 1666 0474 A2D1     		bne	.L133
 1667              	.LVL181:
 1668              	.L140:
 1669              	.LBE43:
 1670              	.LBE42:
 405:Src/micromod.c **** 			channel_tick( &channels[ chan_idx ] );
 1671              		.loc 1 405 0 discriminator 3
 1672 0476 019B     		ldr	r3, [sp, #4]
 1673 0478 3036     		adds	r6, r6, #48
 1674 047a 0133     		adds	r3, r3, #1
 1675 047c 0193     		str	r3, [sp, #4]
 1676              	.LVL182:
 1677 047e 3034     		adds	r4, r4, #48
 1678 0480 CBE5     		b	.L68
 1679              	.L179:
 1680 0482 C046     		.align	2
 1681              	.L178:
 1682 0484 00000000 		.word	.LANCHOR13
 1683 0488 00000000 		.word	.LANCHOR11
 1684 048c 00000000 		.word	.LANCHOR10
 1685 0490 FFFF0000 		.word	65535
 1686              		.cfi_endproc
 1687              	.LFE14:
 1689              		.section	.text.micromod_calculate_mod_file_len,"ax",%progbits
 1690              		.align	1
 1691              		.global	micromod_calculate_mod_file_len
 1692              		.syntax unified
 1693              		.code	16
 1694              		.thumb_func
 1695              		.fpu softvfp
ARM GAS  /tmp/ccuyegJO.s 			page 41


 1697              	micromod_calculate_mod_file_len:
 1698              	.LFB16:
 410:Src/micromod.c **** 
 411:Src/micromod.c **** static void resample( struct channel *chan, short *buf, long offset, long count ) {
 412:Src/micromod.c **** 	long sample, ampl, lamp, ramp;
 413:Src/micromod.c **** 	unsigned long buf_idx, buf_end, sidx, step, inst, llen, lep1, epos;
 414:Src/micromod.c **** 	signed char *sdat;
 415:Src/micromod.c **** 	ampl = buf ? chan->ampl : 0;
 416:Src/micromod.c **** 	ramp = ampl * chan->panning;
 417:Src/micromod.c **** 	lamp = ampl * ( 255 - chan->panning );
 418:Src/micromod.c **** 	sidx = chan->sample_idx;
 419:Src/micromod.c **** 	step = chan->step;
 420:Src/micromod.c **** 	inst = chan->instrument;
 421:Src/micromod.c **** 	llen = instruments[ inst ].loop_length;
 422:Src/micromod.c **** 	lep1 = instruments[ inst ].loop_start + llen;
 423:Src/micromod.c **** 	sdat = instruments[ inst ].sample_data;
 424:Src/micromod.c **** 	buf_idx = offset << 1;
 425:Src/micromod.c **** 	buf_end = ( offset + count ) << 1;
 426:Src/micromod.c **** 	while( buf_idx < buf_end ) {
 427:Src/micromod.c **** 		if( sidx >= lep1 ) {
 428:Src/micromod.c **** 			/* Handle loop. */
 429:Src/micromod.c **** 			if( llen <= FP_ONE ) {
 430:Src/micromod.c **** 				/* One-shot sample. */
 431:Src/micromod.c **** 				sidx = lep1;
 432:Src/micromod.c **** 				break;
 433:Src/micromod.c **** 			}
 434:Src/micromod.c **** 			/* Subtract loop-length until within loop points. */
 435:Src/micromod.c **** 			while( sidx >= lep1 ) sidx -= llen;
 436:Src/micromod.c **** 		}
 437:Src/micromod.c **** 		/* Calculate sample position at end. */
 438:Src/micromod.c **** 		epos = sidx + ( ( buf_end - buf_idx ) >> 1 ) * step;
 439:Src/micromod.c **** 		if( ampl <= 0 ) {
 440:Src/micromod.c **** 			/* No need to mix. */
 441:Src/micromod.c **** 			sidx = epos;
 442:Src/micromod.c **** 			break;
 443:Src/micromod.c **** 		}
 444:Src/micromod.c **** 		/* Only mix to end of current loop. */
 445:Src/micromod.c **** 		if( epos > lep1 ) epos = lep1;
 446:Src/micromod.c **** 		while( sidx < epos ) {
 447:Src/micromod.c **** 			/* Most of the cpu time is spent in here. */
 448:Src/micromod.c **** 			sample = sdat[ sidx >> FP_SHIFT ];
 449:Src/micromod.c **** 			buf[ buf_idx++ ] += sample * lamp >> 8;
 450:Src/micromod.c **** 			buf[ buf_idx++ ] += sample * ramp >> 8;
 451:Src/micromod.c **** 			sidx += step;
 452:Src/micromod.c **** 		}
 453:Src/micromod.c **** 	}
 454:Src/micromod.c **** 	chan->sample_idx = sidx;
 455:Src/micromod.c **** }
 456:Src/micromod.c **** 
 457:Src/micromod.c **** /*
 458:Src/micromod.c **** 	Calculate the length in bytes of a module file given the 1084-byte header.
 459:Src/micromod.c **** 	Returns -1 if the data is not recognised as a module.
 460:Src/micromod.c **** */
 461:Src/micromod.c **** long micromod_calculate_mod_file_len( signed char *module_header ) {
 1699              		.loc 1 461 0
 1700              		.cfi_startproc
 1701              	.LVL183:
ARM GAS  /tmp/ccuyegJO.s 			page 42


 1702 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1703              	.LCFI7:
 1704              		.cfi_def_cfa_offset 24
 1705              		.cfi_offset 3, -24
 1706              		.cfi_offset 4, -20
 1707              		.cfi_offset 5, -16
 1708              		.cfi_offset 6, -12
 1709              		.cfi_offset 7, -8
 1710              		.cfi_offset 14, -4
 1711              		.loc 1 461 0
 1712 0002 0600     		movs	r6, r0
 462:Src/micromod.c **** 	long length, numchan, inst_idx;
 463:Src/micromod.c **** 	numchan = calculate_num_channels( module_header );
 1713              		.loc 1 463 0
 1714 0004 FFF7FEFF 		bl	calculate_num_channels
 1715              	.LVL184:
 1716 0008 051E     		subs	r5, r0, #0
 1717              	.LVL185:
 464:Src/micromod.c **** 	if( numchan <= 0 ) return -1;
 1718              		.loc 1 464 0
 1719 000a 14DD     		ble	.L183
 465:Src/micromod.c **** 	length = 1084 + 4 * numchan * 64 * calculate_num_patterns( module_header );
 1720              		.loc 1 465 0
 1721 000c 3000     		movs	r0, r6
 1722              	.LVL186:
 1723 000e FFF7FEFF 		bl	calculate_num_patterns
 1724              	.LVL187:
 1725 0012 2D02     		lsls	r5, r5, #8
 1726              	.LVL188:
 1727 0014 4543     		muls	r5, r0
 1728 0016 094B     		ldr	r3, .L185
 466:Src/micromod.c **** 	for( inst_idx = 1; inst_idx < 32; inst_idx++ )
 1729              		.loc 1 466 0
 1730 0018 F327     		movs	r7, #243
 465:Src/micromod.c **** 	length = 1084 + 4 * numchan * 64 * calculate_num_patterns( module_header );
 1731              		.loc 1 465 0
 1732 001a EC18     		adds	r4, r5, r3
 1733              	.LVL189:
 1734 001c 2A25     		movs	r5, #42
 1735              		.loc 1 466 0
 1736 001e BF00     		lsls	r7, r7, #2
 1737              	.LVL190:
 1738              	.L182:
 467:Src/micromod.c **** 		length += unsigned_short_big_endian( module_header, inst_idx * 30 + 12 ) * 2;
 1739              		.loc 1 467 0 discriminator 3
 1740 0020 2900     		movs	r1, r5
 1741 0022 3000     		movs	r0, r6
 1742 0024 FFF7FEFF 		bl	unsigned_short_big_endian
 1743              	.LVL191:
 1744 0028 1E35     		adds	r5, r5, #30
 1745 002a 4000     		lsls	r0, r0, #1
 1746 002c 2418     		adds	r4, r4, r0
 1747              	.LVL192:
 466:Src/micromod.c **** 	for( inst_idx = 1; inst_idx < 32; inst_idx++ )
 1748              		.loc 1 466 0 discriminator 3
 1749 002e BD42     		cmp	r5, r7
 1750 0030 F6D1     		bne	.L182
ARM GAS  /tmp/ccuyegJO.s 			page 43


 1751              	.LVL193:
 1752              	.L180:
 468:Src/micromod.c **** 	return length;
 469:Src/micromod.c **** }
 1753              		.loc 1 469 0
 1754 0032 2000     		movs	r0, r4
 1755              		@ sp needed
 1756              	.LVL194:
 1757 0034 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1758              	.LVL195:
 1759              	.L183:
 464:Src/micromod.c **** 	length = 1084 + 4 * numchan * 64 * calculate_num_patterns( module_header );
 1760              		.loc 1 464 0
 1761 0036 0124     		movs	r4, #1
 1762 0038 6442     		rsbs	r4, r4, #0
 1763 003a FAE7     		b	.L180
 1764              	.L186:
 1765              		.align	2
 1766              	.L185:
 1767 003c 3C040000 		.word	1084
 1768              		.cfi_endproc
 1769              	.LFE16:
 1771              		.section	.text.micromod_get_string,"ax",%progbits
 1772              		.align	1
 1773              		.global	micromod_get_string
 1774              		.syntax unified
 1775              		.code	16
 1776              		.thumb_func
 1777              		.fpu softvfp
 1779              	micromod_get_string:
 1780              	.LFB18:
 470:Src/micromod.c **** 
 471:Src/micromod.c **** /*
 472:Src/micromod.c **** 	Set the player to play the specified module data.
 473:Src/micromod.c **** 	Returns -1 if the data is not recognised as a module.
 474:Src/micromod.c **** 	Returns -2 if the sampling rate is less than 8000hz.
 475:Src/micromod.c **** */
 476:Src/micromod.c **** long micromod_initialise( signed char *data, long sampling_rate ) {
 477:Src/micromod.c **** 	struct instrument *inst;
 478:Src/micromod.c **** 	long sample_data_offset, inst_idx;
 479:Src/micromod.c **** 	long sample_length, volume, fine_tune, loop_start, loop_length;
 480:Src/micromod.c **** 	num_channels = calculate_num_channels( data );
 481:Src/micromod.c **** 	if( num_channels <= 0 ) {
 482:Src/micromod.c **** 		num_channels = 0;
 483:Src/micromod.c **** 		return -1;
 484:Src/micromod.c **** 	}
 485:Src/micromod.c **** 	if( sampling_rate < 8000 ) return -2;
 486:Src/micromod.c **** 	module_data = data;
 487:Src/micromod.c **** 	sample_rate = sampling_rate;
 488:Src/micromod.c **** 	song_length = module_data[ 950 ] & 0x7F;
 489:Src/micromod.c **** 	restart = module_data[ 951 ] & 0x7F;
 490:Src/micromod.c **** 	if( restart >= song_length ) restart = 0;
 491:Src/micromod.c **** 	sequence = (unsigned char *) module_data + 952;
 492:Src/micromod.c **** 	pattern_data = (unsigned char *) module_data + 1084;
 493:Src/micromod.c **** 	num_patterns = calculate_num_patterns( module_data );
 494:Src/micromod.c **** 	sample_data_offset = 1084 + num_patterns * 64 * num_channels * 4;
 495:Src/micromod.c **** 	for( inst_idx = 1; inst_idx < 32; inst_idx++ ) {
ARM GAS  /tmp/ccuyegJO.s 			page 44


 496:Src/micromod.c **** 		inst = &instruments[ inst_idx ];
 497:Src/micromod.c **** 		sample_length = unsigned_short_big_endian( module_data, inst_idx * 30 + 12 ) * 2;
 498:Src/micromod.c **** 		fine_tune = module_data[ inst_idx * 30 + 14 ] & 0xF;
 499:Src/micromod.c **** 		inst->fine_tune = ( fine_tune & 0x7 ) - ( fine_tune & 0x8 ) + 8;
 500:Src/micromod.c **** 		volume = module_data[ inst_idx * 30 + 15 ] & 0x7F;
 501:Src/micromod.c **** 		inst->volume = volume > 64 ? 64 : volume;
 502:Src/micromod.c **** 		loop_start = unsigned_short_big_endian( module_data, inst_idx * 30 + 16 ) * 2;
 503:Src/micromod.c **** 		loop_length = unsigned_short_big_endian( module_data, inst_idx * 30 + 18 ) * 2;
 504:Src/micromod.c **** 		if( loop_start + loop_length > sample_length )
 505:Src/micromod.c **** 			loop_length = sample_length - loop_start;
 506:Src/micromod.c **** 		if( loop_length < 4 ) {
 507:Src/micromod.c **** 			loop_start = sample_length;
 508:Src/micromod.c **** 			loop_length = 0;
 509:Src/micromod.c **** 		}
 510:Src/micromod.c **** 		inst->loop_start = loop_start << FP_SHIFT;
 511:Src/micromod.c **** 		inst->loop_length = loop_length << FP_SHIFT;
 512:Src/micromod.c **** 		inst->sample_data = module_data + sample_data_offset;
 513:Src/micromod.c **** 		sample_data_offset += sample_length;
 514:Src/micromod.c **** 	}
 515:Src/micromod.c **** 	c2_rate = ( num_channels > 4 ) ? 8363 : 8287;
 516:Src/micromod.c **** 	gain = ( num_channels > 4 ) ? 1 : 2;
 517:Src/micromod.c **** 	micromod_set_position( 0 );
 518:Src/micromod.c **** 	return 0;
 519:Src/micromod.c **** }
 520:Src/micromod.c **** 
 521:Src/micromod.c **** /*
 522:Src/micromod.c **** 	Obtains song and instrument names from the module.
 523:Src/micromod.c **** 	The song name is returned as instrument 0.
 524:Src/micromod.c **** 	The name is copied into the location pointed to by string,
 525:Src/micromod.c **** 	and is at most 23 characters long, including the trailing null.
 526:Src/micromod.c **** */
 527:Src/micromod.c **** void micromod_get_string( long instrument, char *string ) {
 1781              		.loc 1 527 0
 1782              		.cfi_startproc
 1783              	.LVL196:
 528:Src/micromod.c **** 	long index, offset, length, character;
 529:Src/micromod.c **** 	if( num_channels <= 0 ) {
 1784              		.loc 1 529 0
 1785 0000 114B     		ldr	r3, .L195
 527:Src/micromod.c **** 	long index, offset, length, character;
 1786              		.loc 1 527 0
 1787 0002 70B5     		push	{r4, r5, r6, lr}
 1788              	.LCFI8:
 1789              		.cfi_def_cfa_offset 16
 1790              		.cfi_offset 4, -16
 1791              		.cfi_offset 5, -12
 1792              		.cfi_offset 6, -8
 1793              		.cfi_offset 14, -4
 1794              		.loc 1 529 0
 1795 0004 1A68     		ldr	r2, [r3]
 1796 0006 0023     		movs	r3, #0
 1797 0008 9A42     		cmp	r2, r3
 1798 000a 01DC     		bgt	.L188
 530:Src/micromod.c **** 		string[ 0 ] = 0;
 1799              		.loc 1 530 0
 1800 000c 0B70     		strb	r3, [r1]
 1801              	.LVL197:
ARM GAS  /tmp/ccuyegJO.s 			page 45


 1802              	.L187:
 531:Src/micromod.c **** 		return;
 532:Src/micromod.c **** 	}
 533:Src/micromod.c **** 	offset = 0;
 534:Src/micromod.c **** 	length = 20;
 535:Src/micromod.c **** 	if( instrument > 0 && instrument < 32 ) {
 536:Src/micromod.c **** 		offset = ( instrument - 1 ) * 30 + 20;
 537:Src/micromod.c **** 		length = 22;
 538:Src/micromod.c **** 	}
 539:Src/micromod.c **** 	for( index = 0; index < length; index++ ) {
 540:Src/micromod.c **** 		character = module_data[ offset + index ];
 541:Src/micromod.c **** 		if( character < 32 || character > 126 ) character = ' ';
 542:Src/micromod.c **** 		string[ index ] = character;
 543:Src/micromod.c **** 	}
 544:Src/micromod.c **** 	string[ length ] = 0;
 545:Src/micromod.c **** }
 1803              		.loc 1 545 0
 1804              		@ sp needed
 1805 000e 70BD     		pop	{r4, r5, r6, pc}
 1806              	.LVL198:
 1807              	.L188:
 535:Src/micromod.c **** 		offset = ( instrument - 1 ) * 30 + 20;
 1808              		.loc 1 535 0
 1809 0010 421E     		subs	r2, r0, #1
 1810 0012 1E2A     		cmp	r2, #30
 1811 0014 15D8     		bhi	.L193
 536:Src/micromod.c **** 		length = 22;
 1812              		.loc 1 536 0
 1813 0016 1E20     		movs	r0, #30
 1814              	.LVL199:
 1815 0018 5043     		muls	r0, r2
 537:Src/micromod.c **** 	}
 1816              		.loc 1 537 0
 1817 001a 1622     		movs	r2, #22
 1818              	.LVL200:
 536:Src/micromod.c **** 		length = 22;
 1819              		.loc 1 536 0
 1820 001c 1430     		adds	r0, r0, #20
 1821              	.LVL201:
 1822              	.L190:
 540:Src/micromod.c **** 		if( character < 32 || character > 126 ) character = ' ';
 1823              		.loc 1 540 0
 1824 001e 0B4B     		ldr	r3, .L195+4
 541:Src/micromod.c **** 		string[ index ] = character;
 1825              		.loc 1 541 0
 1826 0020 2025     		movs	r5, #32
 540:Src/micromod.c **** 		if( character < 32 || character > 126 ) character = ' ';
 1827              		.loc 1 540 0
 1828 0022 1C68     		ldr	r4, [r3]
 539:Src/micromod.c **** 		character = module_data[ offset + index ];
 1829              		.loc 1 539 0
 1830 0024 0023     		movs	r3, #0
 540:Src/micromod.c **** 		if( character < 32 || character > 126 ) character = ' ';
 1831              		.loc 1 540 0
 1832 0026 2018     		adds	r0, r4, r0
 1833              	.LVL202:
 1834              	.L192:
ARM GAS  /tmp/ccuyegJO.s 			page 46


 1835 0028 C456     		ldrsb	r4, [r0, r3]
 1836              	.LVL203:
 541:Src/micromod.c **** 		string[ index ] = character;
 1837              		.loc 1 541 0
 1838 002a 2600     		movs	r6, r4
 1839 002c 203E     		subs	r6, r6, #32
 1840 002e 5E2E     		cmp	r6, #94
 1841 0030 00D9     		bls	.L191
 1842 0032 2C00     		movs	r4, r5
 1843              	.LVL204:
 1844              	.L191:
 542:Src/micromod.c **** 	}
 1845              		.loc 1 542 0 discriminator 2
 1846 0034 CC54     		strb	r4, [r1, r3]
 539:Src/micromod.c **** 		character = module_data[ offset + index ];
 1847              		.loc 1 539 0 discriminator 2
 1848 0036 0133     		adds	r3, r3, #1
 1849              	.LVL205:
 1850 0038 9A42     		cmp	r2, r3
 1851 003a F5D1     		bne	.L192
 544:Src/micromod.c **** }
 1852              		.loc 1 544 0
 1853 003c 0023     		movs	r3, #0
 1854              	.LVL206:
 1855 003e 8B54     		strb	r3, [r1, r2]
 1856 0040 E5E7     		b	.L187
 1857              	.LVL207:
 1858              	.L193:
 534:Src/micromod.c **** 	if( instrument > 0 && instrument < 32 ) {
 1859              		.loc 1 534 0
 1860 0042 1422     		movs	r2, #20
 533:Src/micromod.c **** 	length = 20;
 1861              		.loc 1 533 0
 1862 0044 1800     		movs	r0, r3
 1863              	.LVL208:
 1864 0046 EAE7     		b	.L190
 1865              	.L196:
 1866              		.align	2
 1867              	.L195:
 1868 0048 00000000 		.word	.LANCHOR15
 1869 004c 00000000 		.word	.LANCHOR22
 1870              		.cfi_endproc
 1871              	.LFE18:
 1873              		.section	.text.micromod_set_position,"ax",%progbits
 1874              		.align	1
 1875              		.global	micromod_set_position
 1876              		.syntax unified
 1877              		.code	16
 1878              		.thumb_func
 1879              		.fpu softvfp
 1881              	micromod_set_position:
 1882              	.LFB20:
 546:Src/micromod.c **** 
 547:Src/micromod.c **** /*
 548:Src/micromod.c **** 	Returns the total song duration in samples at the current sampling rate.
 549:Src/micromod.c **** */
 550:Src/micromod.c **** long micromod_calculate_song_duration() {
ARM GAS  /tmp/ccuyegJO.s 			page 47


 551:Src/micromod.c **** 	long duration, song_end;
 552:Src/micromod.c **** 	duration = 0;
 553:Src/micromod.c **** 	if( num_channels > 0 ) {
 554:Src/micromod.c **** 		micromod_set_position( 0 );
 555:Src/micromod.c **** 		song_end = 0;
 556:Src/micromod.c **** 		while( !song_end ) {
 557:Src/micromod.c **** 			duration += tick_len;
 558:Src/micromod.c **** 			song_end = sequence_tick();
 559:Src/micromod.c **** 		}
 560:Src/micromod.c **** 		micromod_set_position( 0 );
 561:Src/micromod.c **** 	}
 562:Src/micromod.c **** 	return duration;
 563:Src/micromod.c **** }
 564:Src/micromod.c **** 
 565:Src/micromod.c **** /*
 566:Src/micromod.c **** 	Jump directly to a specific pattern in the sequence.
 567:Src/micromod.c **** */
 568:Src/micromod.c **** void micromod_set_position( long pos ) {
 1883              		.loc 1 568 0
 1884              		.cfi_startproc
 1885              	.LVL209:
 1886 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1887              	.LCFI9:
 1888              		.cfi_def_cfa_offset 24
 1889              		.cfi_offset 3, -24
 1890              		.cfi_offset 4, -20
 1891              		.cfi_offset 5, -16
 1892              		.cfi_offset 6, -12
 1893              		.cfi_offset 7, -8
 1894              		.cfi_offset 14, -4
 569:Src/micromod.c **** 	long chan_idx;
 570:Src/micromod.c **** 	struct channel *chan;
 571:Src/micromod.c **** 	if( num_channels <= 0 ) return;
 1895              		.loc 1 571 0
 1896 0002 224B     		ldr	r3, .L206
 1897 0004 1D68     		ldr	r5, [r3]
 1898 0006 002D     		cmp	r5, #0
 1899 0008 3CDD     		ble	.L197
 572:Src/micromod.c **** 	if( pos >= song_length ) pos = 0;
 1900              		.loc 1 572 0
 1901 000a 214B     		ldr	r3, .L206+4
 1902 000c 1B68     		ldr	r3, [r3]
 1903 000e 8342     		cmp	r3, r0
 1904 0010 00DC     		bgt	.L199
 1905 0012 0020     		movs	r0, #0
 1906              	.LVL210:
 1907              	.L199:
 573:Src/micromod.c **** 	break_pattern = pos;
 574:Src/micromod.c **** 	next_row = 0;
 1908              		.loc 1 574 0
 1909 0014 0024     		movs	r4, #0
 575:Src/micromod.c **** 	tick = 1;
 1910              		.loc 1 575 0
 1911 0016 0122     		movs	r2, #1
 573:Src/micromod.c **** 	break_pattern = pos;
 1912              		.loc 1 573 0
 1913 0018 1E4B     		ldr	r3, .L206+8
ARM GAS  /tmp/ccuyegJO.s 			page 48


 1914              	.LBB52:
 1915              	.LBB53:
  96:Src/micromod.c **** }
 1916              		.loc 1 96 0
 1917 001a 7D21     		movs	r1, #125
 1918              	.LBE53:
 1919              	.LBE52:
 573:Src/micromod.c **** 	break_pattern = pos;
 1920              		.loc 1 573 0
 1921 001c 1860     		str	r0, [r3]
 574:Src/micromod.c **** 	tick = 1;
 1922              		.loc 1 574 0
 1923 001e 1E4B     		ldr	r3, .L206+12
 1924              	.LBB56:
 1925              	.LBB57:
 576:Src/micromod.c **** 	speed = 6;
 577:Src/micromod.c **** 	set_tempo( 125 );
 578:Src/micromod.c **** 	pl_count = pl_channel = -1;
 579:Src/micromod.c **** 	random_seed = 0xABCDEF;
 580:Src/micromod.c **** 	for( chan_idx = 0; chan_idx < num_channels; chan_idx++ ) {
 581:Src/micromod.c **** 		chan = &channels[ chan_idx ];
 582:Src/micromod.c **** 		chan->id = chan_idx;
 583:Src/micromod.c **** 		chan->instrument = chan->assigned = 0;
 584:Src/micromod.c **** 		chan->volume = 0;
 585:Src/micromod.c **** 		switch( chan_idx & 0x3 ) {
 586:Src/micromod.c **** 			case 0: case 3: chan->panning =  51; break;
 587:Src/micromod.c **** 			case 1: case 2: chan->panning = 204; break;
 1926              		.loc 1 587 0
 1927 0020 CC26     		movs	r6, #204
 1928              	.LBE57:
 1929              	.LBE56:
 574:Src/micromod.c **** 	tick = 1;
 1930              		.loc 1 574 0
 1931 0022 1C60     		str	r4, [r3]
 575:Src/micromod.c **** 	speed = 6;
 1932              		.loc 1 575 0
 1933 0024 1D4B     		ldr	r3, .L206+16
 1934              	.LBB62:
 1935              	.LBB58:
 586:Src/micromod.c **** 			case 1: case 2: chan->panning = 204; break;
 1936              		.loc 1 586 0
 1937 0026 3327     		movs	r7, #51
 1938              	.LBE58:
 1939              	.LBE62:
 575:Src/micromod.c **** 	speed = 6;
 1940              		.loc 1 575 0
 1941 0028 1A60     		str	r2, [r3]
 576:Src/micromod.c **** 	speed = 6;
 1942              		.loc 1 576 0
 1943 002a 1D4B     		ldr	r3, .L206+20
 1944 002c 0532     		adds	r2, r2, #5
 1945 002e 1A60     		str	r2, [r3]
 1946              	.LVL211:
 1947              	.LBB63:
 1948              	.LBB54:
  96:Src/micromod.c **** }
 1949              		.loc 1 96 0
ARM GAS  /tmp/ccuyegJO.s 			page 49


 1950 0030 1C4B     		ldr	r3, .L206+24
 1951 0032 1B68     		ldr	r3, [r3]
 1952 0034 5800     		lsls	r0, r3, #1
 1953 0036 5B10     		asrs	r3, r3, #1
 1954 0038 C018     		adds	r0, r0, r3
 1955 003a FFF7FEFF 		bl	__aeabi_idiv
 1956              	.LVL212:
 1957 003e 1A4B     		ldr	r3, .L206+28
 1958              	.LBE54:
 1959              	.LBE63:
 578:Src/micromod.c **** 	random_seed = 0xABCDEF;
 1960              		.loc 1 578 0
 1961 0040 1A4A     		ldr	r2, .L206+32
 1962              	.LBB64:
 1963              	.LBB55:
  96:Src/micromod.c **** }
 1964              		.loc 1 96 0
 1965 0042 1860     		str	r0, [r3]
 1966              	.LVL213:
 1967              	.LBE55:
 1968              	.LBE64:
 578:Src/micromod.c **** 	random_seed = 0xABCDEF;
 1969              		.loc 1 578 0
 1970 0044 0123     		movs	r3, #1
 1971 0046 5B42     		rsbs	r3, r3, #0
 1972 0048 1360     		str	r3, [r2]
 1973 004a 194A     		ldr	r2, .L206+36
 1974              	.LBB65:
 1975              	.LBB59:
 583:Src/micromod.c **** 		chan->volume = 0;
 1976              		.loc 1 583 0
 1977 004c 2100     		movs	r1, r4
 1978              	.LBE59:
 1979              	.LBE65:
 578:Src/micromod.c **** 	random_seed = 0xABCDEF;
 1980              		.loc 1 578 0
 1981 004e 1360     		str	r3, [r2]
 579:Src/micromod.c **** 	for( chan_idx = 0; chan_idx < num_channels; chan_idx++ ) {
 1982              		.loc 1 579 0
 1983 0050 184A     		ldr	r2, .L206+40
 1984 0052 194B     		ldr	r3, .L206+44
 1985 0054 1A60     		str	r2, [r3]
 1986              	.LVL214:
 1987 0056 194B     		ldr	r3, .L206+48
 1988              	.LBB66:
 1989              	.LBB60:
 580:Src/micromod.c **** 		chan = &channels[ chan_idx ];
 1990              		.loc 1 580 0
 1991 0058 2200     		movs	r2, r4
 1992 005a 1833     		adds	r3, r3, #24
 585:Src/micromod.c **** 			case 0: case 3: chan->panning =  51; break;
 1993              		.loc 1 585 0
 1994 005c 0334     		adds	r4, r4, #3
 1995              	.LVL215:
 1996              	.L203:
 1997 005e 1000     		movs	r0, r2
 1998 0060 2040     		ands	r0, r4
ARM GAS  /tmp/ccuyegJO.s 			page 50


 1999 0062 0138     		subs	r0, r0, #1
 582:Src/micromod.c **** 		chan->instrument = chan->assigned = 0;
 2000              		.loc 1 582 0
 2001 0064 1A71     		strb	r2, [r3, #4]
 583:Src/micromod.c **** 		chan->volume = 0;
 2002              		.loc 1 583 0
 2003 0066 9971     		strb	r1, [r3, #6]
 2004 0068 5971     		strb	r1, [r3, #5]
 584:Src/micromod.c **** 		switch( chan_idx & 0x3 ) {
 2005              		.loc 1 584 0
 2006 006a 1970     		strb	r1, [r3]
 585:Src/micromod.c **** 			case 0: case 3: chan->panning =  51; break;
 2007              		.loc 1 585 0
 2008 006c 0128     		cmp	r0, #1
 2009 006e 0AD9     		bls	.L205
 586:Src/micromod.c **** 			case 1: case 2: chan->panning = 204; break;
 2010              		.loc 1 586 0
 2011 0070 5F70     		strb	r7, [r3, #1]
 2012              	.L202:
 580:Src/micromod.c **** 		chan = &channels[ chan_idx ];
 2013              		.loc 1 580 0
 2014 0072 0132     		adds	r2, r2, #1
 2015              	.LVL216:
 2016 0074 3033     		adds	r3, r3, #48
 2017 0076 9542     		cmp	r5, r2
 2018 0078 F1D1     		bne	.L203
 588:Src/micromod.c **** 		}
 589:Src/micromod.c **** 	}
 590:Src/micromod.c **** 	sequence_tick();
 2019              		.loc 1 590 0
 2020 007a FFF7FEFF 		bl	sequence_tick
 2021              	.LVL217:
 591:Src/micromod.c **** 	tick_offset = 0;
 2022              		.loc 1 591 0
 2023 007e 0022     		movs	r2, #0
 2024 0080 0F4B     		ldr	r3, .L206+52
 2025 0082 1A60     		str	r2, [r3]
 2026              	.LVL218:
 2027              	.L197:
 2028              	.LBE60:
 2029              	.LBE66:
 592:Src/micromod.c **** }
 2030              		.loc 1 592 0
 2031              		@ sp needed
 2032 0084 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2033              	.LVL219:
 2034              	.L205:
 2035              	.LBB67:
 2036              	.LBB61:
 587:Src/micromod.c **** 		}
 2037              		.loc 1 587 0
 2038 0086 5E70     		strb	r6, [r3, #1]
 2039 0088 F3E7     		b	.L202
 2040              	.L207:
 2041 008a C046     		.align	2
 2042              	.L206:
 2043 008c 00000000 		.word	.LANCHOR15
ARM GAS  /tmp/ccuyegJO.s 			page 51


 2044 0090 00000000 		.word	.LANCHOR12
 2045 0094 00000000 		.word	.LANCHOR11
 2046 0098 00000000 		.word	.LANCHOR13
 2047 009c 00000000 		.word	.LANCHOR8
 2048 00a0 00000000 		.word	.LANCHOR10
 2049 00a4 00000000 		.word	.LANCHOR2
 2050 00a8 00000000 		.word	.LANCHOR20
 2051 00ac 00000000 		.word	.LANCHOR21
 2052 00b0 00000000 		.word	.LANCHOR19
 2053 00b4 EFCDAB00 		.word	11259375
 2054 00b8 00000000 		.word	.LANCHOR7
 2055 00bc 00000000 		.word	.LANCHOR9
 2056 00c0 00000000 		.word	.LANCHOR23
 2057              	.LBE61:
 2058              	.LBE67:
 2059              		.cfi_endproc
 2060              	.LFE20:
 2062              		.section	.text.micromod_initialise,"ax",%progbits
 2063              		.align	1
 2064              		.global	micromod_initialise
 2065              		.syntax unified
 2066              		.code	16
 2067              		.thumb_func
 2068              		.fpu softvfp
 2070              	micromod_initialise:
 2071              	.LFB17:
 476:Src/micromod.c **** 	struct instrument *inst;
 2072              		.loc 1 476 0
 2073              		.cfi_startproc
 2074              	.LVL220:
 2075 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2076              	.LCFI10:
 2077              		.cfi_def_cfa_offset 20
 2078              		.cfi_offset 4, -20
 2079              		.cfi_offset 5, -16
 2080              		.cfi_offset 6, -12
 2081              		.cfi_offset 7, -8
 2082              		.cfi_offset 14, -4
 2083 0002 85B0     		sub	sp, sp, #20
 2084              	.LCFI11:
 2085              		.cfi_def_cfa_offset 40
 476:Src/micromod.c **** 	struct instrument *inst;
 2086              		.loc 1 476 0
 2087 0004 0400     		movs	r4, r0
 2088 0006 0D00     		movs	r5, r1
 480:Src/micromod.c **** 	if( num_channels <= 0 ) {
 2089              		.loc 1 480 0
 2090 0008 FFF7FEFF 		bl	calculate_num_channels
 2091              	.LVL221:
 2092 000c 414B     		ldr	r3, .L222
 2093 000e 0090     		str	r0, [sp]
 2094 0010 1860     		str	r0, [r3]
 481:Src/micromod.c **** 		num_channels = 0;
 2095              		.loc 1 481 0
 2096 0012 0028     		cmp	r0, #0
 2097 0014 04DC     		bgt	.L209
 482:Src/micromod.c **** 		return -1;
ARM GAS  /tmp/ccuyegJO.s 			page 52


 2098              		.loc 1 482 0
 2099 0016 0022     		movs	r2, #0
 483:Src/micromod.c **** 	}
 2100              		.loc 1 483 0
 2101 0018 0120     		movs	r0, #1
 482:Src/micromod.c **** 		return -1;
 2102              		.loc 1 482 0
 2103 001a 1A60     		str	r2, [r3]
 2104              	.L221:
 485:Src/micromod.c **** 	module_data = data;
 2105              		.loc 1 485 0
 2106 001c 4042     		rsbs	r0, r0, #0
 2107 001e 72E0     		b	.L208
 2108              	.L209:
 2109 0020 3D4B     		ldr	r3, .L222+4
 2110 0022 9D42     		cmp	r5, r3
 2111 0024 00DC     		bgt	.LCB2093
 2112 0026 72E0     		b	.L217	@long jump
 2113              	.LCB2093:
 488:Src/micromod.c **** 	restart = module_data[ 951 ] & 0x7F;
 2114              		.loc 1 488 0
 2115 0028 7F26     		movs	r6, #127
 486:Src/micromod.c **** 	sample_rate = sampling_rate;
 2116              		.loc 1 486 0
 2117 002a 3C4B     		ldr	r3, .L222+8
 488:Src/micromod.c **** 	restart = module_data[ 951 ] & 0x7F;
 2118              		.loc 1 488 0
 2119 002c 3C4A     		ldr	r2, .L222+12
 486:Src/micromod.c **** 	sample_rate = sampling_rate;
 2120              		.loc 1 486 0
 2121 002e 1C60     		str	r4, [r3]
 487:Src/micromod.c **** 	song_length = module_data[ 950 ] & 0x7F;
 2122              		.loc 1 487 0
 2123 0030 3C4B     		ldr	r3, .L222+16
 493:Src/micromod.c **** 	sample_data_offset = 1084 + num_patterns * 64 * num_channels * 4;
 2124              		.loc 1 493 0
 2125 0032 2000     		movs	r0, r4
 487:Src/micromod.c **** 	song_length = module_data[ 950 ] & 0x7F;
 2126              		.loc 1 487 0
 2127 0034 1D60     		str	r5, [r3]
 488:Src/micromod.c **** 	restart = module_data[ 951 ] & 0x7F;
 2128              		.loc 1 488 0
 2129 0036 3C4B     		ldr	r3, .L222+20
 494:Src/micromod.c **** 	for( inst_idx = 1; inst_idx < 32; inst_idx++ ) {
 2130              		.loc 1 494 0
 2131 0038 2A27     		movs	r7, #42
 488:Src/micromod.c **** 	restart = module_data[ 951 ] & 0x7F;
 2132              		.loc 1 488 0
 2133 003a E35C     		ldrb	r3, [r4, r3]
 2134 003c 3340     		ands	r3, r6
 2135 003e 1360     		str	r3, [r2]
 491:Src/micromod.c **** 	pattern_data = (unsigned char *) module_data + 1084;
 2136              		.loc 1 491 0
 2137 0040 EE23     		movs	r3, #238
 2138 0042 3A4A     		ldr	r2, .L222+24
 2139 0044 9B00     		lsls	r3, r3, #2
 2140 0046 E318     		adds	r3, r4, r3
ARM GAS  /tmp/ccuyegJO.s 			page 53


 2141 0048 1360     		str	r3, [r2]
 492:Src/micromod.c **** 	num_patterns = calculate_num_patterns( module_data );
 2142              		.loc 1 492 0
 2143 004a 394B     		ldr	r3, .L222+28
 2144 004c 394A     		ldr	r2, .L222+32
 2145 004e E318     		adds	r3, r4, r3
 2146 0050 1360     		str	r3, [r2]
 493:Src/micromod.c **** 	sample_data_offset = 1084 + num_patterns * 64 * num_channels * 4;
 2147              		.loc 1 493 0
 2148 0052 FFF7FEFF 		bl	calculate_num_patterns
 2149              	.LVL222:
 494:Src/micromod.c **** 	for( inst_idx = 1; inst_idx < 32; inst_idx++ ) {
 2150              		.loc 1 494 0
 2151 0056 009B     		ldr	r3, [sp]
 2152 0058 0002     		lsls	r0, r0, #8
 2153 005a 5843     		muls	r0, r3
 2154 005c 344B     		ldr	r3, .L222+28
 2155 005e 364D     		ldr	r5, .L222+36
 2156              	.LVL223:
 2157 0060 C318     		adds	r3, r0, r3
 2158 0062 0293     		str	r3, [sp, #8]
 2159              	.LVL224:
 2160 0064 1035     		adds	r5, r5, #16
 500:Src/micromod.c **** 		inst->volume = volume > 64 ? 64 : volume;
 2161              		.loc 1 500 0
 2162 0066 0396     		str	r6, [sp, #12]
 2163              	.LVL225:
 2164              	.L214:
 497:Src/micromod.c **** 		fine_tune = module_data[ inst_idx * 30 + 14 ] & 0xF;
 2165              		.loc 1 497 0
 2166 0068 3900     		movs	r1, r7
 2167 006a 2000     		movs	r0, r4
 2168 006c FFF7FEFF 		bl	unsigned_short_big_endian
 2169              	.LVL226:
 499:Src/micromod.c **** 		volume = module_data[ inst_idx * 30 + 15 ] & 0x7F;
 2170              		.loc 1 499 0
 2171 0070 0722     		movs	r2, #7
 497:Src/micromod.c **** 		fine_tune = module_data[ inst_idx * 30 + 14 ] & 0xF;
 2172              		.loc 1 497 0
 2173 0072 4300     		lsls	r3, r0, #1
 499:Src/micromod.c **** 		volume = module_data[ inst_idx * 30 + 15 ] & 0x7F;
 2174              		.loc 1 499 0
 2175 0074 0820     		movs	r0, #8
 2176 0076 E119     		adds	r1, r4, r7
 497:Src/micromod.c **** 		fine_tune = module_data[ inst_idx * 30 + 14 ] & 0xF;
 2177              		.loc 1 497 0
 2178 0078 0193     		str	r3, [sp, #4]
 2179              	.LVL227:
 498:Src/micromod.c **** 		inst->fine_tune = ( fine_tune & 0x7 ) - ( fine_tune & 0x8 ) + 8;
 2180              		.loc 1 498 0
 2181 007a 8B78     		ldrb	r3, [r1, #2]
 2182              	.LVL228:
 499:Src/micromod.c **** 		volume = module_data[ inst_idx * 30 + 15 ] & 0x7F;
 2183              		.loc 1 499 0
 2184 007c 1A40     		ands	r2, r3
 2185 007e 0832     		adds	r2, r2, #8
 2186 0080 0340     		ands	r3, r0
ARM GAS  /tmp/ccuyegJO.s 			page 54


 2187              	.LVL229:
 2188 0082 D31A     		subs	r3, r2, r3
 2189 0084 6B70     		strb	r3, [r5, #1]
 2190              	.LVL230:
 500:Src/micromod.c **** 		inst->volume = volume > 64 ? 64 : volume;
 2191              		.loc 1 500 0
 2192 0086 CB78     		ldrb	r3, [r1, #3]
 2193 0088 039A     		ldr	r2, [sp, #12]
 2194 008a 1340     		ands	r3, r2
 501:Src/micromod.c **** 		loop_start = unsigned_short_big_endian( module_data, inst_idx * 30 + 16 ) * 2;
 2195              		.loc 1 501 0
 2196 008c 402B     		cmp	r3, #64
 2197 008e 00DD     		ble	.L211
 2198 0090 4023     		movs	r3, #64
 2199              	.L211:
 2200 0092 2B70     		strb	r3, [r5]
 2201              	.LVL231:
 502:Src/micromod.c **** 		loop_length = unsigned_short_big_endian( module_data, inst_idx * 30 + 18 ) * 2;
 2202              		.loc 1 502 0
 2203 0094 391D     		adds	r1, r7, #4
 2204 0096 2000     		movs	r0, r4
 2205 0098 FFF7FEFF 		bl	unsigned_short_big_endian
 2206              	.LVL232:
 503:Src/micromod.c **** 		if( loop_start + loop_length > sample_length )
 2207              		.loc 1 503 0
 2208 009c B91D     		adds	r1, r7, #6
 502:Src/micromod.c **** 		loop_length = unsigned_short_big_endian( module_data, inst_idx * 30 + 18 ) * 2;
 2209              		.loc 1 502 0
 2210 009e 4600     		lsls	r6, r0, #1
 2211              	.LVL233:
 503:Src/micromod.c **** 		if( loop_start + loop_length > sample_length )
 2212              		.loc 1 503 0
 2213 00a0 2000     		movs	r0, r4
 2214 00a2 FFF7FEFF 		bl	unsigned_short_big_endian
 2215              	.LVL234:
 504:Src/micromod.c **** 			loop_length = sample_length - loop_start;
 2216              		.loc 1 504 0
 2217 00a6 019A     		ldr	r2, [sp, #4]
 503:Src/micromod.c **** 		if( loop_start + loop_length > sample_length )
 2218              		.loc 1 503 0
 2219 00a8 4000     		lsls	r0, r0, #1
 2220              	.LVL235:
 504:Src/micromod.c **** 			loop_length = sample_length - loop_start;
 2221              		.loc 1 504 0
 2222 00aa 3318     		adds	r3, r6, r0
 2223 00ac 9A42     		cmp	r2, r3
 2224 00ae 00DA     		bge	.L212
 505:Src/micromod.c **** 		if( loop_length < 4 ) {
 2225              		.loc 1 505 0
 2226 00b0 901B     		subs	r0, r2, r6
 2227              	.LVL236:
 2228              	.L212:
 506:Src/micromod.c **** 			loop_start = sample_length;
 2229              		.loc 1 506 0
 2230 00b2 0328     		cmp	r0, #3
 2231 00b4 01DC     		bgt	.L213
 508:Src/micromod.c **** 		}
ARM GAS  /tmp/ccuyegJO.s 			page 55


 2232              		.loc 1 508 0
 2233 00b6 0020     		movs	r0, #0
 2234              	.LVL237:
 497:Src/micromod.c **** 		fine_tune = module_data[ inst_idx * 30 + 14 ] & 0xF;
 2235              		.loc 1 497 0
 2236 00b8 019E     		ldr	r6, [sp, #4]
 2237              	.LVL238:
 2238              	.L213:
 513:Src/micromod.c **** 	}
 2239              		.loc 1 513 0 discriminator 2
 2240 00ba 029A     		ldr	r2, [sp, #8]
 512:Src/micromod.c **** 		sample_data_offset += sample_length;
 2241              		.loc 1 512 0 discriminator 2
 2242 00bc 029B     		ldr	r3, [sp, #8]
 513:Src/micromod.c **** 	}
 2243              		.loc 1 513 0 discriminator 2
 2244 00be 9446     		mov	ip, r2
 512:Src/micromod.c **** 		sample_data_offset += sample_length;
 2245              		.loc 1 512 0 discriminator 2
 2246 00c0 E318     		adds	r3, r4, r3
 2247 00c2 EB60     		str	r3, [r5, #12]
 513:Src/micromod.c **** 	}
 2248              		.loc 1 513 0 discriminator 2
 2249 00c4 019B     		ldr	r3, [sp, #4]
 510:Src/micromod.c **** 		inst->loop_length = loop_length << FP_SHIFT;
 2250              		.loc 1 510 0 discriminator 2
 2251 00c6 B603     		lsls	r6, r6, #14
 2252              	.LVL239:
 513:Src/micromod.c **** 	}
 2253              		.loc 1 513 0 discriminator 2
 2254 00c8 6344     		add	r3, r3, ip
 2255 00ca 0293     		str	r3, [sp, #8]
 2256              	.LVL240:
 495:Src/micromod.c **** 		inst = &instruments[ inst_idx ];
 2257              		.loc 1 495 0 discriminator 2
 2258 00cc F323     		movs	r3, #243
 2259              	.LVL241:
 511:Src/micromod.c **** 		inst->sample_data = module_data + sample_data_offset;
 2260              		.loc 1 511 0 discriminator 2
 2261 00ce 8003     		lsls	r0, r0, #14
 2262              	.LVL242:
 2263 00d0 1E37     		adds	r7, r7, #30
 510:Src/micromod.c **** 		inst->loop_length = loop_length << FP_SHIFT;
 2264              		.loc 1 510 0 discriminator 2
 2265 00d2 6E60     		str	r6, [r5, #4]
 511:Src/micromod.c **** 		inst->sample_data = module_data + sample_data_offset;
 2266              		.loc 1 511 0 discriminator 2
 2267 00d4 A860     		str	r0, [r5, #8]
 495:Src/micromod.c **** 		inst = &instruments[ inst_idx ];
 2268              		.loc 1 495 0 discriminator 2
 2269 00d6 9B00     		lsls	r3, r3, #2
 2270 00d8 1035     		adds	r5, r5, #16
 2271 00da 9F42     		cmp	r7, r3
 2272 00dc C4D1     		bne	.L214
 515:Src/micromod.c **** 	gain = ( num_channels > 4 ) ? 1 : 2;
 2273              		.loc 1 515 0
 2274 00de 009B     		ldr	r3, [sp]
ARM GAS  /tmp/ccuyegJO.s 			page 56


 2275 00e0 042B     		cmp	r3, #4
 2276 00e2 12DC     		bgt	.L218
 2277 00e4 154B     		ldr	r3, .L222+40
 2278              	.L215:
 515:Src/micromod.c **** 	gain = ( num_channels > 4 ) ? 1 : 2;
 2279              		.loc 1 515 0 is_stmt 0 discriminator 4
 2280 00e6 164A     		ldr	r2, .L222+44
 516:Src/micromod.c **** 	micromod_set_position( 0 );
 2281              		.loc 1 516 0 is_stmt 1 discriminator 4
 2282 00e8 0024     		movs	r4, #0
 2283              	.LVL243:
 515:Src/micromod.c **** 	gain = ( num_channels > 4 ) ? 1 : 2;
 2284              		.loc 1 515 0 discriminator 4
 2285 00ea 1360     		str	r3, [r2]
 516:Src/micromod.c **** 	micromod_set_position( 0 );
 2286              		.loc 1 516 0 discriminator 4
 2287 00ec 0422     		movs	r2, #4
 2288 00ee 009B     		ldr	r3, [sp]
 2289 00f0 0099     		ldr	r1, [sp]
 2290 00f2 DB0F     		lsrs	r3, r3, #31
 2291 00f4 8A42     		cmp	r2, r1
 2292 00f6 6341     		adcs	r3, r3, r4
 2293 00f8 124A     		ldr	r2, .L222+48
 2294 00fa 0133     		adds	r3, r3, #1
 517:Src/micromod.c **** 	return 0;
 2295              		.loc 1 517 0 discriminator 4
 2296 00fc 2000     		movs	r0, r4
 516:Src/micromod.c **** 	micromod_set_position( 0 );
 2297              		.loc 1 516 0 discriminator 4
 2298 00fe 1360     		str	r3, [r2]
 517:Src/micromod.c **** 	return 0;
 2299              		.loc 1 517 0 discriminator 4
 2300 0100 FFF7FEFF 		bl	micromod_set_position
 2301              	.LVL244:
 518:Src/micromod.c **** }
 2302              		.loc 1 518 0 discriminator 4
 2303 0104 2000     		movs	r0, r4
 2304              	.LVL245:
 2305              	.L208:
 519:Src/micromod.c **** 
 2306              		.loc 1 519 0
 2307 0106 05B0     		add	sp, sp, #20
 2308              		@ sp needed
 2309 0108 F0BD     		pop	{r4, r5, r6, r7, pc}
 2310              	.LVL246:
 2311              	.L218:
 515:Src/micromod.c **** 	gain = ( num_channels > 4 ) ? 1 : 2;
 2312              		.loc 1 515 0
 2313 010a 0F4B     		ldr	r3, .L222+52
 2314 010c EBE7     		b	.L215
 2315              	.LVL247:
 2316              	.L217:
 485:Src/micromod.c **** 	module_data = data;
 2317              		.loc 1 485 0
 2318 010e 0220     		movs	r0, #2
 2319 0110 84E7     		b	.L221
 2320              	.L223:
ARM GAS  /tmp/ccuyegJO.s 			page 57


 2321 0112 C046     		.align	2
 2322              	.L222:
 2323 0114 00000000 		.word	.LANCHOR15
 2324 0118 3F1F0000 		.word	7999
 2325 011c 00000000 		.word	.LANCHOR22
 2326 0120 00000000 		.word	.LANCHOR12
 2327 0124 00000000 		.word	.LANCHOR2
 2328 0128 B6030000 		.word	950
 2329 012c 00000000 		.word	.LANCHOR17
 2330 0130 3C040000 		.word	1084
 2331 0134 00000000 		.word	.LANCHOR18
 2332 0138 00000000 		.word	.LANCHOR4
 2333 013c 5F200000 		.word	8287
 2334 0140 00000000 		.word	.LANCHOR1
 2335 0144 00000000 		.word	.LANCHOR3
 2336 0148 AB200000 		.word	8363
 2337              		.cfi_endproc
 2338              	.LFE17:
 2340              		.section	.text.micromod_calculate_song_duration,"ax",%progbits
 2341              		.align	1
 2342              		.global	micromod_calculate_song_duration
 2343              		.syntax unified
 2344              		.code	16
 2345              		.thumb_func
 2346              		.fpu softvfp
 2348              	micromod_calculate_song_duration:
 2349              	.LFB19:
 550:Src/micromod.c **** 	long duration, song_end;
 2350              		.loc 1 550 0
 2351              		.cfi_startproc
 2352              	.LVL248:
 2353 0000 10B5     		push	{r4, lr}
 2354              	.LCFI12:
 2355              		.cfi_def_cfa_offset 8
 2356              		.cfi_offset 4, -8
 2357              		.cfi_offset 14, -4
 552:Src/micromod.c **** 	if( num_channels > 0 ) {
 2358              		.loc 1 552 0
 2359 0002 0024     		movs	r4, #0
 553:Src/micromod.c **** 		micromod_set_position( 0 );
 2360              		.loc 1 553 0
 2361 0004 094B     		ldr	r3, .L230
 2362 0006 1B68     		ldr	r3, [r3]
 2363 0008 A342     		cmp	r3, r4
 2364 000a 0CDD     		ble	.L224
 554:Src/micromod.c **** 		song_end = 0;
 2365              		.loc 1 554 0
 2366 000c 2000     		movs	r0, r4
 2367 000e FFF7FEFF 		bl	micromod_set_position
 2368              	.LVL249:
 2369              	.L226:
 557:Src/micromod.c **** 			song_end = sequence_tick();
 2370              		.loc 1 557 0
 2371 0012 074B     		ldr	r3, .L230+4
 2372 0014 1B68     		ldr	r3, [r3]
 2373 0016 E418     		adds	r4, r4, r3
 2374              	.LVL250:
ARM GAS  /tmp/ccuyegJO.s 			page 58


 558:Src/micromod.c **** 		}
 2375              		.loc 1 558 0
 2376 0018 FFF7FEFF 		bl	sequence_tick
 2377              	.LVL251:
 556:Src/micromod.c **** 			duration += tick_len;
 2378              		.loc 1 556 0
 2379 001c 0028     		cmp	r0, #0
 2380 001e F8D0     		beq	.L226
 560:Src/micromod.c **** 	}
 2381              		.loc 1 560 0
 2382 0020 0020     		movs	r0, #0
 2383              	.LVL252:
 2384 0022 FFF7FEFF 		bl	micromod_set_position
 2385              	.LVL253:
 2386              	.L224:
 563:Src/micromod.c **** 
 2387              		.loc 1 563 0
 2388 0026 2000     		movs	r0, r4
 2389              		@ sp needed
 2390 0028 10BD     		pop	{r4, pc}
 2391              	.L231:
 2392 002a C046     		.align	2
 2393              	.L230:
 2394 002c 00000000 		.word	.LANCHOR15
 2395 0030 00000000 		.word	.LANCHOR20
 2396              		.cfi_endproc
 2397              	.LFE19:
 2399              		.section	.text.micromod_get_audio,"ax",%progbits
 2400              		.align	1
 2401              		.global	micromod_get_audio
 2402              		.syntax unified
 2403              		.code	16
 2404              		.thumb_func
 2405              		.fpu softvfp
 2407              	micromod_get_audio:
 2408              	.LFB21:
 593:Src/micromod.c **** 
 594:Src/micromod.c **** /*
 595:Src/micromod.c **** 	Calculate the specified number of samples of audio.
 596:Src/micromod.c **** 	If output pointer is zero, the replay will quickly skip count samples.
 597:Src/micromod.c **** 	The output buffer should be cleared with zeroes.
 598:Src/micromod.c **** */
 599:Src/micromod.c **** void micromod_get_audio( short *output_buffer, long count ) {
 2409              		.loc 1 599 0
 2410              		.cfi_startproc
 2411              	.LVL254:
 2412 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2413              	.LCFI13:
 2414              		.cfi_def_cfa_offset 20
 2415              		.cfi_offset 4, -20
 2416              		.cfi_offset 5, -16
 2417              		.cfi_offset 6, -12
 2418              		.cfi_offset 7, -8
 2419              		.cfi_offset 14, -4
 600:Src/micromod.c **** 	long offset, remain, chan_idx;
 601:Src/micromod.c **** 	if( num_channels <= 0 ) return;
 2420              		.loc 1 601 0
ARM GAS  /tmp/ccuyegJO.s 			page 59


 2421 0002 4D4B     		ldr	r3, .L253
 599:Src/micromod.c **** 	long offset, remain, chan_idx;
 2422              		.loc 1 599 0
 2423 0004 91B0     		sub	sp, sp, #68
 2424              	.LCFI14:
 2425              		.cfi_def_cfa_offset 88
 2426              		.loc 1 601 0
 2427 0006 1B68     		ldr	r3, [r3]
 599:Src/micromod.c **** 	long offset, remain, chan_idx;
 2428              		.loc 1 599 0
 2429 0008 0490     		str	r0, [sp, #16]
 2430 000a 0F00     		movs	r7, r1
 2431              		.loc 1 601 0
 2432 000c 0593     		str	r3, [sp, #20]
 2433 000e 002B     		cmp	r3, #0
 2434 0010 03DD     		ble	.L232
 2435 0012 0023     		movs	r3, #0
 2436 0014 0093     		str	r3, [sp]
 2437              	.LVL255:
 2438              	.L234:
 602:Src/micromod.c **** 	offset = 0;
 603:Src/micromod.c **** 	while( count > 0 ) {
 2439              		.loc 1 603 0
 2440 0016 002F     		cmp	r7, #0
 2441 0018 01DC     		bgt	.L247
 2442              	.LVL256:
 2443              	.L232:
 604:Src/micromod.c **** 		remain = tick_len - tick_offset;
 605:Src/micromod.c **** 		if( remain > count ) remain = count;
 606:Src/micromod.c **** 		for( chan_idx = 0; chan_idx < num_channels; chan_idx++ ) {
 607:Src/micromod.c **** 			resample( &channels[ chan_idx ], output_buffer, offset, remain );
 608:Src/micromod.c **** 		}
 609:Src/micromod.c **** 		tick_offset += remain;
 610:Src/micromod.c **** 		if( tick_offset == tick_len ) {
 611:Src/micromod.c **** 			sequence_tick();
 612:Src/micromod.c **** 			tick_offset = 0;
 613:Src/micromod.c **** 		}
 614:Src/micromod.c **** 		offset += remain;
 615:Src/micromod.c **** 		count -= remain;
 616:Src/micromod.c **** 	}
 617:Src/micromod.c **** }
 2444              		.loc 1 617 0
 2445 001a 11B0     		add	sp, sp, #68
 2446              		@ sp needed
 2447              	.LVL257:
 2448 001c F0BD     		pop	{r4, r5, r6, r7, pc}
 2449              	.LVL258:
 2450              	.L247:
 604:Src/micromod.c **** 		remain = tick_len - tick_offset;
 2451              		.loc 1 604 0
 2452 001e 474B     		ldr	r3, .L253+4
 2453 0020 0197     		str	r7, [sp, #4]
 2454 0022 1B68     		ldr	r3, [r3]
 2455 0024 0693     		str	r3, [sp, #24]
 2456 0026 464B     		ldr	r3, .L253+8
 2457 0028 1B68     		ldr	r3, [r3]
 2458 002a 0793     		str	r3, [sp, #28]
ARM GAS  /tmp/ccuyegJO.s 			page 60


 2459 002c 079A     		ldr	r2, [sp, #28]
 2460 002e 069B     		ldr	r3, [sp, #24]
 2461 0030 9B1A     		subs	r3, r3, r2
 2462              	.LVL259:
 2463 0032 9F42     		cmp	r7, r3
 2464 0034 00DD     		ble	.L235
 2465 0036 0193     		str	r3, [sp, #4]
 2466              	.L235:
 2467              	.LVL260:
 2468              	.LBB70:
 2469              	.LBB71:
 425:Src/micromod.c **** 	while( buf_idx < buf_end ) {
 2470              		.loc 1 425 0
 2471 0038 019A     		ldr	r2, [sp, #4]
 424:Src/micromod.c **** 	buf_end = ( offset + count ) << 1;
 2472              		.loc 1 424 0
 2473 003a 009B     		ldr	r3, [sp]
 425:Src/micromod.c **** 	while( buf_idx < buf_end ) {
 2474              		.loc 1 425 0
 2475 003c 9446     		mov	ip, r2
 424:Src/micromod.c **** 	buf_end = ( offset + count ) << 1;
 2476              		.loc 1 424 0
 2477 003e 5B00     		lsls	r3, r3, #1
 2478 0040 0F93     		str	r3, [sp, #60]
 425:Src/micromod.c **** 	while( buf_idx < buf_end ) {
 2479              		.loc 1 425 0
 2480 0042 009B     		ldr	r3, [sp]
 2481 0044 3F4A     		ldr	r2, .L253+12
 2482 0046 6344     		add	r3, r3, ip
 2483 0048 0093     		str	r3, [sp]
 2484              	.LVL261:
 2485 004a 5B00     		lsls	r3, r3, #1
 2486 004c 0993     		str	r3, [sp, #36]
 2487              	.LBE71:
 2488              	.LBE70:
 606:Src/micromod.c **** 			resample( &channels[ chan_idx ], output_buffer, offset, remain );
 2489              		.loc 1 606 0
 2490 004e 0023     		movs	r3, #0
 2491 0050 1032     		adds	r2, r2, #16
 2492 0052 0293     		str	r3, [sp, #8]
 2493              	.LVL262:
 2494              	.L245:
 2495              	.LBB74:
 2496              	.LBB72:
 415:Src/micromod.c **** 	ramp = ampl * chan->panning;
 2497              		.loc 1 415 0 discriminator 3
 2498 0054 049B     		ldr	r3, [sp, #16]
 2499 0056 9C46     		mov	ip, r3
 2500 0058 002B     		cmp	r3, #0
 2501 005a 01D0     		beq	.L236
 415:Src/micromod.c **** 	ramp = ampl * chan->panning;
 2502              		.loc 1 415 0 is_stmt 0
 2503 005c D37A     		ldrb	r3, [r2, #11]
 2504 005e 9C46     		mov	ip, r3
 2505              	.L236:
 2506              	.LVL263:
 416:Src/micromod.c **** 	lamp = ampl * ( 255 - chan->panning );
ARM GAS  /tmp/ccuyegJO.s 			page 61


 2507              		.loc 1 416 0 is_stmt 1
 2508 0060 6146     		mov	r1, ip
 2509 0062 537A     		ldrb	r3, [r2, #9]
 421:Src/micromod.c **** 	lep1 = instruments[ inst ].loop_start + llen;
 2510              		.loc 1 421 0
 2511 0064 3848     		ldr	r0, .L253+16
 416:Src/micromod.c **** 	lamp = ampl * ( 255 - chan->panning );
 2512              		.loc 1 416 0
 2513 0066 5943     		muls	r1, r3
 2514 0068 0C91     		str	r1, [sp, #48]
 2515              	.LVL264:
 417:Src/micromod.c **** 	sidx = chan->sample_idx;
 2516              		.loc 1 417 0
 2517 006a FF21     		movs	r1, #255
 2518              	.LVL265:
 2519 006c CB1A     		subs	r3, r1, r3
 2520 006e 6146     		mov	r1, ip
 2521 0070 5943     		muls	r1, r3
 2522 0072 0D91     		str	r1, [sp, #52]
 2523              	.LVL266:
 419:Src/micromod.c **** 	inst = chan->instrument;
 2524              		.loc 1 419 0
 2525 0074 5168     		ldr	r1, [r2, #4]
 2526              	.LVL267:
 418:Src/micromod.c **** 	step = chan->step;
 2527              		.loc 1 418 0
 2528 0076 1368     		ldr	r3, [r2]
 2529              	.LVL268:
 419:Src/micromod.c **** 	inst = chan->instrument;
 2530              		.loc 1 419 0
 2531 0078 0891     		str	r1, [sp, #32]
 2532              	.LVL269:
 420:Src/micromod.c **** 	llen = instruments[ inst ].loop_length;
 2533              		.loc 1 420 0
 2534 007a 517B     		ldrb	r1, [r2, #13]
 2535              	.LVL270:
 424:Src/micromod.c **** 	buf_end = ( offset + count ) << 1;
 2536              		.loc 1 424 0
 2537 007c 0F9D     		ldr	r5, [sp, #60]
 421:Src/micromod.c **** 	lep1 = instruments[ inst ].loop_start + llen;
 2538              		.loc 1 421 0
 2539 007e 0901     		lsls	r1, r1, #4
 2540              	.LVL271:
 2541 0080 4118     		adds	r1, r0, r1
 2542 0082 8868     		ldr	r0, [r1, #8]
 422:Src/micromod.c **** 	sdat = instruments[ inst ].sample_data;
 2543              		.loc 1 422 0
 2544 0084 4C68     		ldr	r4, [r1, #4]
 423:Src/micromod.c **** 	buf_idx = offset << 1;
 2545              		.loc 1 423 0
 2546 0086 C968     		ldr	r1, [r1, #12]
 421:Src/micromod.c **** 	lep1 = instruments[ inst ].loop_start + llen;
 2547              		.loc 1 421 0
 2548 0088 0390     		str	r0, [sp, #12]
 2549              	.LVL272:
 422:Src/micromod.c **** 	sdat = instruments[ inst ].sample_data;
 2550              		.loc 1 422 0
ARM GAS  /tmp/ccuyegJO.s 			page 62


 2551 008a 0419     		adds	r4, r0, r4
 2552              	.LVL273:
 423:Src/micromod.c **** 	buf_idx = offset << 1;
 2553              		.loc 1 423 0
 2554 008c 0E91     		str	r1, [sp, #56]
 2555              	.LVL274:
 2556              	.L237:
 426:Src/micromod.c **** 		if( sidx >= lep1 ) {
 2557              		.loc 1 426 0
 2558 008e 0999     		ldr	r1, [sp, #36]
 2559 0090 A942     		cmp	r1, r5
 2560 0092 18D8     		bhi	.L244
 2561              	.LVL275:
 2562              	.L239:
 454:Src/micromod.c **** }
 2563              		.loc 1 454 0
 2564 0094 1360     		str	r3, [r2]
 2565              	.LVL276:
 2566              	.LBE72:
 2567              	.LBE74:
 606:Src/micromod.c **** 			resample( &channels[ chan_idx ], output_buffer, offset, remain );
 2568              		.loc 1 606 0
 2569 0096 029B     		ldr	r3, [sp, #8]
 2570 0098 3032     		adds	r2, r2, #48
 2571 009a 0133     		adds	r3, r3, #1
 2572 009c 0293     		str	r3, [sp, #8]
 2573              	.LVL277:
 2574 009e 0299     		ldr	r1, [sp, #8]
 2575 00a0 059B     		ldr	r3, [sp, #20]
 2576              	.LVL278:
 2577 00a2 8B42     		cmp	r3, r1
 2578 00a4 D6D1     		bne	.L245
 609:Src/micromod.c **** 		if( tick_offset == tick_len ) {
 2579              		.loc 1 609 0
 2580 00a6 019A     		ldr	r2, [sp, #4]
 2581 00a8 079B     		ldr	r3, [sp, #28]
 2582 00aa 9446     		mov	ip, r2
 2583              	.LVL279:
 2584 00ac 244C     		ldr	r4, .L253+8
 610:Src/micromod.c **** 			sequence_tick();
 2585              		.loc 1 610 0
 2586 00ae 069A     		ldr	r2, [sp, #24]
 609:Src/micromod.c **** 		if( tick_offset == tick_len ) {
 2587              		.loc 1 609 0
 2588 00b0 6344     		add	r3, r3, ip
 2589 00b2 2360     		str	r3, [r4]
 610:Src/micromod.c **** 			sequence_tick();
 2590              		.loc 1 610 0
 2591 00b4 9A42     		cmp	r2, r3
 2592 00b6 03D1     		bne	.L246
 611:Src/micromod.c **** 			tick_offset = 0;
 2593              		.loc 1 611 0
 2594 00b8 FFF7FEFF 		bl	sequence_tick
 2595              	.LVL280:
 612:Src/micromod.c **** 		}
 2596              		.loc 1 612 0
 2597 00bc 0023     		movs	r3, #0
ARM GAS  /tmp/ccuyegJO.s 			page 63


 2598 00be 2360     		str	r3, [r4]
 2599              	.L246:
 2600              	.LVL281:
 615:Src/micromod.c **** 	}
 2601              		.loc 1 615 0
 2602 00c0 019B     		ldr	r3, [sp, #4]
 2603 00c2 FF1A     		subs	r7, r7, r3
 2604              	.LVL282:
 2605 00c4 A7E7     		b	.L234
 2606              	.LVL283:
 2607              	.L244:
 2608              	.LBB75:
 2609              	.LBB73:
 427:Src/micromod.c **** 			/* Handle loop. */
 2610              		.loc 1 427 0
 2611 00c6 9C42     		cmp	r4, r3
 2612 00c8 09D8     		bhi	.L238
 429:Src/micromod.c **** 				/* One-shot sample. */
 2613              		.loc 1 429 0
 2614 00ca 0399     		ldr	r1, [sp, #12]
 2615 00cc 0800     		movs	r0, r1
 2616 00ce 8021     		movs	r1, #128
 2617 00d0 C901     		lsls	r1, r1, #7
 2618 00d2 8842     		cmp	r0, r1
 2619 00d4 2CD9     		bls	.L249
 2620              	.L240:
 435:Src/micromod.c **** 		}
 2621              		.loc 1 435 0
 2622 00d6 0399     		ldr	r1, [sp, #12]
 2623 00d8 5B1A     		subs	r3, r3, r1
 2624              	.LVL284:
 2625 00da 9C42     		cmp	r4, r3
 2626 00dc FBD9     		bls	.L240
 2627              	.L238:
 438:Src/micromod.c **** 		if( ampl <= 0 ) {
 2628              		.loc 1 438 0
 2629 00de 0999     		ldr	r1, [sp, #36]
 2630 00e0 0898     		ldr	r0, [sp, #32]
 2631 00e2 491B     		subs	r1, r1, r5
 2632 00e4 4908     		lsrs	r1, r1, #1
 2633 00e6 4143     		muls	r1, r0
 439:Src/micromod.c **** 			/* No need to mix. */
 2634              		.loc 1 439 0
 2635 00e8 6046     		mov	r0, ip
 438:Src/micromod.c **** 		if( ampl <= 0 ) {
 2636              		.loc 1 438 0
 2637 00ea C918     		adds	r1, r1, r3
 2638              	.LVL285:
 439:Src/micromod.c **** 			/* No need to mix. */
 2639              		.loc 1 439 0
 2640 00ec 0028     		cmp	r0, #0
 2641 00ee 21D0     		beq	.L250
 2642              	.LVL286:
 2643 00f0 0B94     		str	r4, [sp, #44]
 2644 00f2 8C42     		cmp	r4, r1
 2645 00f4 00D9     		bls	.L241
 2646 00f6 0B91     		str	r1, [sp, #44]
ARM GAS  /tmp/ccuyegJO.s 			page 64


 2647              	.L241:
 2648 00f8 0498     		ldr	r0, [sp, #16]
 2649              	.LVL287:
 2650 00fa 6900     		lsls	r1, r5, #1
 2651              	.LVL288:
 2652 00fc 4118     		adds	r1, r0, r1
 2653              	.LVL289:
 2654              	.L242:
 446:Src/micromod.c **** 			/* Most of the cpu time is spent in here. */
 2655              		.loc 1 446 0
 2656 00fe 0B98     		ldr	r0, [sp, #44]
 2657 0100 8342     		cmp	r3, r0
 2658 0102 C4D2     		bcs	.L237
 448:Src/micromod.c **** 			buf[ buf_idx++ ] += sample * lamp >> 8;
 2659              		.loc 1 448 0
 2660 0104 0E9E     		ldr	r6, [sp, #56]
 2661 0106 980B     		lsrs	r0, r3, #14
 2662 0108 3056     		ldrsb	r0, [r6, r0]
 449:Src/micromod.c **** 			buf[ buf_idx++ ] += sample * ramp >> 8;
 2663              		.loc 1 449 0
 2664 010a 0D9E     		ldr	r6, [sp, #52]
 448:Src/micromod.c **** 			buf[ buf_idx++ ] += sample * lamp >> 8;
 2665              		.loc 1 448 0
 2666 010c 0A90     		str	r0, [sp, #40]
 2667              	.LVL290:
 449:Src/micromod.c **** 			buf[ buf_idx++ ] += sample * ramp >> 8;
 2668              		.loc 1 449 0
 2669 010e 4643     		muls	r6, r0
 2670 0110 3012     		asrs	r0, r6, #8
 2671              	.LVL291:
 2672 0112 0E88     		ldrh	r6, [r1]
 450:Src/micromod.c **** 			sidx += step;
 2673              		.loc 1 450 0
 2674 0114 0235     		adds	r5, r5, #2
 2675              	.LVL292:
 449:Src/micromod.c **** 			buf[ buf_idx++ ] += sample * ramp >> 8;
 2676              		.loc 1 449 0
 2677 0116 8619     		adds	r6, r0, r6
 2678 0118 0E80     		strh	r6, [r1]
 450:Src/micromod.c **** 			sidx += step;
 2679              		.loc 1 450 0
 2680 011a 0A98     		ldr	r0, [sp, #40]
 2681 011c 0C9E     		ldr	r6, [sp, #48]
 2682 011e 7043     		muls	r0, r6
 2683 0120 4E88     		ldrh	r6, [r1, #2]
 2684 0122 0012     		asrs	r0, r0, #8
 2685 0124 8019     		adds	r0, r0, r6
 2686 0126 4880     		strh	r0, [r1, #2]
 451:Src/micromod.c **** 		}
 2687              		.loc 1 451 0
 2688 0128 0898     		ldr	r0, [sp, #32]
 2689 012a 0431     		adds	r1, r1, #4
 2690 012c 1B18     		adds	r3, r3, r0
 2691              	.LVL293:
 2692 012e E6E7     		b	.L242
 2693              	.LVL294:
 2694              	.L249:
ARM GAS  /tmp/ccuyegJO.s 			page 65


 429:Src/micromod.c **** 				/* One-shot sample. */
 2695              		.loc 1 429 0
 2696 0130 2300     		movs	r3, r4
 2697              	.LVL295:
 2698 0132 AFE7     		b	.L239
 2699              	.LVL296:
 2700              	.L250:
 438:Src/micromod.c **** 		if( ampl <= 0 ) {
 2701              		.loc 1 438 0
 2702 0134 0B00     		movs	r3, r1
 2703              	.LVL297:
 2704 0136 ADE7     		b	.L239
 2705              	.L254:
 2706              		.align	2
 2707              	.L253:
 2708 0138 00000000 		.word	.LANCHOR15
 2709 013c 00000000 		.word	.LANCHOR20
 2710 0140 00000000 		.word	.LANCHOR23
 2711 0144 00000000 		.word	.LANCHOR9
 2712 0148 00000000 		.word	.LANCHOR4
 2713              	.LBE73:
 2714              	.LBE75:
 2715              		.cfi_endproc
 2716              	.LFE21:
 2718              		.section	.bss.break_pattern,"aw",%nobits
 2719              		.align	2
 2720              		.set	.LANCHOR11,. + 0
 2723              	break_pattern:
 2724 0000 00000000 		.space	4
 2725              		.section	.bss.c2_rate,"aw",%nobits
 2726              		.align	2
 2727              		.set	.LANCHOR1,. + 0
 2730              	c2_rate:
 2731 0000 00000000 		.space	4
 2732              		.section	.bss.channels,"aw",%nobits
 2733              		.align	2
 2734              		.set	.LANCHOR9,. + 0
 2737              	channels:
 2738 0000 00000000 		.space	768
 2738      00000000 
 2738      00000000 
 2738      00000000 
 2738      00000000 
 2739              		.section	.bss.gain,"aw",%nobits
 2740              		.align	2
 2741              		.set	.LANCHOR3,. + 0
 2744              	gain:
 2745 0000 00000000 		.space	4
 2746              		.section	.bss.instruments,"aw",%nobits
 2747              		.align	2
 2748              		.set	.LANCHOR4,. + 0
 2751              	instruments:
 2752 0000 00000000 		.space	512
 2752      00000000 
 2752      00000000 
 2752      00000000 
 2752      00000000 
ARM GAS  /tmp/ccuyegJO.s 			page 66


 2753              		.section	.bss.module_data,"aw",%nobits
 2754              		.align	2
 2755              		.set	.LANCHOR22,. + 0
 2758              	module_data:
 2759 0000 00000000 		.space	4
 2760              		.section	.bss.next_row,"aw",%nobits
 2761              		.align	2
 2762              		.set	.LANCHOR13,. + 0
 2765              	next_row:
 2766 0000 00000000 		.space	4
 2767              		.section	.bss.num_channels,"aw",%nobits
 2768              		.align	2
 2769              		.set	.LANCHOR15,. + 0
 2772              	num_channels:
 2773 0000 00000000 		.space	4
 2774              		.section	.bss.pattern,"aw",%nobits
 2775              		.align	2
 2776              		.set	.LANCHOR14,. + 0
 2779              	pattern:
 2780 0000 00000000 		.space	4
 2781              		.section	.bss.pattern_data,"aw",%nobits
 2782              		.align	2
 2783              		.set	.LANCHOR18,. + 0
 2786              	pattern_data:
 2787 0000 00000000 		.space	4
 2788              		.section	.bss.pl_channel,"aw",%nobits
 2789              		.align	2
 2790              		.set	.LANCHOR21,. + 0
 2793              	pl_channel:
 2794 0000 00000000 		.space	4
 2795              		.section	.bss.pl_count,"aw",%nobits
 2796              		.align	2
 2797              		.set	.LANCHOR19,. + 0
 2800              	pl_count:
 2801 0000 00000000 		.space	4
 2802              		.section	.bss.random_seed,"aw",%nobits
 2803              		.align	2
 2804              		.set	.LANCHOR7,. + 0
 2807              	random_seed:
 2808 0000 00000000 		.space	4
 2809              		.section	.bss.row,"aw",%nobits
 2810              		.align	2
 2811              		.set	.LANCHOR16,. + 0
 2814              	row:
 2815 0000 00000000 		.space	4
 2816              		.section	.bss.sample_rate,"aw",%nobits
 2817              		.align	2
 2818              		.set	.LANCHOR2,. + 0
 2821              	sample_rate:
 2822 0000 00000000 		.space	4
 2823              		.section	.bss.sequence,"aw",%nobits
 2824              		.align	2
 2825              		.set	.LANCHOR17,. + 0
 2828              	sequence:
 2829 0000 00000000 		.space	4
 2830              		.section	.bss.song_length,"aw",%nobits
 2831              		.align	2
ARM GAS  /tmp/ccuyegJO.s 			page 67


 2832              		.set	.LANCHOR12,. + 0
 2835              	song_length:
 2836 0000 00000000 		.space	4
 2837              		.section	.bss.speed,"aw",%nobits
 2838              		.align	2
 2839              		.set	.LANCHOR10,. + 0
 2842              	speed:
 2843 0000 00000000 		.space	4
 2844              		.section	.bss.tick,"aw",%nobits
 2845              		.align	2
 2846              		.set	.LANCHOR8,. + 0
 2849              	tick:
 2850 0000 00000000 		.space	4
 2851              		.section	.bss.tick_len,"aw",%nobits
 2852              		.align	2
 2853              		.set	.LANCHOR20,. + 0
 2856              	tick_len:
 2857 0000 00000000 		.space	4
 2858              		.section	.bss.tick_offset,"aw",%nobits
 2859              		.align	2
 2860              		.set	.LANCHOR23,. + 0
 2863              	tick_offset:
 2864 0000 00000000 		.space	4
 2865              		.section	.rodata.arp_tuning,"a",%progbits
 2866              		.align	1
 2867              		.set	.LANCHOR0,. + 0
 2870              	arp_tuning:
 2871 0000 0010     		.short	4096
 2872 0002 1A0F     		.short	3866
 2873 0004 410E     		.short	3649
 2874 0006 740D     		.short	3444
 2875 0008 B30C     		.short	3251
 2876 000a FD0B     		.short	3069
 2877 000c 500B     		.short	2896
 2878 000e AE0A     		.short	2734
 2879 0010 140A     		.short	2580
 2880 0012 8309     		.short	2435
 2881 0014 FB08     		.short	2299
 2882 0016 7A08     		.short	2170
 2883 0018 0008     		.short	2048
 2884 001a 8D07     		.short	1933
 2885 001c 2107     		.short	1825
 2886 001e BA06     		.short	1722
 2887              		.section	.rodata.fine_tuning,"a",%progbits
 2888              		.align	1
 2889              		.set	.LANCHOR5,. + 0
 2892              	fine_tuning:
 2893 0000 F410     		.short	4340
 2894 0002 D410     		.short	4308
 2895 0004 B510     		.short	4277
 2896 0006 9710     		.short	4247
 2897 0008 7810     		.short	4216
 2898 000a 5A10     		.short	4186
 2899 000c 3C10     		.short	4156
 2900 000e 1E10     		.short	4126
 2901 0010 0010     		.short	4096
 2902 0012 E30F     		.short	4067
ARM GAS  /tmp/ccuyegJO.s 			page 68


 2903 0014 C50F     		.short	4037
 2904 0016 A80F     		.short	4008
 2905 0018 8B0F     		.short	3979
 2906 001a 6F0F     		.short	3951
 2907 001c 520F     		.short	3922
 2908 001e 360F     		.short	3894
 2909              		.section	.rodata.sine_table,"a",%progbits
 2910              		.set	.LANCHOR6,. + 0
 2913              	sine_table:
 2914 0000 00       		.byte	0
 2915 0001 18       		.byte	24
 2916 0002 31       		.byte	49
 2917 0003 4A       		.byte	74
 2918 0004 61       		.byte	97
 2919 0005 78       		.byte	120
 2920 0006 8D       		.byte	-115
 2921 0007 A1       		.byte	-95
 2922 0008 B4       		.byte	-76
 2923 0009 C5       		.byte	-59
 2924 000a D4       		.byte	-44
 2925 000b E0       		.byte	-32
 2926 000c EB       		.byte	-21
 2927 000d F4       		.byte	-12
 2928 000e FA       		.byte	-6
 2929 000f FD       		.byte	-3
 2930 0010 FF       		.byte	-1
 2931 0011 FD       		.byte	-3
 2932 0012 FA       		.byte	-6
 2933 0013 F4       		.byte	-12
 2934 0014 EB       		.byte	-21
 2935 0015 E0       		.byte	-32
 2936 0016 D4       		.byte	-44
 2937 0017 C5       		.byte	-59
 2938 0018 B4       		.byte	-76
 2939 0019 A1       		.byte	-95
 2940 001a 8D       		.byte	-115
 2941 001b 78       		.byte	120
 2942 001c 61       		.byte	97
 2943 001d 4A       		.byte	74
 2944 001e 31       		.byte	49
 2945 001f 18       		.byte	24
 2946              		.text
 2947              	.Letext0:
ARM GAS  /tmp/ccuyegJO.s 			page 69


DEFINED SYMBOLS
                            *ABS*:0000000000000000 micromod.c
     /tmp/ccuyegJO.s:16     .text.calculate_num_patterns:0000000000000000 $t
     /tmp/ccuyegJO.s:22     .text.calculate_num_patterns:0000000000000000 calculate_num_patterns
     /tmp/ccuyegJO.s:69     .text.calculate_num_channels:0000000000000000 $t
     /tmp/ccuyegJO.s:75     .text.calculate_num_channels:0000000000000000 calculate_num_channels
     /tmp/ccuyegJO.s:158    .text.calculate_num_channels:0000000000000060 $d
     /tmp/ccuyegJO.s:171    .text.unsigned_short_big_endian:0000000000000000 $t
     /tmp/ccuyegJO.s:177    .text.unsigned_short_big_endian:0000000000000000 unsigned_short_big_endian
     /tmp/ccuyegJO.s:198    .text.update_frequency:0000000000000000 $t
     /tmp/ccuyegJO.s:204    .text.update_frequency:0000000000000000 update_frequency
     /tmp/ccuyegJO.s:306    .text.update_frequency:0000000000000068 $d
     /tmp/ccuyegJO.s:314    .text.tone_portamento:0000000000000000 $t
     /tmp/ccuyegJO.s:320    .text.tone_portamento:0000000000000000 tone_portamento
     /tmp/ccuyegJO.s:368    .text.trigger:0000000000000000 $t
     /tmp/ccuyegJO.s:374    .text.trigger:0000000000000000 trigger
     /tmp/ccuyegJO.s:511    .text.trigger:0000000000000094 $d
     /tmp/ccuyegJO.s:517    .text.volume_slide.isra.0:0000000000000000 $t
     /tmp/ccuyegJO.s:523    .text.volume_slide.isra.0:0000000000000000 volume_slide.isra.0
     /tmp/ccuyegJO.s:558    .text.waveform:0000000000000000 $t
     /tmp/ccuyegJO.s:564    .text.waveform:0000000000000000 waveform
     /tmp/ccuyegJO.s:661    .text.waveform:0000000000000058 $d
     /tmp/ccuyegJO.s:667    .text.vibrato:0000000000000000 $t
     /tmp/ccuyegJO.s:673    .text.vibrato:0000000000000000 vibrato
     /tmp/ccuyegJO.s:709    .text.sequence_tick:0000000000000000 $t
     /tmp/ccuyegJO.s:715    .text.sequence_tick:0000000000000000 sequence_tick
     /tmp/ccuyegJO.s:1001   .text.sequence_tick:000000000000014a $d
     /tmp/ccuyegJO.s:1030   .text.sequence_tick:0000000000000182 $t
     /tmp/ccuyegJO.s:1333   .text.sequence_tick:00000000000002f0 $d
     /tmp/ccuyegJO.s:1351   .text.sequence_tick:0000000000000330 $t
     /tmp/ccuyegJO.s:1447   .text.sequence_tick:0000000000000390 $d
     /tmp/ccuyegJO.s:1682   .text.sequence_tick:0000000000000484 $d
     /tmp/ccuyegJO.s:1690   .text.micromod_calculate_mod_file_len:0000000000000000 $t
     /tmp/ccuyegJO.s:1697   .text.micromod_calculate_mod_file_len:0000000000000000 micromod_calculate_mod_file_len
     /tmp/ccuyegJO.s:1767   .text.micromod_calculate_mod_file_len:000000000000003c $d
     /tmp/ccuyegJO.s:1772   .text.micromod_get_string:0000000000000000 $t
     /tmp/ccuyegJO.s:1779   .text.micromod_get_string:0000000000000000 micromod_get_string
     /tmp/ccuyegJO.s:1868   .text.micromod_get_string:0000000000000048 $d
     /tmp/ccuyegJO.s:1874   .text.micromod_set_position:0000000000000000 $t
     /tmp/ccuyegJO.s:1881   .text.micromod_set_position:0000000000000000 micromod_set_position
     /tmp/ccuyegJO.s:2043   .text.micromod_set_position:000000000000008c $d
     /tmp/ccuyegJO.s:2063   .text.micromod_initialise:0000000000000000 $t
     /tmp/ccuyegJO.s:2070   .text.micromod_initialise:0000000000000000 micromod_initialise
     /tmp/ccuyegJO.s:2323   .text.micromod_initialise:0000000000000114 $d
     /tmp/ccuyegJO.s:2341   .text.micromod_calculate_song_duration:0000000000000000 $t
     /tmp/ccuyegJO.s:2348   .text.micromod_calculate_song_duration:0000000000000000 micromod_calculate_song_duration
     /tmp/ccuyegJO.s:2394   .text.micromod_calculate_song_duration:000000000000002c $d
     /tmp/ccuyegJO.s:2400   .text.micromod_get_audio:0000000000000000 $t
     /tmp/ccuyegJO.s:2407   .text.micromod_get_audio:0000000000000000 micromod_get_audio
     /tmp/ccuyegJO.s:2708   .text.micromod_get_audio:0000000000000138 $d
     /tmp/ccuyegJO.s:2719   .bss.break_pattern:0000000000000000 $d
     /tmp/ccuyegJO.s:2723   .bss.break_pattern:0000000000000000 break_pattern
     /tmp/ccuyegJO.s:2726   .bss.c2_rate:0000000000000000 $d
     /tmp/ccuyegJO.s:2730   .bss.c2_rate:0000000000000000 c2_rate
     /tmp/ccuyegJO.s:2733   .bss.channels:0000000000000000 $d
     /tmp/ccuyegJO.s:2737   .bss.channels:0000000000000000 channels
     /tmp/ccuyegJO.s:2740   .bss.gain:0000000000000000 $d
ARM GAS  /tmp/ccuyegJO.s 			page 70


     /tmp/ccuyegJO.s:2744   .bss.gain:0000000000000000 gain
     /tmp/ccuyegJO.s:2747   .bss.instruments:0000000000000000 $d
     /tmp/ccuyegJO.s:2751   .bss.instruments:0000000000000000 instruments
     /tmp/ccuyegJO.s:2754   .bss.module_data:0000000000000000 $d
     /tmp/ccuyegJO.s:2758   .bss.module_data:0000000000000000 module_data
     /tmp/ccuyegJO.s:2761   .bss.next_row:0000000000000000 $d
     /tmp/ccuyegJO.s:2765   .bss.next_row:0000000000000000 next_row
     /tmp/ccuyegJO.s:2768   .bss.num_channels:0000000000000000 $d
     /tmp/ccuyegJO.s:2772   .bss.num_channels:0000000000000000 num_channels
     /tmp/ccuyegJO.s:2775   .bss.pattern:0000000000000000 $d
     /tmp/ccuyegJO.s:2779   .bss.pattern:0000000000000000 pattern
     /tmp/ccuyegJO.s:2782   .bss.pattern_data:0000000000000000 $d
     /tmp/ccuyegJO.s:2786   .bss.pattern_data:0000000000000000 pattern_data
     /tmp/ccuyegJO.s:2789   .bss.pl_channel:0000000000000000 $d
     /tmp/ccuyegJO.s:2793   .bss.pl_channel:0000000000000000 pl_channel
     /tmp/ccuyegJO.s:2796   .bss.pl_count:0000000000000000 $d
     /tmp/ccuyegJO.s:2800   .bss.pl_count:0000000000000000 pl_count
     /tmp/ccuyegJO.s:2803   .bss.random_seed:0000000000000000 $d
     /tmp/ccuyegJO.s:2807   .bss.random_seed:0000000000000000 random_seed
     /tmp/ccuyegJO.s:2810   .bss.row:0000000000000000 $d
     /tmp/ccuyegJO.s:2814   .bss.row:0000000000000000 row
     /tmp/ccuyegJO.s:2817   .bss.sample_rate:0000000000000000 $d
     /tmp/ccuyegJO.s:2821   .bss.sample_rate:0000000000000000 sample_rate
     /tmp/ccuyegJO.s:2824   .bss.sequence:0000000000000000 $d
     /tmp/ccuyegJO.s:2828   .bss.sequence:0000000000000000 sequence
     /tmp/ccuyegJO.s:2831   .bss.song_length:0000000000000000 $d
     /tmp/ccuyegJO.s:2835   .bss.song_length:0000000000000000 song_length
     /tmp/ccuyegJO.s:2838   .bss.speed:0000000000000000 $d
     /tmp/ccuyegJO.s:2842   .bss.speed:0000000000000000 speed
     /tmp/ccuyegJO.s:2845   .bss.tick:0000000000000000 $d
     /tmp/ccuyegJO.s:2849   .bss.tick:0000000000000000 tick
     /tmp/ccuyegJO.s:2852   .bss.tick_len:0000000000000000 $d
     /tmp/ccuyegJO.s:2856   .bss.tick_len:0000000000000000 tick_len
     /tmp/ccuyegJO.s:2859   .bss.tick_offset:0000000000000000 $d
     /tmp/ccuyegJO.s:2863   .bss.tick_offset:0000000000000000 tick_offset
     /tmp/ccuyegJO.s:2866   .rodata.arp_tuning:0000000000000000 $d
     /tmp/ccuyegJO.s:2870   .rodata.arp_tuning:0000000000000000 arp_tuning
     /tmp/ccuyegJO.s:2888   .rodata.fine_tuning:0000000000000000 $d
     /tmp/ccuyegJO.s:2892   .rodata.fine_tuning:0000000000000000 fine_tuning
     /tmp/ccuyegJO.s:2913   .rodata.sine_table:0000000000000000 sine_table
                     .debug_frame:0000000000000010 $d
     /tmp/ccuyegJO.s:1476   .text.sequence_tick:00000000000003ad $d
     /tmp/ccuyegJO.s:1476   .text.sequence_tick:00000000000003ae $t

UNDEFINED SYMBOLS
__aeabi_idiv
__aeabi_uidiv
__gnu_thumb1_case_uhi
__gnu_thumb1_case_uqi
