ARM GAS  /tmp/cciBqq80.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f0xx_hal_uart.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.HAL_UART_Init,"ax",%progbits
  16              		.align	1
  17              		.global	HAL_UART_Init
  18              		.syntax unified
  19              		.code	16
  20              		.thumb_func
  21              		.fpu softvfp
  23              	HAL_UART_Init:
  24              	.LFB35:
  25              		.file 1 "Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c"
   1:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
   2:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   ******************************************************************************
   3:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @file    stm32f0xx_hal_uart.c
   4:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @author  MCD Application Team
   5:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @version V1.4.0
   6:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @date    27-May-2016
   7:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief   UART HAL module driver.
   8:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *          This file provides firmware functions to manage the following 
   9:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *          functionalities of the Universal Asynchronous Receiver Transmitter (UART) peripheral:
  10:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           + Initialization and de-initialization functions
  11:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           + IO operation functions
  12:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           + Peripheral Control functions
  13:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           + Peripheral State and Errors functions
  14:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *
  15:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   @verbatim
  16:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****  ===============================================================================
  17:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****                         ##### How to use this driver #####
  18:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****  ===============================================================================
  19:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   [..]
  20:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     The UART HAL driver can be used as follows:
  21:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
  22:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (#) Declare a UART_HandleTypeDef handle structure (eg. UART_HandleTypeDef huart).
  23:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (#) Initialize the UART low level resources by implementing the HAL_UART_MspInit() API:
  24:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) Enable the USARTx interface clock.
  25:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) UART pins configuration:
  26:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             (+++) Enable the clock for the UART GPIOs.
  27:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             (+++) Configure these UART pins as alternate function pull-up.
  28:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) NVIC configuration if you need to use interrupt process (HAL_UART_Transmit_IT()
  29:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****              and HAL_UART_Receive_IT() APIs):
  30:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             (+++) Configure the USARTx interrupt priority.
  31:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             (+++) Enable the NVIC USART IRQ handle.
  32:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) UART interrupts handling:
  33:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****               -@@-  The specific UART interrupts (Transmission complete interrupt,
ARM GAS  /tmp/cciBqq80.s 			page 2


  34:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****                 RXNE interrupt and Error Interrupts) are managed using the macros
  35:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****                 __HAL_UART_ENABLE_IT() and __HAL_UART_DISABLE_IT() inside the transmit and receive 
  36:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) DMA Configuration if you need to use DMA process (HAL_UART_Transmit_DMA()
  37:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****              and HAL_UART_Receive_DMA() APIs):
  38:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             (+++) Declare a DMA handle structure for the Tx/Rx channel.
  39:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             (+++) Enable the DMAx interface clock.
  40:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             (+++) Configure the declared DMA handle structure with the required Tx/Rx parameters.
  41:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             (+++) Configure the DMA Tx/Rx channel.
  42:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             (+++) Associate the initialized DMA handle to the UART DMA Tx/Rx handle.
  43:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             (+++) Configure the priority and enable the NVIC for the transfer complete interrupt on
  44:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
  45:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (#) Program the Baud Rate, Word Length, Stop Bit, Parity, Hardware
  46:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         flow control and Mode (Receiver/Transmitter) in the huart handle Init structure.
  47:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
  48:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (#) If required, program UART advanced features (TX/RX pins swap, auto Baud rate detection,...)
  49:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         in the huart handle AdvancedInit structure.
  50:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
  51:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (#) For the UART asynchronous mode, initialize the UART registers by calling
  52:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         the HAL_UART_Init() API.
  53:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
  54:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (#) For the UART Half duplex mode, initialize the UART registers by calling
  55:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         the HAL_HalfDuplex_Init() API.
  56:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
  57:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (#) For the UART Multiprocessor mode, initialize the UART registers
  58:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         by calling the HAL_MultiProcessor_Init() API.
  59:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
  60:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (#) For the UART RS485 Driver Enabled mode, initialize the UART registers
  61:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         by calling the HAL_RS485Ex_Init() API.
  62:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
  63:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****    [..]
  64:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (@) These APIs(HAL_UART_Init(), HAL_HalfDuplex_Init(), HAL_MultiProcessor_Init(),
  65:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         also configure the low level Hardware GPIO, CLOCK, CORTEX...etc) by
  66:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         calling the customized HAL_UART_MspInit() API.
  67:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
  68:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         Three operation modes are available within this driver :     
  69:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   
  70:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      *** Polling mode IO operation ***
  71:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      =================================
  72:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      [..]    
  73:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        (+) Send an amount of data in blocking mode using HAL_UART_Transmit() 
  74:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        (+) Receive an amount of data in blocking mode using HAL_UART_Receive()
  75:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        
  76:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      *** Interrupt mode IO operation ***    
  77:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      ===================================
  78:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      [..]    
  79:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        (+) Send an amount of data in non blocking mode using HAL_UART_Transmit_IT() 
  80:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        (+) At transmission end of half transfer HAL_UART_TxHalfCpltCallback is executed and user ca
  81:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_TxHalfCpltCallback 
  82:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        (+) At transmission end of transfer HAL_UART_TxCpltCallback is executed and user can 
  83:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_TxCpltCallback
  84:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        (+) Receive an amount of data in non blocking mode using HAL_UART_Receive_IT() 
  85:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        (+) At reception end of half transfer HAL_UART_RxHalfCpltCallback is executed and user can 
  86:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_RxHalfCpltCallback 
  87:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        (+) At reception end of transfer HAL_UART_RxCpltCallback is executed and user can 
  88:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_RxCpltCallback          
  89:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        (+) In case of transfer Error, HAL_UART_ErrorCallback() function is executed and user can 
  90:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_ErrorCallback
ARM GAS  /tmp/cciBqq80.s 			page 3


  91:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
  92:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      *** DMA mode IO operation ***    
  93:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      ==============================
  94:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      [..] 
  95:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        (+) Send an amount of data in non blocking mode (DMA) using HAL_UART_Transmit_DMA() 
  96:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        (+) At transmission end of half transfer HAL_UART_TxHalfCpltCallback is executed and user ca
  97:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_TxHalfCpltCallback 
  98:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        (+) At transmission end of transfer HAL_UART_TxCpltCallback is executed and user can 
  99:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_TxCpltCallback
 100:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        (+) Receive an amount of data in non blocking mode (DMA) using HAL_UART_Receive_DMA() 
 101:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        (+) At reception end of half transfer HAL_UART_RxHalfCpltCallback is executed and user can 
 102:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_RxHalfCpltCallback 
 103:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        (+) At reception end of transfer HAL_UART_RxCpltCallback is executed and user can 
 104:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_RxCpltCallback          
 105:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        (+) In case of transfer Error, HAL_UART_ErrorCallback() function is executed and user can 
 106:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_ErrorCallback
 107:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        (+) Pause the DMA Transfer using HAL_UART_DMAPause()      
 108:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        (+) Resume the DMA Transfer using HAL_UART_DMAResume()  
 109:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        (+) Stop the DMA Transfer using HAL_UART_DMAStop()      
 110:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     
 111:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      *** UART HAL driver macros list ***
 112:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      ============================================= 
 113:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      [..]
 114:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        Below the list of most used macros in UART HAL driver.
 115:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        
 116:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       (+) __HAL_UART_ENABLE: Enable the UART peripheral 
 117:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       (+) __HAL_UART_DISABLE: Disable the UART peripheral     
 118:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       (+) __HAL_UART_GET_FLAG : Check whether the specified UART flag is set or not
 119:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       (+) __HAL_UART_CLEAR_FLAG : Clear the specified UART pending flag
 120:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       (+) __HAL_UART_ENABLE_IT: Enable the specified UART interrupt
 121:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       (+) __HAL_UART_DISABLE_IT: Disable the specified UART interrupt
 122:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       
 123:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      [..] 
 124:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        (@) You can refer to the UART HAL driver header file for more useful macros 
 125:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       
 126:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   @endverbatim
 127:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   ******************************************************************************
 128:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @attention
 129:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *
 130:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
 131:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *
 132:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * Redistribution and use in source and binary forms, with or without modification,
 133:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * are permitted provided that the following conditions are met:
 134:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *   1. Redistributions of source code must retain the above copyright notice,
 135:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *      this list of conditions and the following disclaimer.
 136:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 137:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *      this list of conditions and the following disclaimer in the documentation
 138:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *      and/or other materials provided with the distribution.
 139:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 140:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *      may be used to endorse or promote products derived from this software
 141:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *      without specific prior written permission.
 142:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *
 143:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 144:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 145:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 146:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 147:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
ARM GAS  /tmp/cciBqq80.s 			page 4


 148:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 149:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 150:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 151:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 152:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 153:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *
 154:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   ******************************************************************************
 155:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 156:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 157:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /* Includes ------------------------------------------------------------------*/
 158:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #include "stm32f0xx_hal.h"
 159:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 160:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /** @addtogroup STM32F0xx_HAL_Driver
 161:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @{
 162:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 163:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 164:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /** @defgroup UART UART
 165:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief HAL UART module driver
 166:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @{
 167:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 168:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 169:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #ifdef HAL_UART_MODULE_ENABLED
 170:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 171:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /* Private typedef -----------------------------------------------------------*/
 172:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /* Private define ------------------------------------------------------------*/
 173:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /** @defgroup UART_Private_Constants UART Private Constants
 174:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @{
 175:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 176:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #define UART_TEACK_REACK_TIMEOUT ((uint32_t) 1000)              /*!< UART TX or RX enable acknowled
 177:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #define UART_CR1_FIELDS  ((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | \
 178:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****                                      USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8)) /*!< UART or U
 179:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
 180:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @}
 181:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 182:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 183:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /* Private macros ------------------------------------------------------------*/
 184:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /* Private variables ---------------------------------------------------------*/
 185:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /* Private function prototypes -----------------------------------------------*/
 186:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /** @addtogroup UART_Private_Functions   UART Private Functions
 187:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @{
 188:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 189:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma);
 190:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma);
 191:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma);
 192:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma);
 193:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_DMAError(DMA_HandleTypeDef *hdma);
 194:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
 195:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @}
 196:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 197:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 198:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /* Exported functions --------------------------------------------------------*/
 199:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 200:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /** @defgroup UART_Exported_Functions UART Exported Functions
 201:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @{
 202:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 203:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 204:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group1 Initialization and de-initialization functions
ARM GAS  /tmp/cciBqq80.s 			page 5


 205:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *  @brief    Initialization and Configuration functions
 206:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *
 207:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** @verbatim
 208:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** ===============================================================================
 209:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             ##### Initialization and Configuration functions #####
 210:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****  ===============================================================================
 211:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     [..]
 212:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     This subsection provides a set of functions allowing to initialize the USARTx or the UARTy
 213:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     in asynchronous mode.
 214:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       (+) For the asynchronous mode the parameters below can be configured:
 215:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) Baud Rate
 216:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) Word Length
 217:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) Stop Bit
 218:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) Parity
 219:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) Hardware flow control
 220:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) Receiver/transmitter modes
 221:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) Over Sampling Method
 222:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) One-Bit Sampling Method
 223:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       (+) For the asynchronous mode, the following advanced features can be configured as well:
 224:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) TX and/or RX pin level inversion
 225:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) data logical level inversion
 226:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) RX and TX pins swap
 227:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) RX overrun detection disabling
 228:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) DMA disabling on RX error
 229:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) MSB first on communication line
 230:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) auto Baud rate detection
 231:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     [..]
 232:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     The HAL_UART_Init(), HAL_HalfDuplex_Init() and HAL_MultiProcessor_Init()
 233:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     API follow respectively the UART asynchronous, UART Half duplex and multiprocessor mode
 234:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     configuration procedures (details for the procedures are available in reference manual).
 235:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 236:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** @endverbatim
 237:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @{
 238:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 239:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 240:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /*
 241:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   Additional Table:  If the parity is enabled, then the MSB bit of the data written
 242:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****                      in the data register is transmitted but is changed by the parity bit.
 243:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****                      According to device capability (support or not of 7-bit word length),
 244:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****                      frame length is either defined by the M bit (8-bits or 9-bits)
 245:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****                      or by the M1 and M0 bits (7-bit, 8-bit or 9-bit).
 246:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****                      Possible UART frame formats are as listed in the following table:
 247:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             
 248:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       Table 1. UART frame format.             
 249:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       +-----------------------------------------------------------------------+
 250:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       |       M bit       |  PCE bit  |             UART frame                |
 251:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       |-------------------|-----------|---------------------------------------|
 252:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       |         0         |     0     |    | SB |    8-bit data   | STB |     |
 253:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       |-------------------|-----------|---------------------------------------|
 254:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       |         0         |     1     |    | SB | 7-bit data | PB | STB |     |
 255:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       |-------------------|-----------|---------------------------------------|
 256:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       |         1         |     0     |    | SB |    9-bit data   | STB |     |
 257:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       |-------------------|-----------|---------------------------------------|
 258:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       |         1         |     1     |    | SB | 8-bit data | PB | STB |     |
 259:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       +-----------------------------------------------------------------------+
 260:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       |  M1 bit |  M0 bit |  PCE bit  |             UART frame                |
 261:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       |---------|---------|-----------|---------------------------------------|
ARM GAS  /tmp/cciBqq80.s 			page 6


 262:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       |    0    |    0    |     0     |    | SB |    8 bit data   | STB |     |
 263:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       |---------|---------|-----------|---------------------------------------|
 264:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       |    0    |    0    |     1     |    | SB | 7 bit data | PB | STB |     |
 265:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       |---------|---------|-----------|---------------------------------------|
 266:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       |    0    |    1    |     0     |    | SB |    9 bit data   | STB |     |
 267:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       |---------|---------|-----------|---------------------------------------|
 268:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       |    0    |    1    |     1     |    | SB | 8 bit data | PB | STB |     |
 269:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       |---------|---------|-----------|---------------------------------------|
 270:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       |    1    |    0    |     0     |    | SB |    7 bit data   | STB |     |
 271:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       |---------|---------|-----------|---------------------------------------|
 272:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       |    1    |    0    |     1     |    | SB | 6 bit data | PB | STB |     |
 273:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       +-----------------------------------------------------------------------+
 274:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 275:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** */
 276:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 277:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
 278:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Initialize the UART mode according to the specified
 279:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         parameters in the UART_InitTypeDef and initialize the associated handle.
 280:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart: UART handle.
 281:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
 282:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 283:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
 284:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
  26              		.loc 1 284 0
  27              		.cfi_startproc
  28 0000 80B5     		push	{r7, lr}
  29              	.LCFI0:
  30              		.cfi_def_cfa_offset 8
  31              		.cfi_offset 7, -8
  32              		.cfi_offset 14, -4
  33 0002 82B0     		sub	sp, sp, #8
  34              	.LCFI1:
  35              		.cfi_def_cfa_offset 16
  36 0004 00AF     		add	r7, sp, #0
  37              	.LCFI2:
  38              		.cfi_def_cfa_register 7
  39 0006 7860     		str	r0, [r7, #4]
 285:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check the UART handle allocation */
 286:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(huart == NULL)
  40              		.loc 1 286 0
  41 0008 7B68     		ldr	r3, [r7, #4]
  42 000a 002B     		cmp	r3, #0
  43 000c 01D1     		bne	.L2
 287:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 288:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_ERROR;
  44              		.loc 1 288 0
  45 000e 0123     		movs	r3, #1
  46 0010 47E0     		b	.L3
  47              	.L2:
 289:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 290:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 291:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 292:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 293:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Check the parameters */
 294:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 295:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 296:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   else
ARM GAS  /tmp/cciBqq80.s 			page 7


 297:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 298:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Check the parameters */
 299:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     assert_param(IS_UART_INSTANCE(huart->Instance));
 300:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 301:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 302:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(huart->gState == HAL_UART_STATE_RESET)
  48              		.loc 1 302 0
  49 0012 7B68     		ldr	r3, [r7, #4]
  50 0014 6922     		movs	r2, #105
  51 0016 9B5C     		ldrb	r3, [r3, r2]
  52 0018 DBB2     		uxtb	r3, r3
  53 001a 002B     		cmp	r3, #0
  54 001c 07D1     		bne	.L4
 303:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 304:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 305:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
  55              		.loc 1 305 0
  56 001e 7B68     		ldr	r3, [r7, #4]
  57 0020 6822     		movs	r2, #104
  58 0022 0021     		movs	r1, #0
  59 0024 9954     		strb	r1, [r3, r2]
 306:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 307:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 308:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     HAL_UART_MspInit(huart);
  60              		.loc 1 308 0
  61 0026 7B68     		ldr	r3, [r7, #4]
  62 0028 1800     		movs	r0, r3
  63 002a FFF7FEFF 		bl	HAL_UART_MspInit
  64              	.L4:
 309:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 310:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 311:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
  65              		.loc 1 311 0
  66 002e 7B68     		ldr	r3, [r7, #4]
  67 0030 6922     		movs	r2, #105
  68 0032 2421     		movs	r1, #36
  69 0034 9954     		strb	r1, [r3, r2]
 312:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 313:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Disable the Peripheral */
 314:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
  70              		.loc 1 314 0
  71 0036 7B68     		ldr	r3, [r7, #4]
  72 0038 1B68     		ldr	r3, [r3]
  73 003a 7A68     		ldr	r2, [r7, #4]
  74 003c 1268     		ldr	r2, [r2]
  75 003e 1268     		ldr	r2, [r2]
  76 0040 0121     		movs	r1, #1
  77 0042 8A43     		bics	r2, r1
  78 0044 1A60     		str	r2, [r3]
 315:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 316:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Set the UART Communication parameters */
 317:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (UART_SetConfig(huart) == HAL_ERROR)
  79              		.loc 1 317 0
  80 0046 7B68     		ldr	r3, [r7, #4]
  81 0048 1800     		movs	r0, r3
  82 004a FFF7FEFF 		bl	UART_SetConfig
  83 004e 0300     		movs	r3, r0
ARM GAS  /tmp/cciBqq80.s 			page 8


  84 0050 012B     		cmp	r3, #1
  85 0052 01D1     		bne	.L5
 318:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 319:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_ERROR;
  86              		.loc 1 319 0
  87 0054 0123     		movs	r3, #1
  88 0056 24E0     		b	.L3
  89              	.L5:
 320:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 321:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 322:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
  90              		.loc 1 322 0
  91 0058 7B68     		ldr	r3, [r7, #4]
  92 005a 5B6A     		ldr	r3, [r3, #36]
  93 005c 002B     		cmp	r3, #0
  94 005e 03D0     		beq	.L6
 323:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 324:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     UART_AdvFeatureConfig(huart);
  95              		.loc 1 324 0
  96 0060 7B68     		ldr	r3, [r7, #4]
  97 0062 1800     		movs	r0, r3
  98 0064 FFF7FEFF 		bl	UART_AdvFeatureConfig
  99              	.L6:
 325:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 326:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 327:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* In asynchronous mode, the following bits must be kept cleared:
 328:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
 329:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 
 330:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if defined (USART_CR2_LINEN)
 331:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 100              		.loc 1 331 0
 101 0068 7B68     		ldr	r3, [r7, #4]
 102 006a 1B68     		ldr	r3, [r3]
 103 006c 7A68     		ldr	r2, [r7, #4]
 104 006e 1268     		ldr	r2, [r2]
 105 0070 5268     		ldr	r2, [r2, #4]
 106 0072 0E49     		ldr	r1, .L7
 107 0074 0A40     		ands	r2, r1
 108 0076 5A60     		str	r2, [r3, #4]
 332:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
 333:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->Instance->CR2 &= ~(USART_CR2_CLKEN);
 334:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif
 335:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if defined (USART_CR3_SCEN)
 336:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if defined (USART_CR3_IREN)
 337:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 109              		.loc 1 337 0
 110 0078 7B68     		ldr	r3, [r7, #4]
 111 007a 1B68     		ldr	r3, [r3]
 112 007c 7A68     		ldr	r2, [r7, #4]
 113 007e 1268     		ldr	r2, [r2]
 114 0080 9268     		ldr	r2, [r2, #8]
 115 0082 2A21     		movs	r1, #42
 116 0084 8A43     		bics	r2, r1
 117 0086 9A60     		str	r2, [r3, #8]
 338:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
 339:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL);
 340:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif
ARM GAS  /tmp/cciBqq80.s 			page 9


 341:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
 342:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if defined (USART_CR3_IREN)
 343:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->Instance->CR3 &= ~(USART_CR3_HDSEL | USART_CR3_IREN);
 344:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
 345:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->Instance->CR3 &= ~(USART_CR3_HDSEL);
 346:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif
 347:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif
 348:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 349:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Enable the Peripheral */
 350:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 118              		.loc 1 350 0
 119 0088 7B68     		ldr	r3, [r7, #4]
 120 008a 1B68     		ldr	r3, [r3]
 121 008c 7A68     		ldr	r2, [r7, #4]
 122 008e 1268     		ldr	r2, [r2]
 123 0090 1268     		ldr	r2, [r2]
 124 0092 0121     		movs	r1, #1
 125 0094 0A43     		orrs	r2, r1
 126 0096 1A60     		str	r2, [r3]
 351:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 352:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
 353:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return (UART_CheckIdleState(huart));
 127              		.loc 1 353 0
 128 0098 7B68     		ldr	r3, [r7, #4]
 129 009a 1800     		movs	r0, r3
 130 009c FFF7FEFF 		bl	UART_CheckIdleState
 131 00a0 0300     		movs	r3, r0
 132              	.L3:
 354:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 133              		.loc 1 354 0
 134 00a2 1800     		movs	r0, r3
 135 00a4 BD46     		mov	sp, r7
 136 00a6 02B0     		add	sp, sp, #8
 137              		@ sp needed
 138 00a8 80BD     		pop	{r7, pc}
 139              	.L8:
 140 00aa C046     		.align	2
 141              	.L7:
 142 00ac FFB7FFFF 		.word	-18433
 143              		.cfi_endproc
 144              	.LFE35:
 146              		.section	.text.HAL_HalfDuplex_Init,"ax",%progbits
 147              		.align	1
 148              		.global	HAL_HalfDuplex_Init
 149              		.syntax unified
 150              		.code	16
 151              		.thumb_func
 152              		.fpu softvfp
 154              	HAL_HalfDuplex_Init:
 155              	.LFB36:
 355:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 356:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
 357:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Initialize the half-duplex mode according to the specified
 358:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         parameters in the UART_InitTypeDef and creates the associated handle.
 359:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart: UART handle.
 360:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
 361:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
ARM GAS  /tmp/cciBqq80.s 			page 10


 362:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
 363:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 156              		.loc 1 363 0
 157              		.cfi_startproc
 158 0000 80B5     		push	{r7, lr}
 159              	.LCFI3:
 160              		.cfi_def_cfa_offset 8
 161              		.cfi_offset 7, -8
 162              		.cfi_offset 14, -4
 163 0002 82B0     		sub	sp, sp, #8
 164              	.LCFI4:
 165              		.cfi_def_cfa_offset 16
 166 0004 00AF     		add	r7, sp, #0
 167              	.LCFI5:
 168              		.cfi_def_cfa_register 7
 169 0006 7860     		str	r0, [r7, #4]
 364:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check the UART handle allocation */
 365:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(huart == NULL)
 170              		.loc 1 365 0
 171 0008 7B68     		ldr	r3, [r7, #4]
 172 000a 002B     		cmp	r3, #0
 173 000c 01D1     		bne	.L10
 366:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 367:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_ERROR;
 174              		.loc 1 367 0
 175 000e 0123     		movs	r3, #1
 176 0010 4FE0     		b	.L11
 177              	.L10:
 368:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 369:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 370:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check UART instance */
 371:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
 372:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 373:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(huart->gState == HAL_UART_STATE_RESET)
 178              		.loc 1 373 0
 179 0012 7B68     		ldr	r3, [r7, #4]
 180 0014 6922     		movs	r2, #105
 181 0016 9B5C     		ldrb	r3, [r3, r2]
 182 0018 DBB2     		uxtb	r3, r3
 183 001a 002B     		cmp	r3, #0
 184 001c 07D1     		bne	.L12
 374:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 375:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 376:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 185              		.loc 1 376 0
 186 001e 7B68     		ldr	r3, [r7, #4]
 187 0020 6822     		movs	r2, #104
 188 0022 0021     		movs	r1, #0
 189 0024 9954     		strb	r1, [r3, r2]
 377:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 378:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 379:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 190              		.loc 1 379 0
 191 0026 7B68     		ldr	r3, [r7, #4]
 192 0028 1800     		movs	r0, r3
 193 002a FFF7FEFF 		bl	HAL_UART_MspInit
 194              	.L12:
ARM GAS  /tmp/cciBqq80.s 			page 11


 380:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 381:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 382:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 195              		.loc 1 382 0
 196 002e 7B68     		ldr	r3, [r7, #4]
 197 0030 6922     		movs	r2, #105
 198 0032 2421     		movs	r1, #36
 199 0034 9954     		strb	r1, [r3, r2]
 383:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 384:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Disable the Peripheral */
 385:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 200              		.loc 1 385 0
 201 0036 7B68     		ldr	r3, [r7, #4]
 202 0038 1B68     		ldr	r3, [r3]
 203 003a 7A68     		ldr	r2, [r7, #4]
 204 003c 1268     		ldr	r2, [r2]
 205 003e 1268     		ldr	r2, [r2]
 206 0040 0121     		movs	r1, #1
 207 0042 8A43     		bics	r2, r1
 208 0044 1A60     		str	r2, [r3]
 386:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 387:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Set the UART Communication parameters */
 388:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (UART_SetConfig(huart) == HAL_ERROR)
 209              		.loc 1 388 0
 210 0046 7B68     		ldr	r3, [r7, #4]
 211 0048 1800     		movs	r0, r3
 212 004a FFF7FEFF 		bl	UART_SetConfig
 213 004e 0300     		movs	r3, r0
 214 0050 012B     		cmp	r3, #1
 215 0052 01D1     		bne	.L13
 389:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 390:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_ERROR;
 216              		.loc 1 390 0
 217 0054 0123     		movs	r3, #1
 218 0056 2CE0     		b	.L11
 219              	.L13:
 391:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 392:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 393:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 220              		.loc 1 393 0
 221 0058 7B68     		ldr	r3, [r7, #4]
 222 005a 5B6A     		ldr	r3, [r3, #36]
 223 005c 002B     		cmp	r3, #0
 224 005e 03D0     		beq	.L14
 394:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 395:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     UART_AdvFeatureConfig(huart);
 225              		.loc 1 395 0
 226 0060 7B68     		ldr	r3, [r7, #4]
 227 0062 1800     		movs	r0, r3
 228 0064 FFF7FEFF 		bl	UART_AdvFeatureConfig
 229              	.L14:
 396:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 397:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 398:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* In half-duplex mode, the following bits must be kept cleared:
 399:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
 400:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   - SCEN (if Smartcard is supported), and IREN (if IrDA is supported)  bits in the USART_CR3 regist
 401:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if defined (USART_CR2_LINEN)
ARM GAS  /tmp/cciBqq80.s 			page 12


 402:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 230              		.loc 1 402 0
 231 0068 7B68     		ldr	r3, [r7, #4]
 232 006a 1B68     		ldr	r3, [r3]
 233 006c 7A68     		ldr	r2, [r7, #4]
 234 006e 1268     		ldr	r2, [r2]
 235 0070 5268     		ldr	r2, [r2, #4]
 236 0072 1249     		ldr	r1, .L15
 237 0074 0A40     		ands	r2, r1
 238 0076 5A60     		str	r2, [r3, #4]
 403:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
 404:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->Instance->CR2 &= ~(USART_CR2_CLKEN);
 405:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif
 406:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if defined (USART_CR3_SCEN)
 407:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if defined (USART_CR3_IREN)
 408:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_IREN);
 239              		.loc 1 408 0
 240 0078 7B68     		ldr	r3, [r7, #4]
 241 007a 1B68     		ldr	r3, [r3]
 242 007c 7A68     		ldr	r2, [r7, #4]
 243 007e 1268     		ldr	r2, [r2]
 244 0080 9268     		ldr	r2, [r2, #8]
 245 0082 2221     		movs	r1, #34
 246 0084 8A43     		bics	r2, r1
 247 0086 9A60     		str	r2, [r3, #8]
 409:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
 410:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->Instance->CR3 &= ~(USART_CR3_SCEN);
 411:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif
 412:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
 413:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if defined (USART_CR3_IREN)
 414:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->Instance->CR3 &= ~(USART_CR3_IREN);
 415:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif
 416:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif
 417:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 418:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
 419:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->Instance->CR3 |= USART_CR3_HDSEL;
 248              		.loc 1 419 0
 249 0088 7B68     		ldr	r3, [r7, #4]
 250 008a 1B68     		ldr	r3, [r3]
 251 008c 7A68     		ldr	r2, [r7, #4]
 252 008e 1268     		ldr	r2, [r2]
 253 0090 9268     		ldr	r2, [r2, #8]
 254 0092 0821     		movs	r1, #8
 255 0094 0A43     		orrs	r2, r1
 256 0096 9A60     		str	r2, [r3, #8]
 420:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 421:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Enable the Peripheral */
 422:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 257              		.loc 1 422 0
 258 0098 7B68     		ldr	r3, [r7, #4]
 259 009a 1B68     		ldr	r3, [r3]
 260 009c 7A68     		ldr	r2, [r7, #4]
 261 009e 1268     		ldr	r2, [r2]
 262 00a0 1268     		ldr	r2, [r2]
 263 00a2 0121     		movs	r1, #1
 264 00a4 0A43     		orrs	r2, r1
 265 00a6 1A60     		str	r2, [r3]
ARM GAS  /tmp/cciBqq80.s 			page 13


 423:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 424:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
 425:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return (UART_CheckIdleState(huart));
 266              		.loc 1 425 0
 267 00a8 7B68     		ldr	r3, [r7, #4]
 268 00aa 1800     		movs	r0, r3
 269 00ac FFF7FEFF 		bl	UART_CheckIdleState
 270 00b0 0300     		movs	r3, r0
 271              	.L11:
 426:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 272              		.loc 1 426 0
 273 00b2 1800     		movs	r0, r3
 274 00b4 BD46     		mov	sp, r7
 275 00b6 02B0     		add	sp, sp, #8
 276              		@ sp needed
 277 00b8 80BD     		pop	{r7, pc}
 278              	.L16:
 279 00ba C046     		.align	2
 280              	.L15:
 281 00bc FFB7FFFF 		.word	-18433
 282              		.cfi_endproc
 283              	.LFE36:
 285              		.section	.text.HAL_MultiProcessor_Init,"ax",%progbits
 286              		.align	1
 287              		.global	HAL_MultiProcessor_Init
 288              		.syntax unified
 289              		.code	16
 290              		.thumb_func
 291              		.fpu softvfp
 293              	HAL_MultiProcessor_Init:
 294              	.LFB37:
 427:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 428:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 429:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
 430:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Initialize the multiprocessor mode according to the specified
 431:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         parameters in the UART_InitTypeDef and initialize the associated handle.
 432:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart: UART handle.
 433:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param Address: UART node address (4-, 6-, 7- or 8-bit long).
 434:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param WakeUpMethod: specifies the UART wakeup method.
 435:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *        This parameter can be one of the following values:
 436:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *          @arg UART_WAKEUPMETHOD_IDLELINE: WakeUp by an idle line detection
 437:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *          @arg UART_WAKEUPMETHOD_ADDRESSMARK: WakeUp by an address mark
 438:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note  If the user resorts to idle line detection wake up, the Address parameter
 439:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *        is useless and ignored by the initialization function.
 440:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note  If the user resorts to address mark wake up, the address length detection
 441:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *        is configured by default to 4 bits only. For the UART to be able to
 442:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *        manage 6-, 7- or 8-bit long addresses detection, the API
 443:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *        HAL_MultiProcessorEx_AddressLength_Set() must be called after
 444:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *        HAL_MultiProcessor_Init().
 445:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
 446:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 447:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t Wake
 448:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 295              		.loc 1 448 0
 296              		.cfi_startproc
 297 0000 80B5     		push	{r7, lr}
 298              	.LCFI6:
ARM GAS  /tmp/cciBqq80.s 			page 14


 299              		.cfi_def_cfa_offset 8
 300              		.cfi_offset 7, -8
 301              		.cfi_offset 14, -4
 302 0002 84B0     		sub	sp, sp, #16
 303              	.LCFI7:
 304              		.cfi_def_cfa_offset 24
 305 0004 00AF     		add	r7, sp, #0
 306              	.LCFI8:
 307              		.cfi_def_cfa_register 7
 308 0006 F860     		str	r0, [r7, #12]
 309 0008 7A60     		str	r2, [r7, #4]
 310 000a 0B23     		movs	r3, #11
 311 000c FB18     		adds	r3, r7, r3
 312 000e 0A1C     		adds	r2, r1, #0
 313 0010 1A70     		strb	r2, [r3]
 449:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check the UART handle allocation */
 450:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(huart == NULL)
 314              		.loc 1 450 0
 315 0012 FB68     		ldr	r3, [r7, #12]
 316 0014 002B     		cmp	r3, #0
 317 0016 01D1     		bne	.L18
 451:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 452:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_ERROR;
 318              		.loc 1 452 0
 319 0018 0123     		movs	r3, #1
 320 001a 63E0     		b	.L19
 321              	.L18:
 453:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 454:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 455:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check the wake up method parameter */
 456:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 457:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 458:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(huart->gState == HAL_UART_STATE_RESET)
 322              		.loc 1 458 0
 323 001c FB68     		ldr	r3, [r7, #12]
 324 001e 6922     		movs	r2, #105
 325 0020 9B5C     		ldrb	r3, [r3, r2]
 326 0022 DBB2     		uxtb	r3, r3
 327 0024 002B     		cmp	r3, #0
 328 0026 07D1     		bne	.L20
 459:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 460:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 461:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 329              		.loc 1 461 0
 330 0028 FB68     		ldr	r3, [r7, #12]
 331 002a 6822     		movs	r2, #104
 332 002c 0021     		movs	r1, #0
 333 002e 9954     		strb	r1, [r3, r2]
 462:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 463:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 464:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 334              		.loc 1 464 0
 335 0030 FB68     		ldr	r3, [r7, #12]
 336 0032 1800     		movs	r0, r3
 337 0034 FFF7FEFF 		bl	HAL_UART_MspInit
 338              	.L20:
 465:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
ARM GAS  /tmp/cciBqq80.s 			page 15


 466:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 467:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 339              		.loc 1 467 0
 340 0038 FB68     		ldr	r3, [r7, #12]
 341 003a 6922     		movs	r2, #105
 342 003c 2421     		movs	r1, #36
 343 003e 9954     		strb	r1, [r3, r2]
 468:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 469:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Disable the Peripheral */
 470:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 344              		.loc 1 470 0
 345 0040 FB68     		ldr	r3, [r7, #12]
 346 0042 1B68     		ldr	r3, [r3]
 347 0044 FA68     		ldr	r2, [r7, #12]
 348 0046 1268     		ldr	r2, [r2]
 349 0048 1268     		ldr	r2, [r2]
 350 004a 0121     		movs	r1, #1
 351 004c 8A43     		bics	r2, r1
 352 004e 1A60     		str	r2, [r3]
 471:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 472:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Set the UART Communication parameters */
 473:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (UART_SetConfig(huart) == HAL_ERROR)
 353              		.loc 1 473 0
 354 0050 FB68     		ldr	r3, [r7, #12]
 355 0052 1800     		movs	r0, r3
 356 0054 FFF7FEFF 		bl	UART_SetConfig
 357 0058 0300     		movs	r3, r0
 358 005a 012B     		cmp	r3, #1
 359 005c 01D1     		bne	.L21
 474:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 475:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_ERROR;
 360              		.loc 1 475 0
 361 005e 0123     		movs	r3, #1
 362 0060 40E0     		b	.L19
 363              	.L21:
 476:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 477:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 478:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 364              		.loc 1 478 0
 365 0062 FB68     		ldr	r3, [r7, #12]
 366 0064 5B6A     		ldr	r3, [r3, #36]
 367 0066 002B     		cmp	r3, #0
 368 0068 03D0     		beq	.L22
 479:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 480:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     UART_AdvFeatureConfig(huart);
 369              		.loc 1 480 0
 370 006a FB68     		ldr	r3, [r7, #12]
 371 006c 1800     		movs	r0, r3
 372 006e FFF7FEFF 		bl	UART_AdvFeatureConfig
 373              	.L22:
 481:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 482:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 483:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* In multiprocessor mode, the following bits must be kept cleared:
 484:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
 485:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported) bits in the USART_CR3 r
 486:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if defined (USART_CR2_LINEN)
 487:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
ARM GAS  /tmp/cciBqq80.s 			page 16


 374              		.loc 1 487 0
 375 0072 FB68     		ldr	r3, [r7, #12]
 376 0074 1B68     		ldr	r3, [r3]
 377 0076 FA68     		ldr	r2, [r7, #12]
 378 0078 1268     		ldr	r2, [r2]
 379 007a 5268     		ldr	r2, [r2, #4]
 380 007c 1B49     		ldr	r1, .L24
 381 007e 0A40     		ands	r2, r1
 382 0080 5A60     		str	r2, [r3, #4]
 488:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
 489:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->Instance->CR2 &= ~(USART_CR2_CLKEN);
 490:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif
 491:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if defined (USART_CR3_SCEN)
 492:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if defined (USART_CR3_IREN)
 493:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 383              		.loc 1 493 0
 384 0082 FB68     		ldr	r3, [r7, #12]
 385 0084 1B68     		ldr	r3, [r3]
 386 0086 FA68     		ldr	r2, [r7, #12]
 387 0088 1268     		ldr	r2, [r2]
 388 008a 9268     		ldr	r2, [r2, #8]
 389 008c 2A21     		movs	r1, #42
 390 008e 8A43     		bics	r2, r1
 391 0090 9A60     		str	r2, [r3, #8]
 494:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
 495:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL);
 496:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif
 497:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
 498:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if defined (USART_CR3_IREN)
 499:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->Instance->CR3 &= ~(USART_CR3_HDSEL | USART_CR3_IREN);
 500:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
 501:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->Instance->CR3 &= ~(USART_CR3_HDSEL);
 502:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif
 503:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif
 504:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 505:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 392              		.loc 1 505 0
 393 0092 7A68     		ldr	r2, [r7, #4]
 394 0094 8023     		movs	r3, #128
 395 0096 1B01     		lsls	r3, r3, #4
 396 0098 9A42     		cmp	r2, r3
 397 009a 0CD1     		bne	.L23
 506:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 507:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* If address mark wake up method is chosen, set the USART address node */
 508:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS)
 398              		.loc 1 508 0
 399 009c FB68     		ldr	r3, [r7, #12]
 400 009e 1B68     		ldr	r3, [r3]
 401 00a0 FA68     		ldr	r2, [r7, #12]
 402 00a2 1268     		ldr	r2, [r2]
 403 00a4 5268     		ldr	r2, [r2, #4]
 404 00a6 1202     		lsls	r2, r2, #8
 405 00a8 110A     		lsrs	r1, r2, #8
 406 00aa 0B22     		movs	r2, #11
 407 00ac BA18     		adds	r2, r7, r2
 408 00ae 1278     		ldrb	r2, [r2]
 409 00b0 1206     		lsls	r2, r2, #24
ARM GAS  /tmp/cciBqq80.s 			page 17


 410 00b2 0A43     		orrs	r2, r1
 411 00b4 5A60     		str	r2, [r3, #4]
 412              	.L23:
 509:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 510:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 511:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Set the wake up method by setting the WAKE bit in the CR1 register */
 512:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 413              		.loc 1 512 0
 414 00b6 FB68     		ldr	r3, [r7, #12]
 415 00b8 1B68     		ldr	r3, [r3]
 416 00ba FA68     		ldr	r2, [r7, #12]
 417 00bc 1268     		ldr	r2, [r2]
 418 00be 1268     		ldr	r2, [r2]
 419 00c0 0B49     		ldr	r1, .L24+4
 420 00c2 1140     		ands	r1, r2
 421 00c4 7A68     		ldr	r2, [r7, #4]
 422 00c6 0A43     		orrs	r2, r1
 423 00c8 1A60     		str	r2, [r3]
 513:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 514:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Enable the Peripheral */
 515:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 424              		.loc 1 515 0
 425 00ca FB68     		ldr	r3, [r7, #12]
 426 00cc 1B68     		ldr	r3, [r3]
 427 00ce FA68     		ldr	r2, [r7, #12]
 428 00d0 1268     		ldr	r2, [r2]
 429 00d2 1268     		ldr	r2, [r2]
 430 00d4 0121     		movs	r1, #1
 431 00d6 0A43     		orrs	r2, r1
 432 00d8 1A60     		str	r2, [r3]
 516:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 517:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
 518:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return (UART_CheckIdleState(huart));
 433              		.loc 1 518 0
 434 00da FB68     		ldr	r3, [r7, #12]
 435 00dc 1800     		movs	r0, r3
 436 00de FFF7FEFF 		bl	UART_CheckIdleState
 437 00e2 0300     		movs	r3, r0
 438              	.L19:
 519:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 439              		.loc 1 519 0
 440 00e4 1800     		movs	r0, r3
 441 00e6 BD46     		mov	sp, r7
 442 00e8 04B0     		add	sp, sp, #16
 443              		@ sp needed
 444 00ea 80BD     		pop	{r7, pc}
 445              	.L25:
 446              		.align	2
 447              	.L24:
 448 00ec FFB7FFFF 		.word	-18433
 449 00f0 FFF7FFFF 		.word	-2049
 450              		.cfi_endproc
 451              	.LFE37:
 453              		.section	.text.HAL_UART_DeInit,"ax",%progbits
 454              		.align	1
 455              		.global	HAL_UART_DeInit
 456              		.syntax unified
ARM GAS  /tmp/cciBqq80.s 			page 18


 457              		.code	16
 458              		.thumb_func
 459              		.fpu softvfp
 461              	HAL_UART_DeInit:
 462              	.LFB38:
 520:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 521:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
 522:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief DeInitialize the UART peripheral.
 523:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart: UART handle.
 524:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
 525:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 526:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
 527:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 463              		.loc 1 527 0
 464              		.cfi_startproc
 465 0000 80B5     		push	{r7, lr}
 466              	.LCFI9:
 467              		.cfi_def_cfa_offset 8
 468              		.cfi_offset 7, -8
 469              		.cfi_offset 14, -4
 470 0002 82B0     		sub	sp, sp, #8
 471              	.LCFI10:
 472              		.cfi_def_cfa_offset 16
 473 0004 00AF     		add	r7, sp, #0
 474              	.LCFI11:
 475              		.cfi_def_cfa_register 7
 476 0006 7860     		str	r0, [r7, #4]
 528:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check the UART handle allocation */
 529:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(huart == NULL)
 477              		.loc 1 529 0
 478 0008 7B68     		ldr	r3, [r7, #4]
 479 000a 002B     		cmp	r3, #0
 480 000c 01D1     		bne	.L27
 530:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 531:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_ERROR;
 481              		.loc 1 531 0
 482 000e 0123     		movs	r3, #1
 483 0010 2BE0     		b	.L28
 484              	.L27:
 532:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 533:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 534:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check the parameters */
 535:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
 536:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 537:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 485              		.loc 1 537 0
 486 0012 7B68     		ldr	r3, [r7, #4]
 487 0014 6922     		movs	r2, #105
 488 0016 2421     		movs	r1, #36
 489 0018 9954     		strb	r1, [r3, r2]
 538:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 539:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Disable the Peripheral */
 540:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 490              		.loc 1 540 0
 491 001a 7B68     		ldr	r3, [r7, #4]
 492 001c 1B68     		ldr	r3, [r3]
 493 001e 7A68     		ldr	r2, [r7, #4]
ARM GAS  /tmp/cciBqq80.s 			page 19


 494 0020 1268     		ldr	r2, [r2]
 495 0022 1268     		ldr	r2, [r2]
 496 0024 0121     		movs	r1, #1
 497 0026 8A43     		bics	r2, r1
 498 0028 1A60     		str	r2, [r3]
 541:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 542:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->Instance->CR1 = 0x0;
 499              		.loc 1 542 0
 500 002a 7B68     		ldr	r3, [r7, #4]
 501 002c 1B68     		ldr	r3, [r3]
 502 002e 0022     		movs	r2, #0
 503 0030 1A60     		str	r2, [r3]
 543:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->Instance->CR2 = 0x0;
 504              		.loc 1 543 0
 505 0032 7B68     		ldr	r3, [r7, #4]
 506 0034 1B68     		ldr	r3, [r3]
 507 0036 0022     		movs	r2, #0
 508 0038 5A60     		str	r2, [r3, #4]
 544:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->Instance->CR3 = 0x0;
 509              		.loc 1 544 0
 510 003a 7B68     		ldr	r3, [r7, #4]
 511 003c 1B68     		ldr	r3, [r3]
 512 003e 0022     		movs	r2, #0
 513 0040 9A60     		str	r2, [r3, #8]
 545:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 546:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* DeInit the low level hardware */
 547:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   HAL_UART_MspDeInit(huart);
 514              		.loc 1 547 0
 515 0042 7B68     		ldr	r3, [r7, #4]
 516 0044 1800     		movs	r0, r3
 517 0046 FFF7FEFF 		bl	HAL_UART_MspDeInit
 548:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 549:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 518              		.loc 1 549 0
 519 004a 7B68     		ldr	r3, [r7, #4]
 520 004c 0022     		movs	r2, #0
 521 004e DA66     		str	r2, [r3, #108]
 550:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_RESET;
 522              		.loc 1 550 0
 523 0050 7B68     		ldr	r3, [r7, #4]
 524 0052 6922     		movs	r2, #105
 525 0054 0021     		movs	r1, #0
 526 0056 9954     		strb	r1, [r3, r2]
 551:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_RESET;
 527              		.loc 1 551 0
 528 0058 7B68     		ldr	r3, [r7, #4]
 529 005a 6A22     		movs	r2, #106
 530 005c 0021     		movs	r1, #0
 531 005e 9954     		strb	r1, [r3, r2]
 552:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 553:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Process Unlock */
 554:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 532              		.loc 1 554 0
 533 0060 7B68     		ldr	r3, [r7, #4]
 534 0062 6822     		movs	r2, #104
 535 0064 0021     		movs	r1, #0
 536 0066 9954     		strb	r1, [r3, r2]
ARM GAS  /tmp/cciBqq80.s 			page 20


 555:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 556:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return HAL_OK;
 537              		.loc 1 556 0
 538 0068 0023     		movs	r3, #0
 539              	.L28:
 557:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 540              		.loc 1 557 0
 541 006a 1800     		movs	r0, r3
 542 006c BD46     		mov	sp, r7
 543 006e 02B0     		add	sp, sp, #8
 544              		@ sp needed
 545 0070 80BD     		pop	{r7, pc}
 546              		.cfi_endproc
 547              	.LFE38:
 549              		.section	.text.HAL_UART_MspInit,"ax",%progbits
 550              		.align	1
 551              		.weak	HAL_UART_MspInit
 552              		.syntax unified
 553              		.code	16
 554              		.thumb_func
 555              		.fpu softvfp
 557              	HAL_UART_MspInit:
 558              	.LFB39:
 558:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 559:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
 560:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Initialize the UART MSP.
 561:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart: UART handle.
 562:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
 563:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 564:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****  __weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
 565:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 559              		.loc 1 565 0
 560              		.cfi_startproc
 561 0000 80B5     		push	{r7, lr}
 562              	.LCFI12:
 563              		.cfi_def_cfa_offset 8
 564              		.cfi_offset 7, -8
 565              		.cfi_offset 14, -4
 566 0002 82B0     		sub	sp, sp, #8
 567              	.LCFI13:
 568              		.cfi_def_cfa_offset 16
 569 0004 00AF     		add	r7, sp, #0
 570              	.LCFI14:
 571              		.cfi_def_cfa_register 7
 572 0006 7860     		str	r0, [r7, #4]
 566:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 567:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UNUSED(huart);
 568:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 569:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 570:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             the HAL_UART_MspInit can be implemented in the user file
 571:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****    */
 572:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 573              		.loc 1 572 0
 574 0008 C046     		nop
 575 000a BD46     		mov	sp, r7
 576 000c 02B0     		add	sp, sp, #8
 577              		@ sp needed
ARM GAS  /tmp/cciBqq80.s 			page 21


 578 000e 80BD     		pop	{r7, pc}
 579              		.cfi_endproc
 580              	.LFE39:
 582              		.section	.text.HAL_UART_MspDeInit,"ax",%progbits
 583              		.align	1
 584              		.weak	HAL_UART_MspDeInit
 585              		.syntax unified
 586              		.code	16
 587              		.thumb_func
 588              		.fpu softvfp
 590              	HAL_UART_MspDeInit:
 591              	.LFB40:
 573:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 574:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
 575:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief DeInitialize the UART MSP.
 576:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart: UART handle.
 577:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
 578:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 579:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****  __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
 580:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 592              		.loc 1 580 0
 593              		.cfi_startproc
 594 0000 80B5     		push	{r7, lr}
 595              	.LCFI15:
 596              		.cfi_def_cfa_offset 8
 597              		.cfi_offset 7, -8
 598              		.cfi_offset 14, -4
 599 0002 82B0     		sub	sp, sp, #8
 600              	.LCFI16:
 601              		.cfi_def_cfa_offset 16
 602 0004 00AF     		add	r7, sp, #0
 603              	.LCFI17:
 604              		.cfi_def_cfa_register 7
 605 0006 7860     		str	r0, [r7, #4]
 581:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 582:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UNUSED(huart);
 583:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 584:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 585:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             the HAL_UART_MspDeInit can be implemented in the user file
 586:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****    */
 587:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 606              		.loc 1 587 0
 607 0008 C046     		nop
 608 000a BD46     		mov	sp, r7
 609 000c 02B0     		add	sp, sp, #8
 610              		@ sp needed
 611 000e 80BD     		pop	{r7, pc}
 612              		.cfi_endproc
 613              	.LFE40:
 615              		.section	.text.HAL_UART_Transmit,"ax",%progbits
 616              		.align	1
 617              		.global	HAL_UART_Transmit
 618              		.syntax unified
 619              		.code	16
 620              		.thumb_func
 621              		.fpu softvfp
 623              	HAL_UART_Transmit:
ARM GAS  /tmp/cciBqq80.s 			page 22


 624              	.LFB41:
 588:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 589:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
 590:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @}
 591:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 592:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 593:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group2 IO operation functions
 594:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *  @brief UART Transmit/Receive functions
 595:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *
 596:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** @verbatim
 597:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****  ===============================================================================
 598:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****                       ##### IO operation functions #####
 599:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****  ===============================================================================
 600:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     This subsection provides a set of functions allowing to manage the UART asynchronous
 601:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     and Half duplex data transfers.
 602:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 603:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (#) There are two mode of transfer:
 604:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        (+) Blocking mode: The communication is performed in polling mode.
 605:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             The HAL status of all data processing is returned by the same function
 606:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             after finishing transfer.
 607:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        (+) No-Blocking mode: The communication is performed using Interrupts
 608:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****            or DMA, These API's return the HAL status.
 609:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****            The end of the data processing will be indicated through the
 610:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****            dedicated UART IRQ when using Interrupt mode or the DMA IRQ when
 611:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****            using DMA mode.
 612:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****            The HAL_UART_TxCpltCallback(), HAL_UART_RxCpltCallback() user callbacks
 613:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****            will be executed respectively at the end of the transmit or Receive process
 614:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****            The HAL_UART_ErrorCallback()user callback will be executed when a communication error is
 615:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 616:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (#) Blocking mode API's are :
 617:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (+) HAL_UART_Transmit()
 618:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (+) HAL_UART_Receive()
 619:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 620:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (#) Non-Blocking mode API's with Interrupt are :
 621:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (+) HAL_UART_Transmit_IT()
 622:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (+) HAL_UART_Receive_IT()
 623:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (+) HAL_UART_IRQHandler()
 624:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 625:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (#) No-Blocking mode API's with DMA are :
 626:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (+) HAL_UART_Transmit_DMA()
 627:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (+) HAL_UART_Receive_DMA()
 628:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (+) HAL_UART_DMAPause()
 629:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (+) HAL_UART_DMAResume()
 630:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (+) HAL_UART_DMAStop()
 631:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 632:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (#) A set of Transfer Complete Callbacks are provided in No_Blocking mode:
 633:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (+) HAL_UART_TxHalfCpltCallback()
 634:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (+) HAL_UART_TxCpltCallback()
 635:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (+) HAL_UART_RxHalfCpltCallback()
 636:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (+) HAL_UART_RxCpltCallback()
 637:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (+) HAL_UART_ErrorCallback()
 638:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 639:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 640:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     -@- In the Half duplex communication, it is forbidden to run the transmit
 641:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         and receive process in parallel, the UART state HAL_UART_STATE_BUSY_TX_RX can't be useful.
 642:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 643:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** @endverbatim
ARM GAS  /tmp/cciBqq80.s 			page 23


 644:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @{
 645:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 646:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 647:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
 648:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Send an amount of data in blocking mode.
 649:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart: UART handle.
 650:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param pData: Pointer to data buffer.
 651:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param Size: Amount of data to be sent.
 652:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param Timeout: Timeout duration.
 653:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
 654:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         address of user data buffer containing data to be sent, should be aligned on a half wor
 655:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
 656:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         use of specific alignment compilation directives or pragmas might be required to ensure
 657:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
 658:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 659:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint3
 660:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 625              		.loc 1 660 0
 626              		.cfi_startproc
 627 0000 80B5     		push	{r7, lr}
 628              	.LCFI18:
 629              		.cfi_def_cfa_offset 8
 630              		.cfi_offset 7, -8
 631              		.cfi_offset 14, -4
 632 0002 86B0     		sub	sp, sp, #24
 633              	.LCFI19:
 634              		.cfi_def_cfa_offset 32
 635 0004 00AF     		add	r7, sp, #0
 636              	.LCFI20:
 637              		.cfi_def_cfa_register 7
 638 0006 F860     		str	r0, [r7, #12]
 639 0008 B960     		str	r1, [r7, #8]
 640 000a 3B60     		str	r3, [r7]
 641 000c BB1D     		adds	r3, r7, #6
 642 000e 1A80     		strh	r2, [r3]
 661:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****    uint16_t* tmp;
 662:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 663:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
 664:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(huart->gState == HAL_UART_STATE_READY)
 643              		.loc 1 664 0
 644 0010 FB68     		ldr	r3, [r7, #12]
 645 0012 6922     		movs	r2, #105
 646 0014 9B5C     		ldrb	r3, [r3, r2]
 647 0016 DBB2     		uxtb	r3, r3
 648 0018 202B     		cmp	r3, #32
 649 001a 00D0     		beq	.LCB557
 650 001c 80E0     		b	.L32	@long jump
 651              	.LCB557:
 665:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 666:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if((pData == NULL ) || (Size == 0))
 652              		.loc 1 666 0
 653 001e BB68     		ldr	r3, [r7, #8]
 654 0020 002B     		cmp	r3, #0
 655 0022 03D0     		beq	.L33
 656              		.loc 1 666 0 is_stmt 0 discriminator 1
 657 0024 BB1D     		adds	r3, r7, #6
 658 0026 1B88     		ldrh	r3, [r3]
ARM GAS  /tmp/cciBqq80.s 			page 24


 659 0028 002B     		cmp	r3, #0
 660 002a 01D1     		bne	.L34
 661              	.L33:
 667:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 668:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       return  HAL_ERROR;
 662              		.loc 1 668 0 is_stmt 1
 663 002c 0123     		movs	r3, #1
 664 002e 78E0     		b	.L35
 665              	.L34:
 669:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 670:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 671:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
 672:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        should be aligned on a u16 frontier, as data to be filled into TDR will be 
 673:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        handled through a u16 cast. */
 674:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 666              		.loc 1 674 0
 667 0030 FB68     		ldr	r3, [r7, #12]
 668 0032 9A68     		ldr	r2, [r3, #8]
 669 0034 8023     		movs	r3, #128
 670 0036 5B01     		lsls	r3, r3, #5
 671 0038 9A42     		cmp	r2, r3
 672 003a 09D1     		bne	.L36
 673              		.loc 1 674 0 is_stmt 0 discriminator 1
 674 003c FB68     		ldr	r3, [r7, #12]
 675 003e 1B69     		ldr	r3, [r3, #16]
 676 0040 002B     		cmp	r3, #0
 677 0042 05D1     		bne	.L36
 675:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 676:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if((((uint32_t)pData)&1) != 0)
 678              		.loc 1 676 0 is_stmt 1
 679 0044 BB68     		ldr	r3, [r7, #8]
 680 0046 0122     		movs	r2, #1
 681 0048 1340     		ands	r3, r2
 682 004a 01D0     		beq	.L36
 677:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
 678:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         return  HAL_ERROR;
 683              		.loc 1 678 0
 684 004c 0123     		movs	r3, #1
 685 004e 68E0     		b	.L35
 686              	.L36:
 679:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
 680:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 681:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 682:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Process Locked */
 683:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_LOCK(huart);
 687              		.loc 1 683 0
 688 0050 FB68     		ldr	r3, [r7, #12]
 689 0052 6822     		movs	r2, #104
 690 0054 9B5C     		ldrb	r3, [r3, r2]
 691 0056 012B     		cmp	r3, #1
 692 0058 01D1     		bne	.L37
 693              		.loc 1 683 0 is_stmt 0 discriminator 1
 694 005a 0223     		movs	r3, #2
 695 005c 61E0     		b	.L35
 696              	.L37:
 697              		.loc 1 683 0 discriminator 2
 698 005e FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/cciBqq80.s 			page 25


 699 0060 6822     		movs	r2, #104
 700 0062 0121     		movs	r1, #1
 701 0064 9954     		strb	r1, [r3, r2]
 684:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 685:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 702              		.loc 1 685 0 is_stmt 1 discriminator 2
 703 0066 FB68     		ldr	r3, [r7, #12]
 704 0068 0022     		movs	r2, #0
 705 006a DA66     		str	r2, [r3, #108]
 686:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 706              		.loc 1 686 0 discriminator 2
 707 006c FB68     		ldr	r3, [r7, #12]
 708 006e 6922     		movs	r2, #105
 709 0070 2121     		movs	r1, #33
 710 0072 9954     		strb	r1, [r3, r2]
 687:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 688:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->TxXferSize = Size;
 711              		.loc 1 688 0 discriminator 2
 712 0074 FB68     		ldr	r3, [r7, #12]
 713 0076 BA1D     		adds	r2, r7, #6
 714 0078 5021     		movs	r1, #80
 715 007a 1288     		ldrh	r2, [r2]
 716 007c 5A52     		strh	r2, [r3, r1]
 689:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->TxXferCount = Size;
 717              		.loc 1 689 0 discriminator 2
 718 007e FB68     		ldr	r3, [r7, #12]
 719 0080 BA1D     		adds	r2, r7, #6
 720 0082 5221     		movs	r1, #82
 721 0084 1288     		ldrh	r2, [r2]
 722 0086 5A52     		strh	r2, [r3, r1]
 690:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     while(huart->TxXferCount > 0)
 723              		.loc 1 690 0 discriminator 2
 724 0088 31E0     		b	.L38
 725              	.L41:
 691:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 692:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->TxXferCount--;
 726              		.loc 1 692 0
 727 008a FB68     		ldr	r3, [r7, #12]
 728 008c 5222     		movs	r2, #82
 729 008e 9B5A     		ldrh	r3, [r3, r2]
 730 0090 013B     		subs	r3, r3, #1
 731 0092 99B2     		uxth	r1, r3
 732 0094 FB68     		ldr	r3, [r7, #12]
 733 0096 5222     		movs	r2, #82
 734 0098 9952     		strh	r1, [r3, r2]
 693:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 735              		.loc 1 693 0
 736 009a 3B68     		ldr	r3, [r7]
 737 009c F868     		ldr	r0, [r7, #12]
 738 009e 0022     		movs	r2, #0
 739 00a0 8021     		movs	r1, #128
 740 00a2 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 741 00a6 031E     		subs	r3, r0, #0
 742 00a8 01D0     		beq	.L39
 694:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
 695:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         return HAL_TIMEOUT;
 743              		.loc 1 695 0
ARM GAS  /tmp/cciBqq80.s 			page 26


 744 00aa 0323     		movs	r3, #3
 745 00ac 39E0     		b	.L35
 746              	.L39:
 696:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
 697:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE
 747              		.loc 1 697 0
 748 00ae FB68     		ldr	r3, [r7, #12]
 749 00b0 9A68     		ldr	r2, [r3, #8]
 750 00b2 8023     		movs	r3, #128
 751 00b4 5B01     		lsls	r3, r3, #5
 752 00b6 9A42     		cmp	r2, r3
 753 00b8 11D1     		bne	.L40
 754              		.loc 1 697 0 is_stmt 0 discriminator 1
 755 00ba FB68     		ldr	r3, [r7, #12]
 756 00bc 1B69     		ldr	r3, [r3, #16]
 757 00be 002B     		cmp	r3, #0
 758 00c0 0DD1     		bne	.L40
 698:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
 699:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         tmp = (uint16_t*) pData;
 759              		.loc 1 699 0 is_stmt 1
 760 00c2 BB68     		ldr	r3, [r7, #8]
 761 00c4 7B61     		str	r3, [r7, #20]
 700:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 762              		.loc 1 700 0
 763 00c6 FB68     		ldr	r3, [r7, #12]
 764 00c8 1B68     		ldr	r3, [r3]
 765 00ca 7A69     		ldr	r2, [r7, #20]
 766 00cc 1288     		ldrh	r2, [r2]
 767 00ce D205     		lsls	r2, r2, #23
 768 00d0 D20D     		lsrs	r2, r2, #23
 769 00d2 92B2     		uxth	r2, r2
 770 00d4 1A85     		strh	r2, [r3, #40]
 701:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         pData += 2;
 771              		.loc 1 701 0
 772 00d6 BB68     		ldr	r3, [r7, #8]
 773 00d8 0233     		adds	r3, r3, #2
 774 00da BB60     		str	r3, [r7, #8]
 775 00dc 07E0     		b	.L38
 776              	.L40:
 702:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
 703:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       else
 704:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
 705:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 777              		.loc 1 705 0
 778 00de FB68     		ldr	r3, [r7, #12]
 779 00e0 1A68     		ldr	r2, [r3]
 780 00e2 BB68     		ldr	r3, [r7, #8]
 781 00e4 591C     		adds	r1, r3, #1
 782 00e6 B960     		str	r1, [r7, #8]
 783 00e8 1B78     		ldrb	r3, [r3]
 784 00ea 9BB2     		uxth	r3, r3
 785 00ec 1385     		strh	r3, [r2, #40]
 786              	.L38:
 690:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 787              		.loc 1 690 0
 788 00ee FB68     		ldr	r3, [r7, #12]
 789 00f0 5222     		movs	r2, #82
ARM GAS  /tmp/cciBqq80.s 			page 27


 790 00f2 9B5A     		ldrh	r3, [r3, r2]
 791 00f4 002B     		cmp	r3, #0
 792 00f6 C8D1     		bne	.L41
 706:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
 707:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 708:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 793              		.loc 1 708 0
 794 00f8 3B68     		ldr	r3, [r7]
 795 00fa F868     		ldr	r0, [r7, #12]
 796 00fc 0022     		movs	r2, #0
 797 00fe 4021     		movs	r1, #64
 798 0100 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 799 0104 031E     		subs	r3, r0, #0
 800 0106 01D0     		beq	.L42
 709:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 710:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       return HAL_TIMEOUT;
 801              		.loc 1 710 0
 802 0108 0323     		movs	r3, #3
 803 010a 0AE0     		b	.L35
 804              	.L42:
 711:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 712:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 713:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* At end of Tx process, restore huart->gState to Ready */
 714:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_READY;
 805              		.loc 1 714 0
 806 010c FB68     		ldr	r3, [r7, #12]
 807 010e 6922     		movs	r2, #105
 808 0110 2021     		movs	r1, #32
 809 0112 9954     		strb	r1, [r3, r2]
 715:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 716:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Process Unlocked */
 717:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 810              		.loc 1 717 0
 811 0114 FB68     		ldr	r3, [r7, #12]
 812 0116 6822     		movs	r2, #104
 813 0118 0021     		movs	r1, #0
 814 011a 9954     		strb	r1, [r3, r2]
 718:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 719:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_OK;
 815              		.loc 1 719 0
 816 011c 0023     		movs	r3, #0
 817 011e 00E0     		b	.L35
 818              	.L32:
 720:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 721:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   else
 722:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 723:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_BUSY;
 819              		.loc 1 723 0
 820 0120 0223     		movs	r3, #2
 821              	.L35:
 724:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 725:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 822              		.loc 1 725 0
 823 0122 1800     		movs	r0, r3
 824 0124 BD46     		mov	sp, r7
 825 0126 06B0     		add	sp, sp, #24
 826              		@ sp needed
ARM GAS  /tmp/cciBqq80.s 			page 28


 827 0128 80BD     		pop	{r7, pc}
 828              		.cfi_endproc
 829              	.LFE41:
 831              		.section	.text.HAL_UART_Receive,"ax",%progbits
 832              		.align	1
 833              		.global	HAL_UART_Receive
 834              		.syntax unified
 835              		.code	16
 836              		.thumb_func
 837              		.fpu softvfp
 839              	HAL_UART_Receive:
 840              	.LFB42:
 726:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 727:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
 728:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Receive an amount of data in blocking mode.
 729:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart: UART handle.
 730:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param pData: pointer to data buffer.
 731:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param Size: amount of data to be received.
 732:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param Timeout: Timeout duration.
 733:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
 734:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         address of user data buffer for storing data to be received, should be aligned on a hal
 735:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         (as received data will be handled using u16 pointer cast). Depending on compilation cha
 736:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         use of specific alignment compilation directives or pragmas might be required to ensure
 737:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
 738:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 739:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32
 740:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 841              		.loc 1 740 0
 842              		.cfi_startproc
 843 0000 80B5     		push	{r7, lr}
 844              	.LCFI21:
 845              		.cfi_def_cfa_offset 8
 846              		.cfi_offset 7, -8
 847              		.cfi_offset 14, -4
 848 0002 86B0     		sub	sp, sp, #24
 849              	.LCFI22:
 850              		.cfi_def_cfa_offset 32
 851 0004 00AF     		add	r7, sp, #0
 852              	.LCFI23:
 853              		.cfi_def_cfa_register 7
 854 0006 F860     		str	r0, [r7, #12]
 855 0008 B960     		str	r1, [r7, #8]
 856 000a 3B60     		str	r3, [r7]
 857 000c BB1D     		adds	r3, r7, #6
 858 000e 1A80     		strh	r2, [r3]
 741:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint16_t* tmp;
 742:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint16_t uhMask;
 743:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 744:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
 745:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(huart->RxState == HAL_UART_STATE_READY)
 859              		.loc 1 745 0
 860 0010 FB68     		ldr	r3, [r7, #12]
 861 0012 6A22     		movs	r2, #106
 862 0014 9B5C     		ldrb	r3, [r3, r2]
 863 0016 DBB2     		uxtb	r3, r3
 864 0018 202B     		cmp	r3, #32
 865 001a 00D0     		beq	.LCB754
ARM GAS  /tmp/cciBqq80.s 			page 29


 866 001c BFE0     		b	.L44	@long jump
 867              	.LCB754:
 746:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 747:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if((pData == NULL ) || (Size == 0))
 868              		.loc 1 747 0
 869 001e BB68     		ldr	r3, [r7, #8]
 870 0020 002B     		cmp	r3, #0
 871 0022 03D0     		beq	.L45
 872              		.loc 1 747 0 is_stmt 0 discriminator 1
 873 0024 BB1D     		adds	r3, r7, #6
 874 0026 1B88     		ldrh	r3, [r3]
 875 0028 002B     		cmp	r3, #0
 876 002a 01D1     		bne	.L46
 877              	.L45:
 748:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 749:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       return  HAL_ERROR;
 878              		.loc 1 749 0 is_stmt 1
 879 002c 0123     		movs	r3, #1
 880 002e B7E0     		b	.L47
 881              	.L46:
 750:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 751:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 752:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
 753:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        should be aligned on a u16 frontier, as data to be received from RDR will be 
 754:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        handled through a u16 cast. */
 755:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 882              		.loc 1 755 0
 883 0030 FB68     		ldr	r3, [r7, #12]
 884 0032 9A68     		ldr	r2, [r3, #8]
 885 0034 8023     		movs	r3, #128
 886 0036 5B01     		lsls	r3, r3, #5
 887 0038 9A42     		cmp	r2, r3
 888 003a 09D1     		bne	.L48
 889              		.loc 1 755 0 is_stmt 0 discriminator 1
 890 003c FB68     		ldr	r3, [r7, #12]
 891 003e 1B69     		ldr	r3, [r3, #16]
 892 0040 002B     		cmp	r3, #0
 893 0042 05D1     		bne	.L48
 756:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 757:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if((((uint32_t)pData)&1) != 0)
 894              		.loc 1 757 0 is_stmt 1
 895 0044 BB68     		ldr	r3, [r7, #8]
 896 0046 0122     		movs	r2, #1
 897 0048 1340     		ands	r3, r2
 898 004a 01D0     		beq	.L48
 758:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
 759:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         return  HAL_ERROR;
 899              		.loc 1 759 0
 900 004c 0123     		movs	r3, #1
 901 004e A7E0     		b	.L47
 902              	.L48:
 760:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
 761:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 762:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 763:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Process Locked */
 764:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_LOCK(huart);
 903              		.loc 1 764 0
ARM GAS  /tmp/cciBqq80.s 			page 30


 904 0050 FB68     		ldr	r3, [r7, #12]
 905 0052 6822     		movs	r2, #104
 906 0054 9B5C     		ldrb	r3, [r3, r2]
 907 0056 012B     		cmp	r3, #1
 908 0058 01D1     		bne	.L49
 909              		.loc 1 764 0 is_stmt 0 discriminator 1
 910 005a 0223     		movs	r3, #2
 911 005c A0E0     		b	.L47
 912              	.L49:
 913              		.loc 1 764 0 discriminator 2
 914 005e FB68     		ldr	r3, [r7, #12]
 915 0060 6822     		movs	r2, #104
 916 0062 0121     		movs	r1, #1
 917 0064 9954     		strb	r1, [r3, r2]
 765:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 766:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 918              		.loc 1 766 0 is_stmt 1 discriminator 2
 919 0066 FB68     		ldr	r3, [r7, #12]
 920 0068 0022     		movs	r2, #0
 921 006a DA66     		str	r2, [r3, #108]
 767:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 922              		.loc 1 767 0 discriminator 2
 923 006c FB68     		ldr	r3, [r7, #12]
 924 006e 6A22     		movs	r2, #106
 925 0070 2221     		movs	r1, #34
 926 0072 9954     		strb	r1, [r3, r2]
 768:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 769:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxXferSize = Size;
 927              		.loc 1 769 0 discriminator 2
 928 0074 FB68     		ldr	r3, [r7, #12]
 929 0076 BA1D     		adds	r2, r7, #6
 930 0078 5821     		movs	r1, #88
 931 007a 1288     		ldrh	r2, [r2]
 932 007c 5A52     		strh	r2, [r3, r1]
 770:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxXferCount = Size;
 933              		.loc 1 770 0 discriminator 2
 934 007e FB68     		ldr	r3, [r7, #12]
 935 0080 BA1D     		adds	r2, r7, #6
 936 0082 5A21     		movs	r1, #90
 937 0084 1288     		ldrh	r2, [r2]
 938 0086 5A52     		strh	r2, [r3, r1]
 771:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 772:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Computation of UART mask to apply to RDR register */
 773:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     UART_MASK_COMPUTATION(huart);
 939              		.loc 1 773 0 discriminator 2
 940 0088 FB68     		ldr	r3, [r7, #12]
 941 008a 9A68     		ldr	r2, [r3, #8]
 942 008c 8023     		movs	r3, #128
 943 008e 5B01     		lsls	r3, r3, #5
 944 0090 9A42     		cmp	r2, r3
 945 0092 0DD1     		bne	.L50
 946              		.loc 1 773 0 is_stmt 0 discriminator 1
 947 0094 FB68     		ldr	r3, [r7, #12]
 948 0096 1B69     		ldr	r3, [r3, #16]
 949 0098 002B     		cmp	r3, #0
 950 009a 04D1     		bne	.L51
 951              		.loc 1 773 0 discriminator 3
ARM GAS  /tmp/cciBqq80.s 			page 31


 952 009c FB68     		ldr	r3, [r7, #12]
 953 009e 5C22     		movs	r2, #92
 954 00a0 4149     		ldr	r1, .L62
 955 00a2 9952     		strh	r1, [r3, r2]
 956 00a4 29E0     		b	.L53
 957              	.L51:
 958              		.loc 1 773 0 discriminator 4
 959 00a6 FB68     		ldr	r3, [r7, #12]
 960 00a8 5C22     		movs	r2, #92
 961 00aa FF21     		movs	r1, #255
 962 00ac 9952     		strh	r1, [r3, r2]
 963 00ae 24E0     		b	.L53
 964              	.L50:
 965              		.loc 1 773 0 discriminator 2
 966 00b0 FB68     		ldr	r3, [r7, #12]
 967 00b2 9B68     		ldr	r3, [r3, #8]
 968 00b4 002B     		cmp	r3, #0
 969 00b6 0DD1     		bne	.L54
 970              		.loc 1 773 0 discriminator 5
 971 00b8 FB68     		ldr	r3, [r7, #12]
 972 00ba 1B69     		ldr	r3, [r3, #16]
 973 00bc 002B     		cmp	r3, #0
 974 00be 04D1     		bne	.L55
 975              		.loc 1 773 0 discriminator 7
 976 00c0 FB68     		ldr	r3, [r7, #12]
 977 00c2 5C22     		movs	r2, #92
 978 00c4 FF21     		movs	r1, #255
 979 00c6 9952     		strh	r1, [r3, r2]
 980 00c8 17E0     		b	.L53
 981              	.L55:
 982              		.loc 1 773 0 discriminator 8
 983 00ca FB68     		ldr	r3, [r7, #12]
 984 00cc 5C22     		movs	r2, #92
 985 00ce 7F21     		movs	r1, #127
 986 00d0 9952     		strh	r1, [r3, r2]
 987 00d2 12E0     		b	.L53
 988              	.L54:
 989              		.loc 1 773 0 discriminator 6
 990 00d4 FB68     		ldr	r3, [r7, #12]
 991 00d6 9A68     		ldr	r2, [r3, #8]
 992 00d8 8023     		movs	r3, #128
 993 00da 5B05     		lsls	r3, r3, #21
 994 00dc 9A42     		cmp	r2, r3
 995 00de 0CD1     		bne	.L53
 996              		.loc 1 773 0 discriminator 9
 997 00e0 FB68     		ldr	r3, [r7, #12]
 998 00e2 1B69     		ldr	r3, [r3, #16]
 999 00e4 002B     		cmp	r3, #0
 1000 00e6 04D1     		bne	.L57
 1001              		.loc 1 773 0 discriminator 10
 1002 00e8 FB68     		ldr	r3, [r7, #12]
 1003 00ea 5C22     		movs	r2, #92
 1004 00ec 7F21     		movs	r1, #127
 1005 00ee 9952     		strh	r1, [r3, r2]
 1006 00f0 03E0     		b	.L53
 1007              	.L57:
 1008              		.loc 1 773 0 discriminator 11
ARM GAS  /tmp/cciBqq80.s 			page 32


 1009 00f2 FB68     		ldr	r3, [r7, #12]
 1010 00f4 5C22     		movs	r2, #92
 1011 00f6 3F21     		movs	r1, #63
 1012 00f8 9952     		strh	r1, [r3, r2]
 1013              	.L53:
 774:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     uhMask = huart->Mask;
 1014              		.loc 1 774 0 is_stmt 1
 1015 00fa 1623     		movs	r3, #22
 1016 00fc FB18     		adds	r3, r7, r3
 1017 00fe FA68     		ldr	r2, [r7, #12]
 1018 0100 5C21     		movs	r1, #92
 1019 0102 525A     		ldrh	r2, [r2, r1]
 1020 0104 1A80     		strh	r2, [r3]
 775:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 776:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* as long as data have to be received */
 777:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     while(huart->RxXferCount > 0)
 1021              		.loc 1 777 0
 1022 0106 3BE0     		b	.L58
 1023              	.L61:
 778:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 779:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->RxXferCount--;
 1024              		.loc 1 779 0
 1025 0108 FB68     		ldr	r3, [r7, #12]
 1026 010a 5A22     		movs	r2, #90
 1027 010c 9B5A     		ldrh	r3, [r3, r2]
 1028 010e 013B     		subs	r3, r3, #1
 1029 0110 99B2     		uxth	r1, r3
 1030 0112 FB68     		ldr	r3, [r7, #12]
 1031 0114 5A22     		movs	r2, #90
 1032 0116 9952     		strh	r1, [r3, r2]
 780:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 1033              		.loc 1 780 0
 1034 0118 3B68     		ldr	r3, [r7]
 1035 011a F868     		ldr	r0, [r7, #12]
 1036 011c 0022     		movs	r2, #0
 1037 011e 2021     		movs	r1, #32
 1038 0120 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 1039 0124 031E     		subs	r3, r0, #0
 1040 0126 01D0     		beq	.L59
 781:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
 782:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         return HAL_TIMEOUT;
 1041              		.loc 1 782 0
 1042 0128 0323     		movs	r3, #3
 1043 012a 39E0     		b	.L47
 1044              	.L59:
 783:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
 784:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE
 1045              		.loc 1 784 0
 1046 012c FB68     		ldr	r3, [r7, #12]
 1047 012e 9A68     		ldr	r2, [r3, #8]
 1048 0130 8023     		movs	r3, #128
 1049 0132 5B01     		lsls	r3, r3, #5
 1050 0134 9A42     		cmp	r2, r3
 1051 0136 14D1     		bne	.L60
 1052              		.loc 1 784 0 is_stmt 0 discriminator 1
 1053 0138 FB68     		ldr	r3, [r7, #12]
 1054 013a 1B69     		ldr	r3, [r3, #16]
ARM GAS  /tmp/cciBqq80.s 			page 33


 1055 013c 002B     		cmp	r3, #0
 1056 013e 10D1     		bne	.L60
 785:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
 786:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         tmp = (uint16_t*) pData ;
 1057              		.loc 1 786 0 is_stmt 1
 1058 0140 BB68     		ldr	r3, [r7, #8]
 1059 0142 3B61     		str	r3, [r7, #16]
 787:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 1060              		.loc 1 787 0
 1061 0144 FB68     		ldr	r3, [r7, #12]
 1062 0146 1B68     		ldr	r3, [r3]
 1063 0148 9B8C     		ldrh	r3, [r3, #36]
 1064 014a 9BB2     		uxth	r3, r3
 1065 014c 1622     		movs	r2, #22
 1066 014e BA18     		adds	r2, r7, r2
 1067 0150 1288     		ldrh	r2, [r2]
 1068 0152 1340     		ands	r3, r2
 1069 0154 9AB2     		uxth	r2, r3
 1070 0156 3B69     		ldr	r3, [r7, #16]
 1071 0158 1A80     		strh	r2, [r3]
 788:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         pData +=2;
 1072              		.loc 1 788 0
 1073 015a BB68     		ldr	r3, [r7, #8]
 1074 015c 0233     		adds	r3, r3, #2
 1075 015e BB60     		str	r3, [r7, #8]
 1076 0160 0EE0     		b	.L58
 1077              	.L60:
 789:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
 790:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       else
 791:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
 792:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 1078              		.loc 1 792 0
 1079 0162 BB68     		ldr	r3, [r7, #8]
 1080 0164 5A1C     		adds	r2, r3, #1
 1081 0166 BA60     		str	r2, [r7, #8]
 1082 0168 FA68     		ldr	r2, [r7, #12]
 1083 016a 1268     		ldr	r2, [r2]
 1084 016c 928C     		ldrh	r2, [r2, #36]
 1085 016e 92B2     		uxth	r2, r2
 1086 0170 D2B2     		uxtb	r2, r2
 1087 0172 1621     		movs	r1, #22
 1088 0174 7918     		adds	r1, r7, r1
 1089 0176 0988     		ldrh	r1, [r1]
 1090 0178 C9B2     		uxtb	r1, r1
 1091 017a 0A40     		ands	r2, r1
 1092 017c D2B2     		uxtb	r2, r2
 1093 017e 1A70     		strb	r2, [r3]
 1094              	.L58:
 777:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 1095              		.loc 1 777 0
 1096 0180 FB68     		ldr	r3, [r7, #12]
 1097 0182 5A22     		movs	r2, #90
 1098 0184 9B5A     		ldrh	r3, [r3, r2]
 1099 0186 002B     		cmp	r3, #0
 1100 0188 BED1     		bne	.L61
 793:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
 794:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
ARM GAS  /tmp/cciBqq80.s 			page 34


 795:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 796:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* At end of Rx process, restore huart->RxState to Ready */
 797:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 1101              		.loc 1 797 0
 1102 018a FB68     		ldr	r3, [r7, #12]
 1103 018c 6A22     		movs	r2, #106
 1104 018e 2021     		movs	r1, #32
 1105 0190 9954     		strb	r1, [r3, r2]
 798:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 799:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Process Unlocked */
 800:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 1106              		.loc 1 800 0
 1107 0192 FB68     		ldr	r3, [r7, #12]
 1108 0194 6822     		movs	r2, #104
 1109 0196 0021     		movs	r1, #0
 1110 0198 9954     		strb	r1, [r3, r2]
 801:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 802:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_OK;
 1111              		.loc 1 802 0
 1112 019a 0023     		movs	r3, #0
 1113 019c 00E0     		b	.L47
 1114              	.L44:
 803:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 804:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   else
 805:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 806:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_BUSY;
 1115              		.loc 1 806 0
 1116 019e 0223     		movs	r3, #2
 1117              	.L47:
 807:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 808:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 1118              		.loc 1 808 0
 1119 01a0 1800     		movs	r0, r3
 1120 01a2 BD46     		mov	sp, r7
 1121 01a4 06B0     		add	sp, sp, #24
 1122              		@ sp needed
 1123 01a6 80BD     		pop	{r7, pc}
 1124              	.L63:
 1125              		.align	2
 1126              	.L62:
 1127 01a8 FF010000 		.word	511
 1128              		.cfi_endproc
 1129              	.LFE42:
 1131              		.section	.text.HAL_UART_Transmit_IT,"ax",%progbits
 1132              		.align	1
 1133              		.global	HAL_UART_Transmit_IT
 1134              		.syntax unified
 1135              		.code	16
 1136              		.thumb_func
 1137              		.fpu softvfp
 1139              	HAL_UART_Transmit_IT:
 1140              	.LFB43:
 809:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 810:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
 811:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Send an amount of data in interrupt mode.
 812:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart: UART handle.
 813:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param pData: pointer to data buffer.
ARM GAS  /tmp/cciBqq80.s 			page 35


 814:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param Size: amount of data to be sent.
 815:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
 816:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         address of user data buffer containing data to be sent, should be aligned on a half wor
 817:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
 818:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         use of specific alignment compilation directives or pragmas might be required to ensure
 819:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
 820:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 821:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
 822:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 1141              		.loc 1 822 0
 1142              		.cfi_startproc
 1143 0000 80B5     		push	{r7, lr}
 1144              	.LCFI24:
 1145              		.cfi_def_cfa_offset 8
 1146              		.cfi_offset 7, -8
 1147              		.cfi_offset 14, -4
 1148 0002 84B0     		sub	sp, sp, #16
 1149              	.LCFI25:
 1150              		.cfi_def_cfa_offset 24
 1151 0004 00AF     		add	r7, sp, #0
 1152              	.LCFI26:
 1153              		.cfi_def_cfa_register 7
 1154 0006 F860     		str	r0, [r7, #12]
 1155 0008 B960     		str	r1, [r7, #8]
 1156 000a BB1D     		adds	r3, r7, #6
 1157 000c 1A80     		strh	r2, [r3]
 823:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
 824:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(huart->gState == HAL_UART_STATE_READY)
 1158              		.loc 1 824 0
 1159 000e FB68     		ldr	r3, [r7, #12]
 1160 0010 6922     		movs	r2, #105
 1161 0012 9B5C     		ldrb	r3, [r3, r2]
 1162 0014 DBB2     		uxtb	r3, r3
 1163 0016 202B     		cmp	r3, #32
 1164 0018 45D1     		bne	.L65
 825:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 826:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if((pData == NULL ) || (Size == 0))
 1165              		.loc 1 826 0
 1166 001a BB68     		ldr	r3, [r7, #8]
 1167 001c 002B     		cmp	r3, #0
 1168 001e 03D0     		beq	.L66
 1169              		.loc 1 826 0 is_stmt 0 discriminator 1
 1170 0020 BB1D     		adds	r3, r7, #6
 1171 0022 1B88     		ldrh	r3, [r3]
 1172 0024 002B     		cmp	r3, #0
 1173 0026 01D1     		bne	.L67
 1174              	.L66:
 827:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 828:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       return HAL_ERROR;
 1175              		.loc 1 828 0 is_stmt 1
 1176 0028 0123     		movs	r3, #1
 1177 002a 3DE0     		b	.L68
 1178              	.L67:
 829:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 830:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 831:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
 832:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        should be aligned on a u16 frontier, as data to be filled into TDR will be 
ARM GAS  /tmp/cciBqq80.s 			page 36


 833:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        handled through a u16 cast. */
 834:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 1179              		.loc 1 834 0
 1180 002c FB68     		ldr	r3, [r7, #12]
 1181 002e 9A68     		ldr	r2, [r3, #8]
 1182 0030 8023     		movs	r3, #128
 1183 0032 5B01     		lsls	r3, r3, #5
 1184 0034 9A42     		cmp	r2, r3
 1185 0036 09D1     		bne	.L69
 1186              		.loc 1 834 0 is_stmt 0 discriminator 1
 1187 0038 FB68     		ldr	r3, [r7, #12]
 1188 003a 1B69     		ldr	r3, [r3, #16]
 1189 003c 002B     		cmp	r3, #0
 1190 003e 05D1     		bne	.L69
 835:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 836:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if((((uint32_t)pData)&1) != 0)
 1191              		.loc 1 836 0 is_stmt 1
 1192 0040 BB68     		ldr	r3, [r7, #8]
 1193 0042 0122     		movs	r2, #1
 1194 0044 1340     		ands	r3, r2
 1195 0046 01D0     		beq	.L69
 837:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
 838:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         return  HAL_ERROR;
 1196              		.loc 1 838 0
 1197 0048 0123     		movs	r3, #1
 1198 004a 2DE0     		b	.L68
 1199              	.L69:
 839:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
 840:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 841:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 842:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Process Locked */
 843:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_LOCK(huart);
 1200              		.loc 1 843 0
 1201 004c FB68     		ldr	r3, [r7, #12]
 1202 004e 6822     		movs	r2, #104
 1203 0050 9B5C     		ldrb	r3, [r3, r2]
 1204 0052 012B     		cmp	r3, #1
 1205 0054 01D1     		bne	.L70
 1206              		.loc 1 843 0 is_stmt 0 discriminator 1
 1207 0056 0223     		movs	r3, #2
 1208 0058 26E0     		b	.L68
 1209              	.L70:
 1210              		.loc 1 843 0 discriminator 2
 1211 005a FB68     		ldr	r3, [r7, #12]
 1212 005c 6822     		movs	r2, #104
 1213 005e 0121     		movs	r1, #1
 1214 0060 9954     		strb	r1, [r3, r2]
 844:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 845:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->pTxBuffPtr = pData;
 1215              		.loc 1 845 0 is_stmt 1 discriminator 2
 1216 0062 FB68     		ldr	r3, [r7, #12]
 1217 0064 BA68     		ldr	r2, [r7, #8]
 1218 0066 DA64     		str	r2, [r3, #76]
 846:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->TxXferSize = Size;
 1219              		.loc 1 846 0 discriminator 2
 1220 0068 FB68     		ldr	r3, [r7, #12]
 1221 006a BA1D     		adds	r2, r7, #6
ARM GAS  /tmp/cciBqq80.s 			page 37


 1222 006c 5021     		movs	r1, #80
 1223 006e 1288     		ldrh	r2, [r2]
 1224 0070 5A52     		strh	r2, [r3, r1]
 847:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->TxXferCount = Size;
 1225              		.loc 1 847 0 discriminator 2
 1226 0072 FB68     		ldr	r3, [r7, #12]
 1227 0074 BA1D     		adds	r2, r7, #6
 1228 0076 5221     		movs	r1, #82
 1229 0078 1288     		ldrh	r2, [r2]
 1230 007a 5A52     		strh	r2, [r3, r1]
 848:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 849:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 1231              		.loc 1 849 0 discriminator 2
 1232 007c FB68     		ldr	r3, [r7, #12]
 1233 007e 0022     		movs	r2, #0
 1234 0080 DA66     		str	r2, [r3, #108]
 850:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 1235              		.loc 1 850 0 discriminator 2
 1236 0082 FB68     		ldr	r3, [r7, #12]
 1237 0084 6922     		movs	r2, #105
 1238 0086 2121     		movs	r1, #33
 1239 0088 9954     		strb	r1, [r3, r2]
 851:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 852:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Process Unlocked */
 853:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 1240              		.loc 1 853 0 discriminator 2
 1241 008a FB68     		ldr	r3, [r7, #12]
 1242 008c 6822     		movs	r2, #104
 1243 008e 0021     		movs	r1, #0
 1244 0090 9954     		strb	r1, [r3, r2]
 854:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 855:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Enable the UART Transmit Data Register Empty Interrupt */
 856:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 1245              		.loc 1 856 0 discriminator 2
 1246 0092 FB68     		ldr	r3, [r7, #12]
 1247 0094 1B68     		ldr	r3, [r3]
 1248 0096 FA68     		ldr	r2, [r7, #12]
 1249 0098 1268     		ldr	r2, [r2]
 1250 009a 1268     		ldr	r2, [r2]
 1251 009c 8021     		movs	r1, #128
 1252 009e 0A43     		orrs	r2, r1
 1253 00a0 1A60     		str	r2, [r3]
 857:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 858:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_OK;
 1254              		.loc 1 858 0 discriminator 2
 1255 00a2 0023     		movs	r3, #0
 1256 00a4 00E0     		b	.L68
 1257              	.L65:
 859:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 860:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   else
 861:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 862:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_BUSY;
 1258              		.loc 1 862 0
 1259 00a6 0223     		movs	r3, #2
 1260              	.L68:
 863:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 864:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
ARM GAS  /tmp/cciBqq80.s 			page 38


 1261              		.loc 1 864 0
 1262 00a8 1800     		movs	r0, r3
 1263 00aa BD46     		mov	sp, r7
 1264 00ac 04B0     		add	sp, sp, #16
 1265              		@ sp needed
 1266 00ae 80BD     		pop	{r7, pc}
 1267              		.cfi_endproc
 1268              	.LFE43:
 1270              		.section	.text.HAL_UART_Receive_IT,"ax",%progbits
 1271              		.align	1
 1272              		.global	HAL_UART_Receive_IT
 1273              		.syntax unified
 1274              		.code	16
 1275              		.thumb_func
 1276              		.fpu softvfp
 1278              	HAL_UART_Receive_IT:
 1279              	.LFB44:
 865:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 866:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
 867:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Receive an amount of data in interrupt mode.
 868:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart: UART handle.
 869:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param pData: pointer to data buffer.
 870:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param Size: amount of data to be received.
 871:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
 872:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         address of user data buffer for storing data to be received, should be aligned on a hal
 873:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         (as received data will be handled using u16 pointer cast). Depending on compilation cha
 874:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         use of specific alignment compilation directives or pragmas might be required to ensure
 875:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
 876:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 877:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
 878:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 1280              		.loc 1 878 0
 1281              		.cfi_startproc
 1282 0000 80B5     		push	{r7, lr}
 1283              	.LCFI27:
 1284              		.cfi_def_cfa_offset 8
 1285              		.cfi_offset 7, -8
 1286              		.cfi_offset 14, -4
 1287 0002 84B0     		sub	sp, sp, #16
 1288              	.LCFI28:
 1289              		.cfi_def_cfa_offset 24
 1290 0004 00AF     		add	r7, sp, #0
 1291              	.LCFI29:
 1292              		.cfi_def_cfa_register 7
 1293 0006 F860     		str	r0, [r7, #12]
 1294 0008 B960     		str	r1, [r7, #8]
 1295 000a BB1D     		adds	r3, r7, #6
 1296 000c 1A80     		strh	r2, [r3]
 879:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
 880:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(huart->RxState == HAL_UART_STATE_READY)
 1297              		.loc 1 880 0
 1298 000e FB68     		ldr	r3, [r7, #12]
 1299 0010 6A22     		movs	r2, #106
 1300 0012 9B5C     		ldrb	r3, [r3, r2]
 1301 0014 DBB2     		uxtb	r3, r3
 1302 0016 202B     		cmp	r3, #32
 1303 0018 00D0     		beq	.LCB1157
ARM GAS  /tmp/cciBqq80.s 			page 39


 1304 001a 8FE0     		b	.L72	@long jump
 1305              	.LCB1157:
 881:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 882:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if((pData == NULL ) || (Size == 0))
 1306              		.loc 1 882 0
 1307 001c BB68     		ldr	r3, [r7, #8]
 1308 001e 002B     		cmp	r3, #0
 1309 0020 03D0     		beq	.L73
 1310              		.loc 1 882 0 is_stmt 0 discriminator 1
 1311 0022 BB1D     		adds	r3, r7, #6
 1312 0024 1B88     		ldrh	r3, [r3]
 1313 0026 002B     		cmp	r3, #0
 1314 0028 01D1     		bne	.L74
 1315              	.L73:
 883:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 884:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       return HAL_ERROR;
 1316              		.loc 1 884 0 is_stmt 1
 1317 002a 0123     		movs	r3, #1
 1318 002c 87E0     		b	.L75
 1319              	.L74:
 885:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 886:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 887:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
 888:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        should be aligned on a u16 frontier, as data to be received from RDR will be 
 889:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        handled through a u16 cast. */
 890:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 1320              		.loc 1 890 0
 1321 002e FB68     		ldr	r3, [r7, #12]
 1322 0030 9A68     		ldr	r2, [r3, #8]
 1323 0032 8023     		movs	r3, #128
 1324 0034 5B01     		lsls	r3, r3, #5
 1325 0036 9A42     		cmp	r2, r3
 1326 0038 09D1     		bne	.L76
 1327              		.loc 1 890 0 is_stmt 0 discriminator 1
 1328 003a FB68     		ldr	r3, [r7, #12]
 1329 003c 1B69     		ldr	r3, [r3, #16]
 1330 003e 002B     		cmp	r3, #0
 1331 0040 05D1     		bne	.L76
 891:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 892:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if((((uint32_t)pData)&1) != 0)
 1332              		.loc 1 892 0 is_stmt 1
 1333 0042 BB68     		ldr	r3, [r7, #8]
 1334 0044 0122     		movs	r2, #1
 1335 0046 1340     		ands	r3, r2
 1336 0048 01D0     		beq	.L76
 893:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
 894:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         return  HAL_ERROR;
 1337              		.loc 1 894 0
 1338 004a 0123     		movs	r3, #1
 1339 004c 77E0     		b	.L75
 1340              	.L76:
 895:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
 896:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 897:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 898:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Process Locked */
 899:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_LOCK(huart);
 1341              		.loc 1 899 0
ARM GAS  /tmp/cciBqq80.s 			page 40


 1342 004e FB68     		ldr	r3, [r7, #12]
 1343 0050 6822     		movs	r2, #104
 1344 0052 9B5C     		ldrb	r3, [r3, r2]
 1345 0054 012B     		cmp	r3, #1
 1346 0056 01D1     		bne	.L77
 1347              		.loc 1 899 0 is_stmt 0 discriminator 1
 1348 0058 0223     		movs	r3, #2
 1349 005a 70E0     		b	.L75
 1350              	.L77:
 1351              		.loc 1 899 0 discriminator 2
 1352 005c FB68     		ldr	r3, [r7, #12]
 1353 005e 6822     		movs	r2, #104
 1354 0060 0121     		movs	r1, #1
 1355 0062 9954     		strb	r1, [r3, r2]
 900:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 901:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->pRxBuffPtr = pData;
 1356              		.loc 1 901 0 is_stmt 1 discriminator 2
 1357 0064 FB68     		ldr	r3, [r7, #12]
 1358 0066 BA68     		ldr	r2, [r7, #8]
 1359 0068 5A65     		str	r2, [r3, #84]
 902:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxXferSize = Size;
 1360              		.loc 1 902 0 discriminator 2
 1361 006a FB68     		ldr	r3, [r7, #12]
 1362 006c BA1D     		adds	r2, r7, #6
 1363 006e 5821     		movs	r1, #88
 1364 0070 1288     		ldrh	r2, [r2]
 1365 0072 5A52     		strh	r2, [r3, r1]
 903:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxXferCount = Size;
 1366              		.loc 1 903 0 discriminator 2
 1367 0074 FB68     		ldr	r3, [r7, #12]
 1368 0076 BA1D     		adds	r2, r7, #6
 1369 0078 5A21     		movs	r1, #90
 1370 007a 1288     		ldrh	r2, [r2]
 1371 007c 5A52     		strh	r2, [r3, r1]
 904:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 905:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Computation of UART mask to apply to RDR register */
 906:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     UART_MASK_COMPUTATION(huart);
 1372              		.loc 1 906 0 discriminator 2
 1373 007e FB68     		ldr	r3, [r7, #12]
 1374 0080 9A68     		ldr	r2, [r3, #8]
 1375 0082 8023     		movs	r3, #128
 1376 0084 5B01     		lsls	r3, r3, #5
 1377 0086 9A42     		cmp	r2, r3
 1378 0088 0DD1     		bne	.L78
 1379              		.loc 1 906 0 is_stmt 0 discriminator 1
 1380 008a FB68     		ldr	r3, [r7, #12]
 1381 008c 1B69     		ldr	r3, [r3, #16]
 1382 008e 002B     		cmp	r3, #0
 1383 0090 04D1     		bne	.L79
 1384              		.loc 1 906 0 discriminator 3
 1385 0092 FB68     		ldr	r3, [r7, #12]
 1386 0094 5C22     		movs	r2, #92
 1387 0096 2C49     		ldr	r1, .L86
 1388 0098 9952     		strh	r1, [r3, r2]
 1389 009a 29E0     		b	.L81
 1390              	.L79:
 1391              		.loc 1 906 0 discriminator 4
ARM GAS  /tmp/cciBqq80.s 			page 41


 1392 009c FB68     		ldr	r3, [r7, #12]
 1393 009e 5C22     		movs	r2, #92
 1394 00a0 FF21     		movs	r1, #255
 1395 00a2 9952     		strh	r1, [r3, r2]
 1396 00a4 24E0     		b	.L81
 1397              	.L78:
 1398              		.loc 1 906 0 discriminator 2
 1399 00a6 FB68     		ldr	r3, [r7, #12]
 1400 00a8 9B68     		ldr	r3, [r3, #8]
 1401 00aa 002B     		cmp	r3, #0
 1402 00ac 0DD1     		bne	.L82
 1403              		.loc 1 906 0 discriminator 5
 1404 00ae FB68     		ldr	r3, [r7, #12]
 1405 00b0 1B69     		ldr	r3, [r3, #16]
 1406 00b2 002B     		cmp	r3, #0
 1407 00b4 04D1     		bne	.L83
 1408              		.loc 1 906 0 discriminator 7
 1409 00b6 FB68     		ldr	r3, [r7, #12]
 1410 00b8 5C22     		movs	r2, #92
 1411 00ba FF21     		movs	r1, #255
 1412 00bc 9952     		strh	r1, [r3, r2]
 1413 00be 17E0     		b	.L81
 1414              	.L83:
 1415              		.loc 1 906 0 discriminator 8
 1416 00c0 FB68     		ldr	r3, [r7, #12]
 1417 00c2 5C22     		movs	r2, #92
 1418 00c4 7F21     		movs	r1, #127
 1419 00c6 9952     		strh	r1, [r3, r2]
 1420 00c8 12E0     		b	.L81
 1421              	.L82:
 1422              		.loc 1 906 0 discriminator 6
 1423 00ca FB68     		ldr	r3, [r7, #12]
 1424 00cc 9A68     		ldr	r2, [r3, #8]
 1425 00ce 8023     		movs	r3, #128
 1426 00d0 5B05     		lsls	r3, r3, #21
 1427 00d2 9A42     		cmp	r2, r3
 1428 00d4 0CD1     		bne	.L81
 1429              		.loc 1 906 0 discriminator 9
 1430 00d6 FB68     		ldr	r3, [r7, #12]
 1431 00d8 1B69     		ldr	r3, [r3, #16]
 1432 00da 002B     		cmp	r3, #0
 1433 00dc 04D1     		bne	.L85
 1434              		.loc 1 906 0 discriminator 10
 1435 00de FB68     		ldr	r3, [r7, #12]
 1436 00e0 5C22     		movs	r2, #92
 1437 00e2 7F21     		movs	r1, #127
 1438 00e4 9952     		strh	r1, [r3, r2]
 1439 00e6 03E0     		b	.L81
 1440              	.L85:
 1441              		.loc 1 906 0 discriminator 11
 1442 00e8 FB68     		ldr	r3, [r7, #12]
 1443 00ea 5C22     		movs	r2, #92
 1444 00ec 3F21     		movs	r1, #63
 1445 00ee 9952     		strh	r1, [r3, r2]
 1446              	.L81:
 907:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 908:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
ARM GAS  /tmp/cciBqq80.s 			page 42


 1447              		.loc 1 908 0 is_stmt 1
 1448 00f0 FB68     		ldr	r3, [r7, #12]
 1449 00f2 0022     		movs	r2, #0
 1450 00f4 DA66     		str	r2, [r3, #108]
 909:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 1451              		.loc 1 909 0
 1452 00f6 FB68     		ldr	r3, [r7, #12]
 1453 00f8 6A22     		movs	r2, #106
 1454 00fa 2221     		movs	r1, #34
 1455 00fc 9954     		strb	r1, [r3, r2]
 910:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 911:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Enable the UART Parity Error Interrupt */
 912:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 1456              		.loc 1 912 0
 1457 00fe FB68     		ldr	r3, [r7, #12]
 1458 0100 1B68     		ldr	r3, [r3]
 1459 0102 FA68     		ldr	r2, [r7, #12]
 1460 0104 1268     		ldr	r2, [r2]
 1461 0106 1268     		ldr	r2, [r2]
 1462 0108 8021     		movs	r1, #128
 1463 010a 4900     		lsls	r1, r1, #1
 1464 010c 0A43     		orrs	r2, r1
 1465 010e 1A60     		str	r2, [r3]
 913:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 914:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
 915:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 1466              		.loc 1 915 0
 1467 0110 FB68     		ldr	r3, [r7, #12]
 1468 0112 1B68     		ldr	r3, [r3]
 1469 0114 FA68     		ldr	r2, [r7, #12]
 1470 0116 1268     		ldr	r2, [r2]
 1471 0118 9268     		ldr	r2, [r2, #8]
 1472 011a 0121     		movs	r1, #1
 1473 011c 0A43     		orrs	r2, r1
 1474 011e 9A60     		str	r2, [r3, #8]
 916:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 917:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Process Unlocked */
 918:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 1475              		.loc 1 918 0
 1476 0120 FB68     		ldr	r3, [r7, #12]
 1477 0122 6822     		movs	r2, #104
 1478 0124 0021     		movs	r1, #0
 1479 0126 9954     		strb	r1, [r3, r2]
 919:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 920:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Enable the UART Data Register not empty Interrupt */
 921:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 1480              		.loc 1 921 0
 1481 0128 FB68     		ldr	r3, [r7, #12]
 1482 012a 1B68     		ldr	r3, [r3]
 1483 012c FA68     		ldr	r2, [r7, #12]
 1484 012e 1268     		ldr	r2, [r2]
 1485 0130 1268     		ldr	r2, [r2]
 1486 0132 2021     		movs	r1, #32
 1487 0134 0A43     		orrs	r2, r1
 1488 0136 1A60     		str	r2, [r3]
 922:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 923:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_OK;
ARM GAS  /tmp/cciBqq80.s 			page 43


 1489              		.loc 1 923 0
 1490 0138 0023     		movs	r3, #0
 1491 013a 00E0     		b	.L75
 1492              	.L72:
 924:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 925:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   else
 926:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 927:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_BUSY;
 1493              		.loc 1 927 0
 1494 013c 0223     		movs	r3, #2
 1495              	.L75:
 928:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 929:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 1496              		.loc 1 929 0
 1497 013e 1800     		movs	r0, r3
 1498 0140 BD46     		mov	sp, r7
 1499 0142 04B0     		add	sp, sp, #16
 1500              		@ sp needed
 1501 0144 80BD     		pop	{r7, pc}
 1502              	.L87:
 1503 0146 C046     		.align	2
 1504              	.L86:
 1505 0148 FF010000 		.word	511
 1506              		.cfi_endproc
 1507              	.LFE44:
 1509              		.section	.text.HAL_UART_IRQHandler,"ax",%progbits
 1510              		.align	1
 1511              		.global	HAL_UART_IRQHandler
 1512              		.syntax unified
 1513              		.code	16
 1514              		.thumb_func
 1515              		.fpu softvfp
 1517              	HAL_UART_IRQHandler:
 1518              	.LFB45:
 930:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 931:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
 932:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Handle UART interrupt request.
 933:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart: UART handle.
 934:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
 935:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 936:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
 937:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 1519              		.loc 1 937 0
 1520              		.cfi_startproc
 1521 0000 80B5     		push	{r7, lr}
 1522              	.LCFI30:
 1523              		.cfi_def_cfa_offset 8
 1524              		.cfi_offset 7, -8
 1525              		.cfi_offset 14, -4
 1526 0002 82B0     		sub	sp, sp, #8
 1527              	.LCFI31:
 1528              		.cfi_def_cfa_offset 16
 1529 0004 00AF     		add	r7, sp, #0
 1530              	.LCFI32:
 1531              		.cfi_def_cfa_register 7
 1532 0006 7860     		str	r0, [r7, #4]
 938:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* UART parity error interrupt occurred -------------------------------------*/
ARM GAS  /tmp/cciBqq80.s 			page 44


 939:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE
 1533              		.loc 1 939 0
 1534 0008 7B68     		ldr	r3, [r7, #4]
 1535 000a 1B68     		ldr	r3, [r3]
 1536 000c DB69     		ldr	r3, [r3, #28]
 1537 000e 0122     		movs	r2, #1
 1538 0010 1340     		ands	r3, r2
 1539 0012 10D0     		beq	.L89
 1540              		.loc 1 939 0 is_stmt 0 discriminator 1
 1541 0014 7B68     		ldr	r3, [r7, #4]
 1542 0016 1B68     		ldr	r3, [r3]
 1543 0018 1A68     		ldr	r2, [r3]
 1544 001a 8023     		movs	r3, #128
 1545 001c 5B00     		lsls	r3, r3, #1
 1546 001e 1340     		ands	r3, r2
 1547 0020 09D0     		beq	.L89
 940:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 941:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 1548              		.loc 1 941 0 is_stmt 1
 1549 0022 7B68     		ldr	r3, [r7, #4]
 1550 0024 1B68     		ldr	r3, [r3]
 1551 0026 0122     		movs	r2, #1
 1552 0028 1A62     		str	r2, [r3, #32]
 942:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 943:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_PE;
 1553              		.loc 1 943 0
 1554 002a 7B68     		ldr	r3, [r7, #4]
 1555 002c DB6E     		ldr	r3, [r3, #108]
 1556 002e 0122     		movs	r2, #1
 1557 0030 1A43     		orrs	r2, r3
 1558 0032 7B68     		ldr	r3, [r7, #4]
 1559 0034 DA66     		str	r2, [r3, #108]
 1560              	.L89:
 944:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 945:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 946:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* UART frame error interrupt occurred --------------------------------------*/
 947:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ER
 1561              		.loc 1 947 0
 1562 0036 7B68     		ldr	r3, [r7, #4]
 1563 0038 1B68     		ldr	r3, [r3]
 1564 003a DB69     		ldr	r3, [r3, #28]
 1565 003c 0222     		movs	r2, #2
 1566 003e 1340     		ands	r3, r2
 1567 0040 0FD0     		beq	.L90
 1568              		.loc 1 947 0 is_stmt 0 discriminator 1
 1569 0042 7B68     		ldr	r3, [r7, #4]
 1570 0044 1B68     		ldr	r3, [r3]
 1571 0046 9B68     		ldr	r3, [r3, #8]
 1572 0048 0122     		movs	r2, #1
 1573 004a 1340     		ands	r3, r2
 1574 004c 09D0     		beq	.L90
 948:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 949:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 1575              		.loc 1 949 0 is_stmt 1
 1576 004e 7B68     		ldr	r3, [r7, #4]
 1577 0050 1B68     		ldr	r3, [r3]
 1578 0052 0222     		movs	r2, #2
ARM GAS  /tmp/cciBqq80.s 			page 45


 1579 0054 1A62     		str	r2, [r3, #32]
 950:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 951:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_FE;
 1580              		.loc 1 951 0
 1581 0056 7B68     		ldr	r3, [r7, #4]
 1582 0058 DB6E     		ldr	r3, [r3, #108]
 1583 005a 0422     		movs	r2, #4
 1584 005c 1A43     		orrs	r2, r3
 1585 005e 7B68     		ldr	r3, [r7, #4]
 1586 0060 DA66     		str	r2, [r3, #108]
 1587              	.L90:
 952:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 953:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 954:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* UART noise error interrupt occurred --------------------------------------*/
 955:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ER
 1588              		.loc 1 955 0
 1589 0062 7B68     		ldr	r3, [r7, #4]
 1590 0064 1B68     		ldr	r3, [r3]
 1591 0066 DB69     		ldr	r3, [r3, #28]
 1592 0068 0422     		movs	r2, #4
 1593 006a 1340     		ands	r3, r2
 1594 006c 0FD0     		beq	.L91
 1595              		.loc 1 955 0 is_stmt 0 discriminator 1
 1596 006e 7B68     		ldr	r3, [r7, #4]
 1597 0070 1B68     		ldr	r3, [r3]
 1598 0072 9B68     		ldr	r3, [r3, #8]
 1599 0074 0122     		movs	r2, #1
 1600 0076 1340     		ands	r3, r2
 1601 0078 09D0     		beq	.L91
 956:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 957:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 1602              		.loc 1 957 0 is_stmt 1
 1603 007a 7B68     		ldr	r3, [r7, #4]
 1604 007c 1B68     		ldr	r3, [r3]
 1605 007e 0422     		movs	r2, #4
 1606 0080 1A62     		str	r2, [r3, #32]
 958:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 959:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_NE;
 1607              		.loc 1 959 0
 1608 0082 7B68     		ldr	r3, [r7, #4]
 1609 0084 DB6E     		ldr	r3, [r3, #108]
 1610 0086 0222     		movs	r2, #2
 1611 0088 1A43     		orrs	r2, r3
 1612 008a 7B68     		ldr	r3, [r7, #4]
 1613 008c DA66     		str	r2, [r3, #108]
 1614              	.L91:
 960:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 961:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 962:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* UART Over-Run interrupt occurred -----------------------------------------*/
 963:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_E
 1615              		.loc 1 963 0
 1616 008e 7B68     		ldr	r3, [r7, #4]
 1617 0090 1B68     		ldr	r3, [r3]
 1618 0092 DB69     		ldr	r3, [r3, #28]
 1619 0094 0822     		movs	r2, #8
 1620 0096 1340     		ands	r3, r2
 1621 0098 0FD0     		beq	.L92
ARM GAS  /tmp/cciBqq80.s 			page 46


 1622              		.loc 1 963 0 is_stmt 0 discriminator 1
 1623 009a 7B68     		ldr	r3, [r7, #4]
 1624 009c 1B68     		ldr	r3, [r3]
 1625 009e 9B68     		ldr	r3, [r3, #8]
 1626 00a0 0122     		movs	r2, #1
 1627 00a2 1340     		ands	r3, r2
 1628 00a4 09D0     		beq	.L92
 964:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 965:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 1629              		.loc 1 965 0 is_stmt 1
 1630 00a6 7B68     		ldr	r3, [r7, #4]
 1631 00a8 1B68     		ldr	r3, [r3]
 1632 00aa 0822     		movs	r2, #8
 1633 00ac 1A62     		str	r2, [r3, #32]
 966:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 967:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_ORE;
 1634              		.loc 1 967 0
 1635 00ae 7B68     		ldr	r3, [r7, #4]
 1636 00b0 DB6E     		ldr	r3, [r3, #108]
 1637 00b2 0822     		movs	r2, #8
 1638 00b4 1A43     		orrs	r2, r3
 1639 00b6 7B68     		ldr	r3, [r7, #4]
 1640 00b8 DA66     		str	r2, [r3, #108]
 1641              	.L92:
 968:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 969:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 970:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&
 971:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* UART wakeup from Stop mode interrupt occurred -------------------------------------*/
 972:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_W
 1642              		.loc 1 972 0
 1643 00ba 7B68     		ldr	r3, [r7, #4]
 1644 00bc 1B68     		ldr	r3, [r3]
 1645 00be DA69     		ldr	r2, [r3, #28]
 1646 00c0 8023     		movs	r3, #128
 1647 00c2 5B03     		lsls	r3, r3, #13
 1648 00c4 1340     		ands	r3, r2
 1649 00c6 17D0     		beq	.L93
 1650              		.loc 1 972 0 is_stmt 0 discriminator 1
 1651 00c8 7B68     		ldr	r3, [r7, #4]
 1652 00ca 1B68     		ldr	r3, [r3]
 1653 00cc 9A68     		ldr	r2, [r3, #8]
 1654 00ce 8023     		movs	r3, #128
 1655 00d0 DB03     		lsls	r3, r3, #15
 1656 00d2 1340     		ands	r3, r2
 1657 00d4 10D0     		beq	.L93
 973:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 974:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 1658              		.loc 1 974 0 is_stmt 1
 1659 00d6 7B68     		ldr	r3, [r7, #4]
 1660 00d8 1B68     		ldr	r3, [r3]
 1661 00da 8022     		movs	r2, #128
 1662 00dc 5203     		lsls	r2, r2, #13
 1663 00de 1A62     		str	r2, [r3, #32]
 975:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Set the UART state ready to be able to start again the process */
 976:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_READY;
 1664              		.loc 1 976 0
 1665 00e0 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cciBqq80.s 			page 47


 1666 00e2 6922     		movs	r2, #105
 1667 00e4 2021     		movs	r1, #32
 1668 00e6 9954     		strb	r1, [r3, r2]
 977:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 1669              		.loc 1 977 0
 1670 00e8 7B68     		ldr	r3, [r7, #4]
 1671 00ea 6A22     		movs	r2, #106
 1672 00ec 2021     		movs	r1, #32
 1673 00ee 9954     		strb	r1, [r3, r2]
 978:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     HAL_UARTEx_WakeupCallback(huart);
 1674              		.loc 1 978 0
 1675 00f0 7B68     		ldr	r3, [r7, #4]
 1676 00f2 1800     		movs	r0, r3
 1677 00f4 FFF7FEFF 		bl	HAL_UARTEx_WakeupCallback
 1678              	.L93:
 979:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 980:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F0
 981:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 982:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* UART in mode Receiver ---------------------------------------------------*/
 983:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_
 1679              		.loc 1 983 0
 1680 00f8 7B68     		ldr	r3, [r7, #4]
 1681 00fa 1B68     		ldr	r3, [r3]
 1682 00fc DB69     		ldr	r3, [r3, #28]
 1683 00fe 2022     		movs	r2, #32
 1684 0100 1340     		ands	r3, r2
 1685 0102 09D0     		beq	.L94
 1686              		.loc 1 983 0 is_stmt 0 discriminator 1
 1687 0104 7B68     		ldr	r3, [r7, #4]
 1688 0106 1B68     		ldr	r3, [r3]
 1689 0108 1B68     		ldr	r3, [r3]
 1690 010a 2022     		movs	r2, #32
 1691 010c 1340     		ands	r3, r2
 1692 010e 03D0     		beq	.L94
 984:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 985:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     UART_Receive_IT(huart);
 1693              		.loc 1 985 0 is_stmt 1
 1694 0110 7B68     		ldr	r3, [r7, #4]
 1695 0112 1800     		movs	r0, r3
 1696 0114 FFF7FEFF 		bl	UART_Receive_IT
 1697              	.L94:
 986:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 987:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 988:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 989:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* UART in mode Transmitter ------------------------------------------------*/
 990:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TX
 1698              		.loc 1 990 0
 1699 0118 7B68     		ldr	r3, [r7, #4]
 1700 011a 1B68     		ldr	r3, [r3]
 1701 011c DB69     		ldr	r3, [r3, #28]
 1702 011e 8022     		movs	r2, #128
 1703 0120 1340     		ands	r3, r2
 1704 0122 09D0     		beq	.L95
 1705              		.loc 1 990 0 is_stmt 0 discriminator 1
 1706 0124 7B68     		ldr	r3, [r7, #4]
 1707 0126 1B68     		ldr	r3, [r3]
 1708 0128 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cciBqq80.s 			page 48


 1709 012a 8022     		movs	r2, #128
 1710 012c 1340     		ands	r3, r2
 1711 012e 03D0     		beq	.L95
 991:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 992:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     UART_Transmit_IT(huart);
 1712              		.loc 1 992 0 is_stmt 1
 1713 0130 7B68     		ldr	r3, [r7, #4]
 1714 0132 1800     		movs	r0, r3
 1715 0134 FFF7FEFF 		bl	UART_Transmit_IT
 1716              	.L95:
 993:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 994:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 995:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* UART in mode Transmitter (transmission end) -----------------------------*/
 996:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****  if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) 
 1717              		.loc 1 996 0
 1718 0138 7B68     		ldr	r3, [r7, #4]
 1719 013a 1B68     		ldr	r3, [r3]
 1720 013c DB69     		ldr	r3, [r3, #28]
 1721 013e 4022     		movs	r2, #64
 1722 0140 1340     		ands	r3, r2
 1723 0142 09D0     		beq	.L96
 1724              		.loc 1 996 0 is_stmt 0 discriminator 1
 1725 0144 7B68     		ldr	r3, [r7, #4]
 1726 0146 1B68     		ldr	r3, [r3]
 1727 0148 1B68     		ldr	r3, [r3]
 1728 014a 4022     		movs	r2, #64
 1729 014c 1340     		ands	r3, r2
 1730 014e 03D0     		beq	.L96
 997:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 998:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     UART_EndTransmit_IT(huart);
 1731              		.loc 1 998 0 is_stmt 1
 1732 0150 7B68     		ldr	r3, [r7, #4]
 1733 0152 1800     		movs	r0, r3
 1734 0154 FFF7FEFF 		bl	UART_EndTransmit_IT
 1735              	.L96:
 999:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1000:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1001:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 1736              		.loc 1 1001 0
 1737 0158 7B68     		ldr	r3, [r7, #4]
 1738 015a DB6E     		ldr	r3, [r3, #108]
 1739 015c 002B     		cmp	r3, #0
 1740 015e 0BD0     		beq	.L98
1002:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1003:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Set the UART state ready to be able to start again the Tx/Rx process */
1004:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_READY;
 1741              		.loc 1 1004 0
 1742 0160 7B68     		ldr	r3, [r7, #4]
 1743 0162 6922     		movs	r2, #105
 1744 0164 2021     		movs	r1, #32
 1745 0166 9954     		strb	r1, [r3, r2]
1005:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 1746              		.loc 1 1005 0
 1747 0168 7B68     		ldr	r3, [r7, #4]
 1748 016a 6A22     		movs	r2, #106
 1749 016c 2021     		movs	r1, #32
 1750 016e 9954     		strb	r1, [r3, r2]
ARM GAS  /tmp/cciBqq80.s 			page 49


1006:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1007:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     HAL_UART_ErrorCallback(huart);
 1751              		.loc 1 1007 0
 1752 0170 7B68     		ldr	r3, [r7, #4]
 1753 0172 1800     		movs	r0, r3
 1754 0174 FFF7FEFF 		bl	HAL_UART_ErrorCallback
 1755              	.L98:
1008:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }  
1009:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 1756              		.loc 1 1009 0
 1757 0178 C046     		nop
 1758 017a BD46     		mov	sp, r7
 1759 017c 02B0     		add	sp, sp, #8
 1760              		@ sp needed
 1761 017e 80BD     		pop	{r7, pc}
 1762              		.cfi_endproc
 1763              	.LFE45:
 1765              		.section	.text.HAL_UART_Transmit_DMA,"ax",%progbits
 1766              		.align	1
 1767              		.global	HAL_UART_Transmit_DMA
 1768              		.syntax unified
 1769              		.code	16
 1770              		.thumb_func
 1771              		.fpu softvfp
 1773              	HAL_UART_Transmit_DMA:
 1774              	.LFB46:
1010:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1011:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1012:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Send an amount of data in DMA mode.
1013:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart: UART handle.
1014:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param pData: pointer to data buffer.
1015:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param Size: amount of data to be sent.
1016:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1017:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         address of user data buffer containing data to be sent, should be aligned on a half wor
1018:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         (as sent data will be handled by DMA from halfword frontier). Depending on compilation 
1019:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         use of specific alignment compilation directives or pragmas might be required to ensure
1020:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
1021:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1022:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
1023:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 1775              		.loc 1 1023 0
 1776              		.cfi_startproc
 1777 0000 80B5     		push	{r7, lr}
 1778              	.LCFI33:
 1779              		.cfi_def_cfa_offset 8
 1780              		.cfi_offset 7, -8
 1781              		.cfi_offset 14, -4
 1782 0002 86B0     		sub	sp, sp, #24
 1783              	.LCFI34:
 1784              		.cfi_def_cfa_offset 32
 1785 0004 00AF     		add	r7, sp, #0
 1786              	.LCFI35:
 1787              		.cfi_def_cfa_register 7
 1788 0006 F860     		str	r0, [r7, #12]
 1789 0008 B960     		str	r1, [r7, #8]
 1790 000a BB1D     		adds	r3, r7, #6
 1791 000c 1A80     		strh	r2, [r3]
ARM GAS  /tmp/cciBqq80.s 			page 50


1024:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint32_t *tmp;
1025:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1026:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
1027:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(huart->gState == HAL_UART_STATE_READY)
 1792              		.loc 1 1027 0
 1793 000e FB68     		ldr	r3, [r7, #12]
 1794 0010 6922     		movs	r2, #105
 1795 0012 9B5C     		ldrb	r3, [r3, r2]
 1796 0014 DBB2     		uxtb	r3, r3
 1797 0016 202B     		cmp	r3, #32
 1798 0018 65D1     		bne	.L100
1028:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1029:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if((pData == NULL ) || (Size == 0))
 1799              		.loc 1 1029 0
 1800 001a BB68     		ldr	r3, [r7, #8]
 1801 001c 002B     		cmp	r3, #0
 1802 001e 03D0     		beq	.L101
 1803              		.loc 1 1029 0 is_stmt 0 discriminator 1
 1804 0020 BB1D     		adds	r3, r7, #6
 1805 0022 1B88     		ldrh	r3, [r3]
 1806 0024 002B     		cmp	r3, #0
 1807 0026 01D1     		bne	.L102
 1808              	.L101:
1030:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1031:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       return HAL_ERROR;
 1809              		.loc 1 1031 0 is_stmt 1
 1810 0028 0123     		movs	r3, #1
 1811 002a 5DE0     		b	.L103
 1812              	.L102:
1032:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1033:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1034:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
1035:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        should be aligned on a u16 frontier, as data copy into TDR will be 
1036:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        handled by DMA from a u16 frontier. */
1037:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 1813              		.loc 1 1037 0
 1814 002c FB68     		ldr	r3, [r7, #12]
 1815 002e 9A68     		ldr	r2, [r3, #8]
 1816 0030 8023     		movs	r3, #128
 1817 0032 5B01     		lsls	r3, r3, #5
 1818 0034 9A42     		cmp	r2, r3
 1819 0036 0AD1     		bne	.L104
 1820              		.loc 1 1037 0 is_stmt 0 discriminator 1
 1821 0038 FB68     		ldr	r3, [r7, #12]
 1822 003a 1B69     		ldr	r3, [r3, #16]
 1823 003c 002B     		cmp	r3, #0
 1824 003e 06D1     		bne	.L104
1038:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1039:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if((((uint32_t)pData)&1) != 0)
 1825              		.loc 1 1039 0 is_stmt 1
 1826 0040 BB68     		ldr	r3, [r7, #8]
 1827 0042 1A00     		movs	r2, r3
 1828 0044 0123     		movs	r3, #1
 1829 0046 1340     		ands	r3, r2
 1830 0048 01D0     		beq	.L104
1040:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
1041:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         return  HAL_ERROR;
ARM GAS  /tmp/cciBqq80.s 			page 51


 1831              		.loc 1 1041 0
 1832 004a 0123     		movs	r3, #1
 1833 004c 4CE0     		b	.L103
 1834              	.L104:
1042:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
1043:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1044:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1045:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Process Locked */
1046:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_LOCK(huart);
 1835              		.loc 1 1046 0
 1836 004e FB68     		ldr	r3, [r7, #12]
 1837 0050 6822     		movs	r2, #104
 1838 0052 9B5C     		ldrb	r3, [r3, r2]
 1839 0054 012B     		cmp	r3, #1
 1840 0056 01D1     		bne	.L105
 1841              		.loc 1 1046 0 is_stmt 0 discriminator 1
 1842 0058 0223     		movs	r3, #2
 1843 005a 45E0     		b	.L103
 1844              	.L105:
 1845              		.loc 1 1046 0 discriminator 2
 1846 005c FB68     		ldr	r3, [r7, #12]
 1847 005e 6822     		movs	r2, #104
 1848 0060 0121     		movs	r1, #1
 1849 0062 9954     		strb	r1, [r3, r2]
1047:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1048:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->pTxBuffPtr = pData;
 1850              		.loc 1 1048 0 is_stmt 1 discriminator 2
 1851 0064 BA68     		ldr	r2, [r7, #8]
 1852 0066 FB68     		ldr	r3, [r7, #12]
 1853 0068 DA64     		str	r2, [r3, #76]
1049:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->TxXferSize = Size;
 1854              		.loc 1 1049 0 discriminator 2
 1855 006a FB68     		ldr	r3, [r7, #12]
 1856 006c BA1D     		adds	r2, r7, #6
 1857 006e 5021     		movs	r1, #80
 1858 0070 1288     		ldrh	r2, [r2]
 1859 0072 5A52     		strh	r2, [r3, r1]
1050:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->TxXferCount = Size;
 1860              		.loc 1 1050 0 discriminator 2
 1861 0074 FB68     		ldr	r3, [r7, #12]
 1862 0076 BA1D     		adds	r2, r7, #6
 1863 0078 5221     		movs	r1, #82
 1864 007a 1288     		ldrh	r2, [r2]
 1865 007c 5A52     		strh	r2, [r3, r1]
1051:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1052:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 1866              		.loc 1 1052 0 discriminator 2
 1867 007e FB68     		ldr	r3, [r7, #12]
 1868 0080 0022     		movs	r2, #0
 1869 0082 DA66     		str	r2, [r3, #108]
1053:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 1870              		.loc 1 1053 0 discriminator 2
 1871 0084 FB68     		ldr	r3, [r7, #12]
 1872 0086 6922     		movs	r2, #105
 1873 0088 2121     		movs	r1, #33
 1874 008a 9954     		strb	r1, [r3, r2]
1054:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
ARM GAS  /tmp/cciBqq80.s 			page 52


1055:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Set the UART DMA transfer complete callback */
1056:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 1875              		.loc 1 1056 0 discriminator 2
 1876 008c FB68     		ldr	r3, [r7, #12]
 1877 008e 1B6E     		ldr	r3, [r3, #96]
 1878 0090 174A     		ldr	r2, .L106
 1879 0092 9A62     		str	r2, [r3, #40]
1057:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1058:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Set the UART DMA Half transfer complete callback */
1059:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 1880              		.loc 1 1059 0 discriminator 2
 1881 0094 FB68     		ldr	r3, [r7, #12]
 1882 0096 1B6E     		ldr	r3, [r3, #96]
 1883 0098 164A     		ldr	r2, .L106+4
 1884 009a DA62     		str	r2, [r3, #44]
1060:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1061:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Set the DMA error callback */
1062:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->hdmatx->XferErrorCallback = UART_DMAError;
 1885              		.loc 1 1062 0 discriminator 2
 1886 009c FB68     		ldr	r3, [r7, #12]
 1887 009e 1B6E     		ldr	r3, [r3, #96]
 1888 00a0 154A     		ldr	r2, .L106+8
 1889 00a2 1A63     		str	r2, [r3, #48]
1063:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1064:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Enable the UART transmit DMA channel */
1065:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     tmp = (uint32_t*)&pData;
 1890              		.loc 1 1065 0 discriminator 2
 1891 00a4 0823     		movs	r3, #8
 1892 00a6 FB18     		adds	r3, r7, r3
 1893 00a8 7B61     		str	r3, [r7, #20]
1066:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 1894              		.loc 1 1066 0 discriminator 2
 1895 00aa FB68     		ldr	r3, [r7, #12]
 1896 00ac 186E     		ldr	r0, [r3, #96]
 1897 00ae 7B69     		ldr	r3, [r7, #20]
 1898 00b0 1968     		ldr	r1, [r3]
 1899 00b2 FB68     		ldr	r3, [r7, #12]
 1900 00b4 1B68     		ldr	r3, [r3]
 1901 00b6 2833     		adds	r3, r3, #40
 1902 00b8 1A00     		movs	r2, r3
 1903 00ba BB1D     		adds	r3, r7, #6
 1904 00bc 1B88     		ldrh	r3, [r3]
 1905 00be FFF7FEFF 		bl	HAL_DMA_Start_IT
1067:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1068:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Clear the TC flag in the ICR register */
1069:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 1906              		.loc 1 1069 0 discriminator 2
 1907 00c2 FB68     		ldr	r3, [r7, #12]
 1908 00c4 1B68     		ldr	r3, [r3]
 1909 00c6 4022     		movs	r2, #64
 1910 00c8 1A62     		str	r2, [r3, #32]
1070:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1071:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Enable the DMA transfer for transmit request by setting the DMAT bit
1072:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        in the UART CR3 register */
1073:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->Instance->CR3 |= USART_CR3_DMAT;
 1911              		.loc 1 1073 0 discriminator 2
 1912 00ca FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/cciBqq80.s 			page 53


 1913 00cc 1B68     		ldr	r3, [r3]
 1914 00ce FA68     		ldr	r2, [r7, #12]
 1915 00d0 1268     		ldr	r2, [r2]
 1916 00d2 9268     		ldr	r2, [r2, #8]
 1917 00d4 8021     		movs	r1, #128
 1918 00d6 0A43     		orrs	r2, r1
 1919 00d8 9A60     		str	r2, [r3, #8]
1074:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1075:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Process Unlocked */
1076:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 1920              		.loc 1 1076 0 discriminator 2
 1921 00da FB68     		ldr	r3, [r7, #12]
 1922 00dc 6822     		movs	r2, #104
 1923 00de 0021     		movs	r1, #0
 1924 00e0 9954     		strb	r1, [r3, r2]
1077:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1078:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_OK;
 1925              		.loc 1 1078 0 discriminator 2
 1926 00e2 0023     		movs	r3, #0
 1927 00e4 00E0     		b	.L103
 1928              	.L100:
1079:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1080:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   else
1081:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1082:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_BUSY;
 1929              		.loc 1 1082 0
 1930 00e6 0223     		movs	r3, #2
 1931              	.L103:
1083:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1084:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 1932              		.loc 1 1084 0
 1933 00e8 1800     		movs	r0, r3
 1934 00ea BD46     		mov	sp, r7
 1935 00ec 06B0     		add	sp, sp, #24
 1936              		@ sp needed
 1937 00ee 80BD     		pop	{r7, pc}
 1938              	.L107:
 1939              		.align	2
 1940              	.L106:
 1941 00f0 00000000 		.word	UART_DMATransmitCplt
 1942 00f4 00000000 		.word	UART_DMATxHalfCplt
 1943 00f8 00000000 		.word	UART_DMAError
 1944              		.cfi_endproc
 1945              	.LFE46:
 1947              		.section	.text.HAL_UART_Receive_DMA,"ax",%progbits
 1948              		.align	1
 1949              		.global	HAL_UART_Receive_DMA
 1950              		.syntax unified
 1951              		.code	16
 1952              		.thumb_func
 1953              		.fpu softvfp
 1955              	HAL_UART_Receive_DMA:
 1956              	.LFB47:
1085:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1086:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1087:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Receive an amount of data in DMA mode.
1088:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart: UART handle.
ARM GAS  /tmp/cciBqq80.s 			page 54


1089:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param pData: pointer to data buffer.
1090:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param Size: amount of data to be received.
1091:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1092:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         address of user data buffer for storing data to be received, should be aligned on a hal
1093:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         (as received data will be handled by DMA from halfword frontier). Depending on compilat
1094:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         use of specific alignment compilation directives or pragmas might be required to ensure
1095:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
1096:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1097:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
1098:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 1957              		.loc 1 1098 0
 1958              		.cfi_startproc
 1959 0000 80B5     		push	{r7, lr}
 1960              	.LCFI36:
 1961              		.cfi_def_cfa_offset 8
 1962              		.cfi_offset 7, -8
 1963              		.cfi_offset 14, -4
 1964 0002 86B0     		sub	sp, sp, #24
 1965              	.LCFI37:
 1966              		.cfi_def_cfa_offset 32
 1967 0004 00AF     		add	r7, sp, #0
 1968              	.LCFI38:
 1969              		.cfi_def_cfa_register 7
 1970 0006 F860     		str	r0, [r7, #12]
 1971 0008 B960     		str	r1, [r7, #8]
 1972 000a BB1D     		adds	r3, r7, #6
 1973 000c 1A80     		strh	r2, [r3]
1099:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint32_t *tmp;
1100:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1101:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1102:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(huart->RxState == HAL_UART_STATE_READY)
 1974              		.loc 1 1102 0
 1975 000e FB68     		ldr	r3, [r7, #12]
 1976 0010 6A22     		movs	r2, #106
 1977 0012 9B5C     		ldrb	r3, [r3, r2]
 1978 0014 DBB2     		uxtb	r3, r3
 1979 0016 202B     		cmp	r3, #32
 1980 0018 5CD1     		bne	.L109
1103:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1104:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if((pData == NULL ) || (Size == 0))
 1981              		.loc 1 1104 0
 1982 001a BB68     		ldr	r3, [r7, #8]
 1983 001c 002B     		cmp	r3, #0
 1984 001e 03D0     		beq	.L110
 1985              		.loc 1 1104 0 is_stmt 0 discriminator 1
 1986 0020 BB1D     		adds	r3, r7, #6
 1987 0022 1B88     		ldrh	r3, [r3]
 1988 0024 002B     		cmp	r3, #0
 1989 0026 01D1     		bne	.L111
 1990              	.L110:
1105:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1106:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       return HAL_ERROR;
 1991              		.loc 1 1106 0 is_stmt 1
 1992 0028 0123     		movs	r3, #1
 1993 002a 54E0     		b	.L112
 1994              	.L111:
1107:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
ARM GAS  /tmp/cciBqq80.s 			page 55


1108:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1109:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
1110:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        should be aligned on a u16 frontier, as data copy from RDR will be 
1111:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        handled by DMA from a u16 frontier. */
1112:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 1995              		.loc 1 1112 0
 1996 002c FB68     		ldr	r3, [r7, #12]
 1997 002e 9A68     		ldr	r2, [r3, #8]
 1998 0030 8023     		movs	r3, #128
 1999 0032 5B01     		lsls	r3, r3, #5
 2000 0034 9A42     		cmp	r2, r3
 2001 0036 0AD1     		bne	.L113
 2002              		.loc 1 1112 0 is_stmt 0 discriminator 1
 2003 0038 FB68     		ldr	r3, [r7, #12]
 2004 003a 1B69     		ldr	r3, [r3, #16]
 2005 003c 002B     		cmp	r3, #0
 2006 003e 06D1     		bne	.L113
1113:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1114:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if((((uint32_t)pData)&1) != 0)
 2007              		.loc 1 1114 0 is_stmt 1
 2008 0040 BB68     		ldr	r3, [r7, #8]
 2009 0042 1A00     		movs	r2, r3
 2010 0044 0123     		movs	r3, #1
 2011 0046 1340     		ands	r3, r2
 2012 0048 01D0     		beq	.L113
1115:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
1116:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         return  HAL_ERROR;
 2013              		.loc 1 1116 0
 2014 004a 0123     		movs	r3, #1
 2015 004c 43E0     		b	.L112
 2016              	.L113:
1117:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
1118:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1119:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1120:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Process Locked */
1121:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_LOCK(huart);
 2017              		.loc 1 1121 0
 2018 004e FB68     		ldr	r3, [r7, #12]
 2019 0050 6822     		movs	r2, #104
 2020 0052 9B5C     		ldrb	r3, [r3, r2]
 2021 0054 012B     		cmp	r3, #1
 2022 0056 01D1     		bne	.L114
 2023              		.loc 1 1121 0 is_stmt 0 discriminator 1
 2024 0058 0223     		movs	r3, #2
 2025 005a 3CE0     		b	.L112
 2026              	.L114:
 2027              		.loc 1 1121 0 discriminator 2
 2028 005c FB68     		ldr	r3, [r7, #12]
 2029 005e 6822     		movs	r2, #104
 2030 0060 0121     		movs	r1, #1
 2031 0062 9954     		strb	r1, [r3, r2]
1122:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1123:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->pRxBuffPtr = pData;
 2032              		.loc 1 1123 0 is_stmt 1 discriminator 2
 2033 0064 BA68     		ldr	r2, [r7, #8]
 2034 0066 FB68     		ldr	r3, [r7, #12]
 2035 0068 5A65     		str	r2, [r3, #84]
ARM GAS  /tmp/cciBqq80.s 			page 56


1124:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxXferSize = Size;
 2036              		.loc 1 1124 0 discriminator 2
 2037 006a FB68     		ldr	r3, [r7, #12]
 2038 006c BA1D     		adds	r2, r7, #6
 2039 006e 5821     		movs	r1, #88
 2040 0070 1288     		ldrh	r2, [r2]
 2041 0072 5A52     		strh	r2, [r3, r1]
1125:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1126:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 2042              		.loc 1 1126 0 discriminator 2
 2043 0074 FB68     		ldr	r3, [r7, #12]
 2044 0076 0022     		movs	r2, #0
 2045 0078 DA66     		str	r2, [r3, #108]
1127:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 2046              		.loc 1 1127 0 discriminator 2
 2047 007a FB68     		ldr	r3, [r7, #12]
 2048 007c 6A22     		movs	r2, #106
 2049 007e 2221     		movs	r1, #34
 2050 0080 9954     		strb	r1, [r3, r2]
1128:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1129:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Set the UART DMA transfer complete callback */
1130:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 2051              		.loc 1 1130 0 discriminator 2
 2052 0082 FB68     		ldr	r3, [r7, #12]
 2053 0084 5B6E     		ldr	r3, [r3, #100]
 2054 0086 164A     		ldr	r2, .L115
 2055 0088 9A62     		str	r2, [r3, #40]
1131:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1132:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Set the UART DMA Half transfer complete callback */
1133:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 2056              		.loc 1 1133 0 discriminator 2
 2057 008a FB68     		ldr	r3, [r7, #12]
 2058 008c 5B6E     		ldr	r3, [r3, #100]
 2059 008e 154A     		ldr	r2, .L115+4
 2060 0090 DA62     		str	r2, [r3, #44]
1134:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1135:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Set the DMA error callback */
1136:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->hdmarx->XferErrorCallback = UART_DMAError;
 2061              		.loc 1 1136 0 discriminator 2
 2062 0092 FB68     		ldr	r3, [r7, #12]
 2063 0094 5B6E     		ldr	r3, [r3, #100]
 2064 0096 144A     		ldr	r2, .L115+8
 2065 0098 1A63     		str	r2, [r3, #48]
1137:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1138:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Enable the DMA channel */
1139:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     tmp = (uint32_t*)&pData;
 2066              		.loc 1 1139 0 discriminator 2
 2067 009a 0823     		movs	r3, #8
 2068 009c FB18     		adds	r3, r7, r3
 2069 009e 7B61     		str	r3, [r7, #20]
1140:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 2070              		.loc 1 1140 0 discriminator 2
 2071 00a0 FB68     		ldr	r3, [r7, #12]
 2072 00a2 586E     		ldr	r0, [r3, #100]
 2073 00a4 FB68     		ldr	r3, [r7, #12]
 2074 00a6 1B68     		ldr	r3, [r3]
 2075 00a8 2433     		adds	r3, r3, #36
ARM GAS  /tmp/cciBqq80.s 			page 57


 2076 00aa 1900     		movs	r1, r3
 2077 00ac 7B69     		ldr	r3, [r7, #20]
 2078 00ae 1A68     		ldr	r2, [r3]
 2079 00b0 BB1D     		adds	r3, r7, #6
 2080 00b2 1B88     		ldrh	r3, [r3]
 2081 00b4 FFF7FEFF 		bl	HAL_DMA_Start_IT
1141:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1142:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Enable the DMA transfer for the receiver request by setting the DMAR bit
1143:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        in the UART CR3 register */
1144:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      huart->Instance->CR3 |= USART_CR3_DMAR;
 2082              		.loc 1 1144 0 discriminator 2
 2083 00b8 FB68     		ldr	r3, [r7, #12]
 2084 00ba 1B68     		ldr	r3, [r3]
 2085 00bc FA68     		ldr	r2, [r7, #12]
 2086 00be 1268     		ldr	r2, [r2]
 2087 00c0 9268     		ldr	r2, [r2, #8]
 2088 00c2 4021     		movs	r1, #64
 2089 00c4 0A43     		orrs	r2, r1
 2090 00c6 9A60     		str	r2, [r3, #8]
1145:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1146:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      /* Process Unlocked */
1147:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      __HAL_UNLOCK(huart);
 2091              		.loc 1 1147 0 discriminator 2
 2092 00c8 FB68     		ldr	r3, [r7, #12]
 2093 00ca 6822     		movs	r2, #104
 2094 00cc 0021     		movs	r1, #0
 2095 00ce 9954     		strb	r1, [r3, r2]
1148:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1149:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_OK;
 2096              		.loc 1 1149 0 discriminator 2
 2097 00d0 0023     		movs	r3, #0
 2098 00d2 00E0     		b	.L112
 2099              	.L109:
1150:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1151:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   else
1152:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1153:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_BUSY;
 2100              		.loc 1 1153 0
 2101 00d4 0223     		movs	r3, #2
 2102              	.L112:
1154:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1155:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 2103              		.loc 1 1155 0
 2104 00d6 1800     		movs	r0, r3
 2105 00d8 BD46     		mov	sp, r7
 2106 00da 06B0     		add	sp, sp, #24
 2107              		@ sp needed
 2108 00dc 80BD     		pop	{r7, pc}
 2109              	.L116:
 2110 00de C046     		.align	2
 2111              	.L115:
 2112 00e0 00000000 		.word	UART_DMAReceiveCplt
 2113 00e4 00000000 		.word	UART_DMARxHalfCplt
 2114 00e8 00000000 		.word	UART_DMAError
 2115              		.cfi_endproc
 2116              	.LFE47:
 2118              		.section	.text.HAL_UART_DMAPause,"ax",%progbits
ARM GAS  /tmp/cciBqq80.s 			page 58


 2119              		.align	1
 2120              		.global	HAL_UART_DMAPause
 2121              		.syntax unified
 2122              		.code	16
 2123              		.thumb_func
 2124              		.fpu softvfp
 2126              	HAL_UART_DMAPause:
 2127              	.LFB48:
1156:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1157:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1158:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Pause the DMA Transfer.
1159:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart: UART handle.
1160:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
1161:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1162:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
1163:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 2128              		.loc 1 1163 0
 2129              		.cfi_startproc
 2130 0000 80B5     		push	{r7, lr}
 2131              	.LCFI39:
 2132              		.cfi_def_cfa_offset 8
 2133              		.cfi_offset 7, -8
 2134              		.cfi_offset 14, -4
 2135 0002 82B0     		sub	sp, sp, #8
 2136              	.LCFI40:
 2137              		.cfi_def_cfa_offset 16
 2138 0004 00AF     		add	r7, sp, #0
 2139              	.LCFI41:
 2140              		.cfi_def_cfa_register 7
 2141 0006 7860     		str	r0, [r7, #4]
1164:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Process Locked */
1165:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_LOCK(huart);
 2142              		.loc 1 1165 0
 2143 0008 7B68     		ldr	r3, [r7, #4]
 2144 000a 6822     		movs	r2, #104
 2145 000c 9B5C     		ldrb	r3, [r3, r2]
 2146 000e 012B     		cmp	r3, #1
 2147 0010 01D1     		bne	.L118
 2148              		.loc 1 1165 0 is_stmt 0 discriminator 1
 2149 0012 0223     		movs	r3, #2
 2150 0014 24E0     		b	.L119
 2151              	.L118:
 2152              		.loc 1 1165 0 discriminator 2
 2153 0016 7B68     		ldr	r3, [r7, #4]
 2154 0018 6822     		movs	r2, #104
 2155 001a 0121     		movs	r1, #1
 2156 001c 9954     		strb	r1, [r3, r2]
1166:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1167:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(huart->gState == HAL_UART_STATE_BUSY_TX)
 2157              		.loc 1 1167 0 is_stmt 1 discriminator 2
 2158 001e 7B68     		ldr	r3, [r7, #4]
 2159 0020 6922     		movs	r2, #105
 2160 0022 9B5C     		ldrb	r3, [r3, r2]
 2161 0024 DBB2     		uxtb	r3, r3
 2162 0026 212B     		cmp	r3, #33
 2163 0028 07D1     		bne	.L120
1168:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
ARM GAS  /tmp/cciBqq80.s 			page 59


1169:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Disable the UART DMA Tx request */
1170:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->Instance->CR3 &= (uint32_t)(~USART_CR3_DMAT);
 2164              		.loc 1 1170 0
 2165 002a 7B68     		ldr	r3, [r7, #4]
 2166 002c 1B68     		ldr	r3, [r3]
 2167 002e 7A68     		ldr	r2, [r7, #4]
 2168 0030 1268     		ldr	r2, [r2]
 2169 0032 9268     		ldr	r2, [r2, #8]
 2170 0034 8021     		movs	r1, #128
 2171 0036 8A43     		bics	r2, r1
 2172 0038 9A60     		str	r2, [r3, #8]
 2173              	.L120:
1171:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1172:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 2174              		.loc 1 1172 0
 2175 003a 7B68     		ldr	r3, [r7, #4]
 2176 003c 6A22     		movs	r2, #106
 2177 003e 9B5C     		ldrb	r3, [r3, r2]
 2178 0040 DBB2     		uxtb	r3, r3
 2179 0042 222B     		cmp	r3, #34
 2180 0044 07D1     		bne	.L121
1173:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1174:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Disable the UART DMA Rx request */
1175:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->Instance->CR3 &= (uint32_t)(~USART_CR3_DMAR);
 2181              		.loc 1 1175 0
 2182 0046 7B68     		ldr	r3, [r7, #4]
 2183 0048 1B68     		ldr	r3, [r3]
 2184 004a 7A68     		ldr	r2, [r7, #4]
 2185 004c 1268     		ldr	r2, [r2]
 2186 004e 9268     		ldr	r2, [r2, #8]
 2187 0050 4021     		movs	r1, #64
 2188 0052 8A43     		bics	r2, r1
 2189 0054 9A60     		str	r2, [r3, #8]
 2190              	.L121:
1176:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1177:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1178:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Process Unlocked */
1179:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 2191              		.loc 1 1179 0
 2192 0056 7B68     		ldr	r3, [r7, #4]
 2193 0058 6822     		movs	r2, #104
 2194 005a 0021     		movs	r1, #0
 2195 005c 9954     		strb	r1, [r3, r2]
1180:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1181:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return HAL_OK;
 2196              		.loc 1 1181 0
 2197 005e 0023     		movs	r3, #0
 2198              	.L119:
1182:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 2199              		.loc 1 1182 0
 2200 0060 1800     		movs	r0, r3
 2201 0062 BD46     		mov	sp, r7
 2202 0064 02B0     		add	sp, sp, #8
 2203              		@ sp needed
 2204 0066 80BD     		pop	{r7, pc}
 2205              		.cfi_endproc
 2206              	.LFE48:
ARM GAS  /tmp/cciBqq80.s 			page 60


 2208              		.section	.text.HAL_UART_DMAResume,"ax",%progbits
 2209              		.align	1
 2210              		.global	HAL_UART_DMAResume
 2211              		.syntax unified
 2212              		.code	16
 2213              		.thumb_func
 2214              		.fpu softvfp
 2216              	HAL_UART_DMAResume:
 2217              	.LFB49:
1183:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1184:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1185:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Resume the DMA Transfer.
1186:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart: UART handle.
1187:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
1188:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1189:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
1190:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 2218              		.loc 1 1190 0
 2219              		.cfi_startproc
 2220 0000 80B5     		push	{r7, lr}
 2221              	.LCFI42:
 2222              		.cfi_def_cfa_offset 8
 2223              		.cfi_offset 7, -8
 2224              		.cfi_offset 14, -4
 2225 0002 82B0     		sub	sp, sp, #8
 2226              	.LCFI43:
 2227              		.cfi_def_cfa_offset 16
 2228 0004 00AF     		add	r7, sp, #0
 2229              	.LCFI44:
 2230              		.cfi_def_cfa_register 7
 2231 0006 7860     		str	r0, [r7, #4]
1191:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Process Locked */
1192:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_LOCK(huart);
 2232              		.loc 1 1192 0
 2233 0008 7B68     		ldr	r3, [r7, #4]
 2234 000a 6822     		movs	r2, #104
 2235 000c 9B5C     		ldrb	r3, [r3, r2]
 2236 000e 012B     		cmp	r3, #1
 2237 0010 01D1     		bne	.L123
 2238              		.loc 1 1192 0 is_stmt 0 discriminator 1
 2239 0012 0223     		movs	r3, #2
 2240 0014 28E0     		b	.L124
 2241              	.L123:
 2242              		.loc 1 1192 0 discriminator 2
 2243 0016 7B68     		ldr	r3, [r7, #4]
 2244 0018 6822     		movs	r2, #104
 2245 001a 0121     		movs	r1, #1
 2246 001c 9954     		strb	r1, [r3, r2]
1193:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1194:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(huart->gState == HAL_UART_STATE_BUSY_TX)
 2247              		.loc 1 1194 0 is_stmt 1 discriminator 2
 2248 001e 7B68     		ldr	r3, [r7, #4]
 2249 0020 6922     		movs	r2, #105
 2250 0022 9B5C     		ldrb	r3, [r3, r2]
 2251 0024 DBB2     		uxtb	r3, r3
 2252 0026 212B     		cmp	r3, #33
 2253 0028 07D1     		bne	.L125
ARM GAS  /tmp/cciBqq80.s 			page 61


1195:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1196:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Enable the UART DMA Tx request */
1197:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->Instance->CR3 |= USART_CR3_DMAT;
 2254              		.loc 1 1197 0
 2255 002a 7B68     		ldr	r3, [r7, #4]
 2256 002c 1B68     		ldr	r3, [r3]
 2257 002e 7A68     		ldr	r2, [r7, #4]
 2258 0030 1268     		ldr	r2, [r2]
 2259 0032 9268     		ldr	r2, [r2, #8]
 2260 0034 8021     		movs	r1, #128
 2261 0036 0A43     		orrs	r2, r1
 2262 0038 9A60     		str	r2, [r3, #8]
 2263              	.L125:
1198:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1199:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 2264              		.loc 1 1199 0
 2265 003a 7B68     		ldr	r3, [r7, #4]
 2266 003c 6A22     		movs	r2, #106
 2267 003e 9B5C     		ldrb	r3, [r3, r2]
 2268 0040 DBB2     		uxtb	r3, r3
 2269 0042 222B     		cmp	r3, #34
 2270 0044 0BD1     		bne	.L126
1200:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1201:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Clear the Overrun flag before resumming the Rx transfer*/
1202:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 2271              		.loc 1 1202 0
 2272 0046 7B68     		ldr	r3, [r7, #4]
 2273 0048 1B68     		ldr	r3, [r3]
 2274 004a 0822     		movs	r2, #8
 2275 004c 1A62     		str	r2, [r3, #32]
1203:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1204:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Enable the UART DMA Rx request */
1205:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->Instance->CR3 |= USART_CR3_DMAR;
 2276              		.loc 1 1205 0
 2277 004e 7B68     		ldr	r3, [r7, #4]
 2278 0050 1B68     		ldr	r3, [r3]
 2279 0052 7A68     		ldr	r2, [r7, #4]
 2280 0054 1268     		ldr	r2, [r2]
 2281 0056 9268     		ldr	r2, [r2, #8]
 2282 0058 4021     		movs	r1, #64
 2283 005a 0A43     		orrs	r2, r1
 2284 005c 9A60     		str	r2, [r3, #8]
 2285              	.L126:
1206:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1207:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1208:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Process Unlocked */
1209:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 2286              		.loc 1 1209 0
 2287 005e 7B68     		ldr	r3, [r7, #4]
 2288 0060 6822     		movs	r2, #104
 2289 0062 0021     		movs	r1, #0
 2290 0064 9954     		strb	r1, [r3, r2]
1210:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1211:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return HAL_OK;
 2291              		.loc 1 1211 0
 2292 0066 0023     		movs	r3, #0
 2293              	.L124:
ARM GAS  /tmp/cciBqq80.s 			page 62


1212:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 2294              		.loc 1 1212 0
 2295 0068 1800     		movs	r0, r3
 2296 006a BD46     		mov	sp, r7
 2297 006c 02B0     		add	sp, sp, #8
 2298              		@ sp needed
 2299 006e 80BD     		pop	{r7, pc}
 2300              		.cfi_endproc
 2301              	.LFE49:
 2303              		.section	.text.HAL_UART_DMAStop,"ax",%progbits
 2304              		.align	1
 2305              		.global	HAL_UART_DMAStop
 2306              		.syntax unified
 2307              		.code	16
 2308              		.thumb_func
 2309              		.fpu softvfp
 2311              	HAL_UART_DMAStop:
 2312              	.LFB50:
1213:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1214:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1215:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Stop the DMA Transfer.
1216:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart: UART handle.
1217:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
1218:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1219:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
1220:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 2313              		.loc 1 1220 0
 2314              		.cfi_startproc
 2315 0000 80B5     		push	{r7, lr}
 2316              	.LCFI45:
 2317              		.cfi_def_cfa_offset 8
 2318              		.cfi_offset 7, -8
 2319              		.cfi_offset 14, -4
 2320 0002 82B0     		sub	sp, sp, #8
 2321              	.LCFI46:
 2322              		.cfi_def_cfa_offset 16
 2323 0004 00AF     		add	r7, sp, #0
 2324              	.LCFI47:
 2325              		.cfi_def_cfa_register 7
 2326 0006 7860     		str	r0, [r7, #4]
1221:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* The Lock is not implemented on this API to allow the user application
1222:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      to call the HAL UART API under callbacks HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
1223:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      HAL_UART_TxHalfCpltCallback() / HAL_UART_RxHalfCpltCallback (): 
1224:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete i
1225:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      generated if the DMA transfer interruption occurs at the middle or at the end of the stream
1226:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      and the corresponding call back is executed. 
1227:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      */
1228:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   
1229:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Disable the UART Tx/Rx DMA requests */
1230:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->Instance->CR3 &= ~USART_CR3_DMAT;
 2327              		.loc 1 1230 0
 2328 0008 7B68     		ldr	r3, [r7, #4]
 2329 000a 1B68     		ldr	r3, [r3]
 2330 000c 7A68     		ldr	r2, [r7, #4]
 2331 000e 1268     		ldr	r2, [r2]
 2332 0010 9268     		ldr	r2, [r2, #8]
 2333 0012 8021     		movs	r1, #128
ARM GAS  /tmp/cciBqq80.s 			page 63


 2334 0014 8A43     		bics	r2, r1
 2335 0016 9A60     		str	r2, [r3, #8]
1231:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->Instance->CR3 &= ~USART_CR3_DMAR;
 2336              		.loc 1 1231 0
 2337 0018 7B68     		ldr	r3, [r7, #4]
 2338 001a 1B68     		ldr	r3, [r3]
 2339 001c 7A68     		ldr	r2, [r7, #4]
 2340 001e 1268     		ldr	r2, [r2]
 2341 0020 9268     		ldr	r2, [r2, #8]
 2342 0022 4021     		movs	r1, #64
 2343 0024 8A43     		bics	r2, r1
 2344 0026 9A60     		str	r2, [r3, #8]
1232:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1233:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Abort the UART DMA tx channel */
1234:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(huart->hdmatx != NULL)
 2345              		.loc 1 1234 0
 2346 0028 7B68     		ldr	r3, [r7, #4]
 2347 002a 1B6E     		ldr	r3, [r3, #96]
 2348 002c 002B     		cmp	r3, #0
 2349 002e 04D0     		beq	.L128
1235:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1236:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     HAL_DMA_Abort(huart->hdmatx);
 2350              		.loc 1 1236 0
 2351 0030 7B68     		ldr	r3, [r7, #4]
 2352 0032 1B6E     		ldr	r3, [r3, #96]
 2353 0034 1800     		movs	r0, r3
 2354 0036 FFF7FEFF 		bl	HAL_DMA_Abort
 2355              	.L128:
1237:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1238:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Abort the UART DMA rx channel */
1239:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(huart->hdmarx != NULL)
 2356              		.loc 1 1239 0
 2357 003a 7B68     		ldr	r3, [r7, #4]
 2358 003c 5B6E     		ldr	r3, [r3, #100]
 2359 003e 002B     		cmp	r3, #0
 2360 0040 04D0     		beq	.L129
1240:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1241:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     HAL_DMA_Abort(huart->hdmarx);
 2361              		.loc 1 1241 0
 2362 0042 7B68     		ldr	r3, [r7, #4]
 2363 0044 5B6E     		ldr	r3, [r3, #100]
 2364 0046 1800     		movs	r0, r3
 2365 0048 FFF7FEFF 		bl	HAL_DMA_Abort
 2366              	.L129:
1242:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1243:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1244:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 2367              		.loc 1 1244 0
 2368 004c 7B68     		ldr	r3, [r7, #4]
 2369 004e 6922     		movs	r2, #105
 2370 0050 2021     		movs	r1, #32
 2371 0052 9954     		strb	r1, [r3, r2]
1245:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 2372              		.loc 1 1245 0
 2373 0054 7B68     		ldr	r3, [r7, #4]
 2374 0056 6A22     		movs	r2, #106
 2375 0058 2021     		movs	r1, #32
ARM GAS  /tmp/cciBqq80.s 			page 64


 2376 005a 9954     		strb	r1, [r3, r2]
1246:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1247:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return HAL_OK;
 2377              		.loc 1 1247 0
 2378 005c 0023     		movs	r3, #0
1248:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 2379              		.loc 1 1248 0
 2380 005e 1800     		movs	r0, r3
 2381 0060 BD46     		mov	sp, r7
 2382 0062 02B0     		add	sp, sp, #8
 2383              		@ sp needed
 2384 0064 80BD     		pop	{r7, pc}
 2385              		.cfi_endproc
 2386              	.LFE50:
 2388              		.section	.text.HAL_UART_TxCpltCallback,"ax",%progbits
 2389              		.align	1
 2390              		.weak	HAL_UART_TxCpltCallback
 2391              		.syntax unified
 2392              		.code	16
 2393              		.thumb_func
 2394              		.fpu softvfp
 2396              	HAL_UART_TxCpltCallback:
 2397              	.LFB51:
1249:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1250:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1251:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Tx Transfer completed callback.
1252:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart: UART handle.
1253:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
1254:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1255:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****  __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
1256:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 2398              		.loc 1 1256 0
 2399              		.cfi_startproc
 2400 0000 80B5     		push	{r7, lr}
 2401              	.LCFI48:
 2402              		.cfi_def_cfa_offset 8
 2403              		.cfi_offset 7, -8
 2404              		.cfi_offset 14, -4
 2405 0002 82B0     		sub	sp, sp, #8
 2406              	.LCFI49:
 2407              		.cfi_def_cfa_offset 16
 2408 0004 00AF     		add	r7, sp, #0
 2409              	.LCFI50:
 2410              		.cfi_def_cfa_register 7
 2411 0006 7860     		str	r0, [r7, #4]
1257:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
1258:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UNUSED(huart);
1259:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1260:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1261:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             the HAL_UART_TxCpltCallback can be implemented in the user file.
1262:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****    */
1263:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 2412              		.loc 1 1263 0
 2413 0008 C046     		nop
 2414 000a BD46     		mov	sp, r7
 2415 000c 02B0     		add	sp, sp, #8
 2416              		@ sp needed
ARM GAS  /tmp/cciBqq80.s 			page 65


 2417 000e 80BD     		pop	{r7, pc}
 2418              		.cfi_endproc
 2419              	.LFE51:
 2421              		.section	.text.HAL_UART_TxHalfCpltCallback,"ax",%progbits
 2422              		.align	1
 2423              		.weak	HAL_UART_TxHalfCpltCallback
 2424              		.syntax unified
 2425              		.code	16
 2426              		.thumb_func
 2427              		.fpu softvfp
 2429              	HAL_UART_TxHalfCpltCallback:
 2430              	.LFB52:
1264:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1265:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1266:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  Tx Half Transfer completed callback.
1267:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart: UART handle.
1268:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
1269:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1270:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****  __weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
1271:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 2431              		.loc 1 1271 0
 2432              		.cfi_startproc
 2433 0000 80B5     		push	{r7, lr}
 2434              	.LCFI51:
 2435              		.cfi_def_cfa_offset 8
 2436              		.cfi_offset 7, -8
 2437              		.cfi_offset 14, -4
 2438 0002 82B0     		sub	sp, sp, #8
 2439              	.LCFI52:
 2440              		.cfi_def_cfa_offset 16
 2441 0004 00AF     		add	r7, sp, #0
 2442              	.LCFI53:
 2443              		.cfi_def_cfa_register 7
 2444 0006 7860     		str	r0, [r7, #4]
1272:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
1273:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UNUSED(huart);
1274:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1275:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
1276:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****            the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
1277:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****    */
1278:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 2445              		.loc 1 1278 0
 2446 0008 C046     		nop
 2447 000a BD46     		mov	sp, r7
 2448 000c 02B0     		add	sp, sp, #8
 2449              		@ sp needed
 2450 000e 80BD     		pop	{r7, pc}
 2451              		.cfi_endproc
 2452              	.LFE52:
 2454              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 2455              		.align	1
 2456              		.weak	HAL_UART_RxCpltCallback
 2457              		.syntax unified
 2458              		.code	16
 2459              		.thumb_func
 2460              		.fpu softvfp
 2462              	HAL_UART_RxCpltCallback:
ARM GAS  /tmp/cciBqq80.s 			page 66


 2463              	.LFB53:
1279:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1280:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1281:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Rx Transfer completed callback.
1282:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart: UART handle.
1283:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
1284:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1285:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** __weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
1286:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 2464              		.loc 1 1286 0
 2465              		.cfi_startproc
 2466 0000 80B5     		push	{r7, lr}
 2467              	.LCFI54:
 2468              		.cfi_def_cfa_offset 8
 2469              		.cfi_offset 7, -8
 2470              		.cfi_offset 14, -4
 2471 0002 82B0     		sub	sp, sp, #8
 2472              	.LCFI55:
 2473              		.cfi_def_cfa_offset 16
 2474 0004 00AF     		add	r7, sp, #0
 2475              	.LCFI56:
 2476              		.cfi_def_cfa_register 7
 2477 0006 7860     		str	r0, [r7, #4]
1287:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
1288:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UNUSED(huart);
1289:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1290:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1291:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             the HAL_UART_RxCpltCallback can be implemented in the user file.
1292:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****    */
1293:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 2478              		.loc 1 1293 0
 2479 0008 C046     		nop
 2480 000a BD46     		mov	sp, r7
 2481 000c 02B0     		add	sp, sp, #8
 2482              		@ sp needed
 2483 000e 80BD     		pop	{r7, pc}
 2484              		.cfi_endproc
 2485              	.LFE53:
 2487              		.section	.text.HAL_UART_RxHalfCpltCallback,"ax",%progbits
 2488              		.align	1
 2489              		.weak	HAL_UART_RxHalfCpltCallback
 2490              		.syntax unified
 2491              		.code	16
 2492              		.thumb_func
 2493              		.fpu softvfp
 2495              	HAL_UART_RxHalfCpltCallback:
 2496              	.LFB54:
1294:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1295:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1296:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  Rx Half Transfer completed callback.
1297:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart: UART handle.
1298:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
1299:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1300:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** __weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
1301:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 2497              		.loc 1 1301 0
 2498              		.cfi_startproc
ARM GAS  /tmp/cciBqq80.s 			page 67


 2499 0000 80B5     		push	{r7, lr}
 2500              	.LCFI57:
 2501              		.cfi_def_cfa_offset 8
 2502              		.cfi_offset 7, -8
 2503              		.cfi_offset 14, -4
 2504 0002 82B0     		sub	sp, sp, #8
 2505              	.LCFI58:
 2506              		.cfi_def_cfa_offset 16
 2507 0004 00AF     		add	r7, sp, #0
 2508              	.LCFI59:
 2509              		.cfi_def_cfa_register 7
 2510 0006 7860     		str	r0, [r7, #4]
1302:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
1303:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UNUSED(huart);
1304:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1305:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
1306:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****            the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
1307:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****    */
1308:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 2511              		.loc 1 1308 0
 2512 0008 C046     		nop
 2513 000a BD46     		mov	sp, r7
 2514 000c 02B0     		add	sp, sp, #8
 2515              		@ sp needed
 2516 000e 80BD     		pop	{r7, pc}
 2517              		.cfi_endproc
 2518              	.LFE54:
 2520              		.section	.text.HAL_UART_ErrorCallback,"ax",%progbits
 2521              		.align	1
 2522              		.weak	HAL_UART_ErrorCallback
 2523              		.syntax unified
 2524              		.code	16
 2525              		.thumb_func
 2526              		.fpu softvfp
 2528              	HAL_UART_ErrorCallback:
 2529              	.LFB55:
1309:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1310:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1311:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief UART error callback.
1312:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart: UART handle.
1313:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
1314:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1315:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****  __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
1316:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 2530              		.loc 1 1316 0
 2531              		.cfi_startproc
 2532 0000 80B5     		push	{r7, lr}
 2533              	.LCFI60:
 2534              		.cfi_def_cfa_offset 8
 2535              		.cfi_offset 7, -8
 2536              		.cfi_offset 14, -4
 2537 0002 82B0     		sub	sp, sp, #8
 2538              	.LCFI61:
 2539              		.cfi_def_cfa_offset 16
 2540 0004 00AF     		add	r7, sp, #0
 2541              	.LCFI62:
 2542              		.cfi_def_cfa_register 7
ARM GAS  /tmp/cciBqq80.s 			page 68


 2543 0006 7860     		str	r0, [r7, #4]
1317:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
1318:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UNUSED(huart);
1319:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1320:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1321:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             the HAL_UART_ErrorCallback can be implemented in the user file.
1322:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****    */
1323:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 2544              		.loc 1 1323 0
 2545 0008 C046     		nop
 2546 000a BD46     		mov	sp, r7
 2547 000c 02B0     		add	sp, sp, #8
 2548              		@ sp needed
 2549 000e 80BD     		pop	{r7, pc}
 2550              		.cfi_endproc
 2551              	.LFE55:
 2553              		.section	.text.HAL_MultiProcessor_EnableMuteMode,"ax",%progbits
 2554              		.align	1
 2555              		.global	HAL_MultiProcessor_EnableMuteMode
 2556              		.syntax unified
 2557              		.code	16
 2558              		.thumb_func
 2559              		.fpu softvfp
 2561              	HAL_MultiProcessor_EnableMuteMode:
 2562              	.LFB56:
1324:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1325:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1326:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @}
1327:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1328:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1329:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group3 Peripheral Control functions
1330:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *  @brief   UART control functions
1331:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *
1332:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** @verbatim
1333:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****  ===============================================================================
1334:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****                       ##### Peripheral Control functions #####
1335:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****  ===============================================================================
1336:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     [..]
1337:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     This subsection provides a set of functions allowing to control the UART.
1338:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      (+) HAL_MultiProcessor_EnableMuteMode() API enables mute mode
1339:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      (+) HAL_MultiProcessor_DisableMuteMode() API disables mute mode
1340:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      (+) HAL_MultiProcessor_EnterMuteMode() API enters mute mode
1341:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      (+) HAL_HalfDuplex_EnableTransmitter() API disables receiver and enables transmitter
1342:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      (+) HAL_HalfDuplex_EnableReceiver() API disables transmitter and enables receiver
1343:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** @endverbatim
1344:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @{
1345:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1346:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1347:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1348:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Enable UART in mute mode (does not mean UART enters mute mode;
1349:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * to enter mute mode, HAL_MultiProcessor_EnterMuteMode() API must be called).
1350:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart: UART handle.
1351:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
1352:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1353:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_EnableMuteMode(UART_HandleTypeDef *huart)
1354:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 2563              		.loc 1 1354 0
ARM GAS  /tmp/cciBqq80.s 			page 69


 2564              		.cfi_startproc
 2565 0000 80B5     		push	{r7, lr}
 2566              	.LCFI63:
 2567              		.cfi_def_cfa_offset 8
 2568              		.cfi_offset 7, -8
 2569              		.cfi_offset 14, -4
 2570 0002 82B0     		sub	sp, sp, #8
 2571              	.LCFI64:
 2572              		.cfi_def_cfa_offset 16
 2573 0004 00AF     		add	r7, sp, #0
 2574              	.LCFI65:
 2575              		.cfi_def_cfa_register 7
 2576 0006 7860     		str	r0, [r7, #4]
1355:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Process Locked */
1356:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_LOCK(huart);
 2577              		.loc 1 1356 0
 2578 0008 7B68     		ldr	r3, [r7, #4]
 2579 000a 6822     		movs	r2, #104
 2580 000c 9B5C     		ldrb	r3, [r3, r2]
 2581 000e 012B     		cmp	r3, #1
 2582 0010 01D1     		bne	.L137
 2583              		.loc 1 1356 0 is_stmt 0 discriminator 1
 2584 0012 0223     		movs	r3, #2
 2585 0014 19E0     		b	.L138
 2586              	.L137:
 2587              		.loc 1 1356 0 discriminator 2
 2588 0016 7B68     		ldr	r3, [r7, #4]
 2589 0018 6822     		movs	r2, #104
 2590 001a 0121     		movs	r1, #1
 2591 001c 9954     		strb	r1, [r3, r2]
1357:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1358:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 2592              		.loc 1 1358 0 is_stmt 1 discriminator 2
 2593 001e 7B68     		ldr	r3, [r7, #4]
 2594 0020 6922     		movs	r2, #105
 2595 0022 2421     		movs	r1, #36
 2596 0024 9954     		strb	r1, [r3, r2]
1359:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1360:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Enable USART mute mode by setting the MME bit in the CR1 register */
1361:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->Instance->CR1 |= USART_CR1_MME;
 2597              		.loc 1 1361 0 discriminator 2
 2598 0026 7B68     		ldr	r3, [r7, #4]
 2599 0028 1B68     		ldr	r3, [r3]
 2600 002a 7A68     		ldr	r2, [r7, #4]
 2601 002c 1268     		ldr	r2, [r2]
 2602 002e 1268     		ldr	r2, [r2]
 2603 0030 8021     		movs	r1, #128
 2604 0032 8901     		lsls	r1, r1, #6
 2605 0034 0A43     		orrs	r2, r1
 2606 0036 1A60     		str	r2, [r3]
1362:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1363:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 2607              		.loc 1 1363 0 discriminator 2
 2608 0038 7B68     		ldr	r3, [r7, #4]
 2609 003a 6922     		movs	r2, #105
 2610 003c 2021     		movs	r1, #32
 2611 003e 9954     		strb	r1, [r3, r2]
ARM GAS  /tmp/cciBqq80.s 			page 70


1364:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1365:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return (UART_CheckIdleState(huart));
 2612              		.loc 1 1365 0 discriminator 2
 2613 0040 7B68     		ldr	r3, [r7, #4]
 2614 0042 1800     		movs	r0, r3
 2615 0044 FFF7FEFF 		bl	UART_CheckIdleState
 2616 0048 0300     		movs	r3, r0
 2617              	.L138:
1366:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 2618              		.loc 1 1366 0
 2619 004a 1800     		movs	r0, r3
 2620 004c BD46     		mov	sp, r7
 2621 004e 02B0     		add	sp, sp, #8
 2622              		@ sp needed
 2623 0050 80BD     		pop	{r7, pc}
 2624              		.cfi_endproc
 2625              	.LFE56:
 2627              		.section	.text.HAL_MultiProcessor_DisableMuteMode,"ax",%progbits
 2628              		.align	1
 2629              		.global	HAL_MultiProcessor_DisableMuteMode
 2630              		.syntax unified
 2631              		.code	16
 2632              		.thumb_func
 2633              		.fpu softvfp
 2635              	HAL_MultiProcessor_DisableMuteMode:
 2636              	.LFB57:
1367:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1368:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1369:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Disable UART mute mode (does not mean the UART actually exits mute mode
1370:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * as it may not have been in mute mode at this very moment).
1371:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart: UART handle.
1372:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
1373:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1374:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_DisableMuteMode(UART_HandleTypeDef *huart)
1375:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 2637              		.loc 1 1375 0
 2638              		.cfi_startproc
 2639 0000 80B5     		push	{r7, lr}
 2640              	.LCFI66:
 2641              		.cfi_def_cfa_offset 8
 2642              		.cfi_offset 7, -8
 2643              		.cfi_offset 14, -4
 2644 0002 82B0     		sub	sp, sp, #8
 2645              	.LCFI67:
 2646              		.cfi_def_cfa_offset 16
 2647 0004 00AF     		add	r7, sp, #0
 2648              	.LCFI68:
 2649              		.cfi_def_cfa_register 7
 2650 0006 7860     		str	r0, [r7, #4]
1376:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Process Locked */
1377:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_LOCK(huart);
 2651              		.loc 1 1377 0
 2652 0008 7B68     		ldr	r3, [r7, #4]
 2653 000a 6822     		movs	r2, #104
 2654 000c 9B5C     		ldrb	r3, [r3, r2]
 2655 000e 012B     		cmp	r3, #1
 2656 0010 01D1     		bne	.L140
ARM GAS  /tmp/cciBqq80.s 			page 71


 2657              		.loc 1 1377 0 is_stmt 0 discriminator 1
 2658 0012 0223     		movs	r3, #2
 2659 0014 18E0     		b	.L141
 2660              	.L140:
 2661              		.loc 1 1377 0 discriminator 2
 2662 0016 7B68     		ldr	r3, [r7, #4]
 2663 0018 6822     		movs	r2, #104
 2664 001a 0121     		movs	r1, #1
 2665 001c 9954     		strb	r1, [r3, r2]
1378:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1379:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 2666              		.loc 1 1379 0 is_stmt 1 discriminator 2
 2667 001e 7B68     		ldr	r3, [r7, #4]
 2668 0020 6922     		movs	r2, #105
 2669 0022 2421     		movs	r1, #36
 2670 0024 9954     		strb	r1, [r3, r2]
1380:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1381:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****    /* Disable USART mute mode by clearing the MME bit in the CR1 register */
1382:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->Instance->CR1 &= ~(USART_CR1_MME);
 2671              		.loc 1 1382 0 discriminator 2
 2672 0026 7B68     		ldr	r3, [r7, #4]
 2673 0028 1B68     		ldr	r3, [r3]
 2674 002a 7A68     		ldr	r2, [r7, #4]
 2675 002c 1268     		ldr	r2, [r2]
 2676 002e 1268     		ldr	r2, [r2]
 2677 0030 0749     		ldr	r1, .L142
 2678 0032 0A40     		ands	r2, r1
 2679 0034 1A60     		str	r2, [r3]
1383:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1384:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 2680              		.loc 1 1384 0 discriminator 2
 2681 0036 7B68     		ldr	r3, [r7, #4]
 2682 0038 6922     		movs	r2, #105
 2683 003a 2021     		movs	r1, #32
 2684 003c 9954     		strb	r1, [r3, r2]
1385:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1386:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return (UART_CheckIdleState(huart));
 2685              		.loc 1 1386 0 discriminator 2
 2686 003e 7B68     		ldr	r3, [r7, #4]
 2687 0040 1800     		movs	r0, r3
 2688 0042 FFF7FEFF 		bl	UART_CheckIdleState
 2689 0046 0300     		movs	r3, r0
 2690              	.L141:
1387:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 2691              		.loc 1 1387 0
 2692 0048 1800     		movs	r0, r3
 2693 004a BD46     		mov	sp, r7
 2694 004c 02B0     		add	sp, sp, #8
 2695              		@ sp needed
 2696 004e 80BD     		pop	{r7, pc}
 2697              	.L143:
 2698              		.align	2
 2699              	.L142:
 2700 0050 FFDFFFFF 		.word	-8193
 2701              		.cfi_endproc
 2702              	.LFE57:
 2704              		.section	.text.HAL_MultiProcessor_EnterMuteMode,"ax",%progbits
ARM GAS  /tmp/cciBqq80.s 			page 72


 2705              		.align	1
 2706              		.global	HAL_MultiProcessor_EnterMuteMode
 2707              		.syntax unified
 2708              		.code	16
 2709              		.thumb_func
 2710              		.fpu softvfp
 2712              	HAL_MultiProcessor_EnterMuteMode:
 2713              	.LFB58:
1388:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1389:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1390:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Enter UART mute mode (means UART actually enters mute mode).
1391:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note  To exit from mute mode, HAL_MultiProcessor_DisableMuteMode() API must be called.
1392:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart: UART handle.
1393:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
1394:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1395:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** void HAL_MultiProcessor_EnterMuteMode(UART_HandleTypeDef *huart)
1396:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 2714              		.loc 1 1396 0
 2715              		.cfi_startproc
 2716 0000 80B5     		push	{r7, lr}
 2717              	.LCFI69:
 2718              		.cfi_def_cfa_offset 8
 2719              		.cfi_offset 7, -8
 2720              		.cfi_offset 14, -4
 2721 0002 82B0     		sub	sp, sp, #8
 2722              	.LCFI70:
 2723              		.cfi_def_cfa_offset 16
 2724 0004 00AF     		add	r7, sp, #0
 2725              	.LCFI71:
 2726              		.cfi_def_cfa_register 7
 2727 0006 7860     		str	r0, [r7, #4]
1397:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UART_SEND_REQ(huart, UART_MUTE_MODE_REQUEST);
 2728              		.loc 1 1397 0
 2729 0008 7B68     		ldr	r3, [r7, #4]
 2730 000a 1B68     		ldr	r3, [r3]
 2731 000c 7A68     		ldr	r2, [r7, #4]
 2732 000e 1268     		ldr	r2, [r2]
 2733 0010 9269     		ldr	r2, [r2, #24]
 2734 0012 0421     		movs	r1, #4
 2735 0014 0A43     		orrs	r2, r1
 2736 0016 9A61     		str	r2, [r3, #24]
1398:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 2737              		.loc 1 1398 0
 2738 0018 C046     		nop
 2739 001a BD46     		mov	sp, r7
 2740 001c 02B0     		add	sp, sp, #8
 2741              		@ sp needed
 2742 001e 80BD     		pop	{r7, pc}
 2743              		.cfi_endproc
 2744              	.LFE58:
 2746              		.section	.text.HAL_HalfDuplex_EnableTransmitter,"ax",%progbits
 2747              		.align	1
 2748              		.global	HAL_HalfDuplex_EnableTransmitter
 2749              		.syntax unified
 2750              		.code	16
 2751              		.thumb_func
 2752              		.fpu softvfp
ARM GAS  /tmp/cciBqq80.s 			page 73


 2754              	HAL_HalfDuplex_EnableTransmitter:
 2755              	.LFB59:
1399:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1400:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1401:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  Enable the UART transmitter and disable the UART receiver.
1402:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart: UART handle.
1403:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
1404:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1405:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
1406:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 2756              		.loc 1 1406 0
 2757              		.cfi_startproc
 2758 0000 80B5     		push	{r7, lr}
 2759              	.LCFI72:
 2760              		.cfi_def_cfa_offset 8
 2761              		.cfi_offset 7, -8
 2762              		.cfi_offset 14, -4
 2763 0002 82B0     		sub	sp, sp, #8
 2764              	.LCFI73:
 2765              		.cfi_def_cfa_offset 16
 2766 0004 00AF     		add	r7, sp, #0
 2767              	.LCFI74:
 2768              		.cfi_def_cfa_register 7
 2769 0006 7860     		str	r0, [r7, #4]
1407:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Process Locked */
1408:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_LOCK(huart);
 2770              		.loc 1 1408 0
 2771 0008 7B68     		ldr	r3, [r7, #4]
 2772 000a 6822     		movs	r2, #104
 2773 000c 9B5C     		ldrb	r3, [r3, r2]
 2774 000e 012B     		cmp	r3, #1
 2775 0010 01D1     		bne	.L146
 2776              		.loc 1 1408 0 is_stmt 0 discriminator 1
 2777 0012 0223     		movs	r3, #2
 2778 0014 20E0     		b	.L147
 2779              	.L146:
 2780              		.loc 1 1408 0 discriminator 2
 2781 0016 7B68     		ldr	r3, [r7, #4]
 2782 0018 6822     		movs	r2, #104
 2783 001a 0121     		movs	r1, #1
 2784 001c 9954     		strb	r1, [r3, r2]
1409:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 2785              		.loc 1 1409 0 is_stmt 1 discriminator 2
 2786 001e 7B68     		ldr	r3, [r7, #4]
 2787 0020 6922     		movs	r2, #105
 2788 0022 2421     		movs	r1, #36
 2789 0024 9954     		strb	r1, [r3, r2]
1410:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1411:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Clear TE and RE bits */
1412:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 2790              		.loc 1 1412 0 discriminator 2
 2791 0026 7B68     		ldr	r3, [r7, #4]
 2792 0028 1B68     		ldr	r3, [r3]
 2793 002a 7A68     		ldr	r2, [r7, #4]
 2794 002c 1268     		ldr	r2, [r2]
 2795 002e 1268     		ldr	r2, [r2]
 2796 0030 0C21     		movs	r1, #12
ARM GAS  /tmp/cciBqq80.s 			page 74


 2797 0032 8A43     		bics	r2, r1
 2798 0034 1A60     		str	r2, [r3]
1413:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
1414:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 2799              		.loc 1 1414 0 discriminator 2
 2800 0036 7B68     		ldr	r3, [r7, #4]
 2801 0038 1B68     		ldr	r3, [r3]
 2802 003a 7A68     		ldr	r2, [r7, #4]
 2803 003c 1268     		ldr	r2, [r2]
 2804 003e 1268     		ldr	r2, [r2]
 2805 0040 0821     		movs	r1, #8
 2806 0042 0A43     		orrs	r2, r1
 2807 0044 1A60     		str	r2, [r3]
1415:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1416:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 2808              		.loc 1 1416 0 discriminator 2
 2809 0046 7B68     		ldr	r3, [r7, #4]
 2810 0048 6922     		movs	r2, #105
 2811 004a 2021     		movs	r1, #32
 2812 004c 9954     		strb	r1, [r3, r2]
1417:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1418:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Process Unlocked */
1419:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 2813              		.loc 1 1419 0 discriminator 2
 2814 004e 7B68     		ldr	r3, [r7, #4]
 2815 0050 6822     		movs	r2, #104
 2816 0052 0021     		movs	r1, #0
 2817 0054 9954     		strb	r1, [r3, r2]
1420:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1421:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return HAL_OK;
 2818              		.loc 1 1421 0 discriminator 2
 2819 0056 0023     		movs	r3, #0
 2820              	.L147:
1422:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 2821              		.loc 1 1422 0
 2822 0058 1800     		movs	r0, r3
 2823 005a BD46     		mov	sp, r7
 2824 005c 02B0     		add	sp, sp, #8
 2825              		@ sp needed
 2826 005e 80BD     		pop	{r7, pc}
 2827              		.cfi_endproc
 2828              	.LFE59:
 2830              		.section	.text.HAL_HalfDuplex_EnableReceiver,"ax",%progbits
 2831              		.align	1
 2832              		.global	HAL_HalfDuplex_EnableReceiver
 2833              		.syntax unified
 2834              		.code	16
 2835              		.thumb_func
 2836              		.fpu softvfp
 2838              	HAL_HalfDuplex_EnableReceiver:
 2839              	.LFB60:
1423:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1424:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1425:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  Enable the UART receiver and disable the UART transmitter.
1426:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart: UART handle.
1427:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status.
1428:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
ARM GAS  /tmp/cciBqq80.s 			page 75


1429:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
1430:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 2840              		.loc 1 1430 0
 2841              		.cfi_startproc
 2842 0000 80B5     		push	{r7, lr}
 2843              	.LCFI75:
 2844              		.cfi_def_cfa_offset 8
 2845              		.cfi_offset 7, -8
 2846              		.cfi_offset 14, -4
 2847 0002 82B0     		sub	sp, sp, #8
 2848              	.LCFI76:
 2849              		.cfi_def_cfa_offset 16
 2850 0004 00AF     		add	r7, sp, #0
 2851              	.LCFI77:
 2852              		.cfi_def_cfa_register 7
 2853 0006 7860     		str	r0, [r7, #4]
1431:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Process Locked */
1432:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_LOCK(huart);
 2854              		.loc 1 1432 0
 2855 0008 7B68     		ldr	r3, [r7, #4]
 2856 000a 6822     		movs	r2, #104
 2857 000c 9B5C     		ldrb	r3, [r3, r2]
 2858 000e 012B     		cmp	r3, #1
 2859 0010 01D1     		bne	.L149
 2860              		.loc 1 1432 0 is_stmt 0 discriminator 1
 2861 0012 0223     		movs	r3, #2
 2862 0014 20E0     		b	.L150
 2863              	.L149:
 2864              		.loc 1 1432 0 discriminator 2
 2865 0016 7B68     		ldr	r3, [r7, #4]
 2866 0018 6822     		movs	r2, #104
 2867 001a 0121     		movs	r1, #1
 2868 001c 9954     		strb	r1, [r3, r2]
1433:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 2869              		.loc 1 1433 0 is_stmt 1 discriminator 2
 2870 001e 7B68     		ldr	r3, [r7, #4]
 2871 0020 6922     		movs	r2, #105
 2872 0022 2421     		movs	r1, #36
 2873 0024 9954     		strb	r1, [r3, r2]
1434:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1435:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Clear TE and RE bits */
1436:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 2874              		.loc 1 1436 0 discriminator 2
 2875 0026 7B68     		ldr	r3, [r7, #4]
 2876 0028 1B68     		ldr	r3, [r3]
 2877 002a 7A68     		ldr	r2, [r7, #4]
 2878 002c 1268     		ldr	r2, [r2]
 2879 002e 1268     		ldr	r2, [r2]
 2880 0030 0C21     		movs	r1, #12
 2881 0032 8A43     		bics	r2, r1
 2882 0034 1A60     		str	r2, [r3]
1437:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
1438:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 2883              		.loc 1 1438 0 discriminator 2
 2884 0036 7B68     		ldr	r3, [r7, #4]
 2885 0038 1B68     		ldr	r3, [r3]
 2886 003a 7A68     		ldr	r2, [r7, #4]
ARM GAS  /tmp/cciBqq80.s 			page 76


 2887 003c 1268     		ldr	r2, [r2]
 2888 003e 1268     		ldr	r2, [r2]
 2889 0040 0421     		movs	r1, #4
 2890 0042 0A43     		orrs	r2, r1
 2891 0044 1A60     		str	r2, [r3]
1439:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1440:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 2892              		.loc 1 1440 0 discriminator 2
 2893 0046 7B68     		ldr	r3, [r7, #4]
 2894 0048 6922     		movs	r2, #105
 2895 004a 2021     		movs	r1, #32
 2896 004c 9954     		strb	r1, [r3, r2]
1441:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Process Unlocked */
1442:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 2897              		.loc 1 1442 0 discriminator 2
 2898 004e 7B68     		ldr	r3, [r7, #4]
 2899 0050 6822     		movs	r2, #104
 2900 0052 0021     		movs	r1, #0
 2901 0054 9954     		strb	r1, [r3, r2]
1443:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1444:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return HAL_OK;
 2902              		.loc 1 1444 0 discriminator 2
 2903 0056 0023     		movs	r3, #0
 2904              	.L150:
1445:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 2905              		.loc 1 1445 0
 2906 0058 1800     		movs	r0, r3
 2907 005a BD46     		mov	sp, r7
 2908 005c 02B0     		add	sp, sp, #8
 2909              		@ sp needed
 2910 005e 80BD     		pop	{r7, pc}
 2911              		.cfi_endproc
 2912              	.LFE60:
 2914              		.section	.text.HAL_UART_GetState,"ax",%progbits
 2915              		.align	1
 2916              		.global	HAL_UART_GetState
 2917              		.syntax unified
 2918              		.code	16
 2919              		.thumb_func
 2920              		.fpu softvfp
 2922              	HAL_UART_GetState:
 2923              	.LFB61:
1446:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1447:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1448:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @}
1449:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1450:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1451:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group4 Peripheral State and Error functions
1452:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****  *  @brief   UART Peripheral State functions
1453:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****  *
1454:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** @verbatim
1455:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   ==============================================================================
1456:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             ##### Peripheral State and Error functions #####
1457:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   ==============================================================================
1458:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     [..]
1459:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     This subsection provides functions allowing to :
1460:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       (+) Return the UART handle state.
ARM GAS  /tmp/cciBqq80.s 			page 77


1461:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       (+) Return the UART handle error code
1462:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1463:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** @endverbatim
1464:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @{
1465:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1466:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1467:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1468:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  Return the UART handle state.
1469:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
1470:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *               the configuration information for the specified UART.
1471:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL state
1472:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1473:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
1474:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 2924              		.loc 1 1474 0
 2925              		.cfi_startproc
 2926 0000 80B5     		push	{r7, lr}
 2927              	.LCFI78:
 2928              		.cfi_def_cfa_offset 8
 2929              		.cfi_offset 7, -8
 2930              		.cfi_offset 14, -4
 2931 0002 84B0     		sub	sp, sp, #16
 2932              	.LCFI79:
 2933              		.cfi_def_cfa_offset 24
 2934 0004 00AF     		add	r7, sp, #0
 2935              	.LCFI80:
 2936              		.cfi_def_cfa_register 7
 2937 0006 7860     		str	r0, [r7, #4]
1475:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint32_t temp1= 0x00, temp2 = 0x00;
 2938              		.loc 1 1475 0
 2939 0008 0023     		movs	r3, #0
 2940 000a FB60     		str	r3, [r7, #12]
 2941 000c 0023     		movs	r3, #0
 2942 000e BB60     		str	r3, [r7, #8]
1476:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   temp1 = huart->gState;
 2943              		.loc 1 1476 0
 2944 0010 7B68     		ldr	r3, [r7, #4]
 2945 0012 6922     		movs	r2, #105
 2946 0014 9B5C     		ldrb	r3, [r3, r2]
 2947 0016 DBB2     		uxtb	r3, r3
 2948 0018 FB60     		str	r3, [r7, #12]
1477:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   temp2 = huart->RxState;
 2949              		.loc 1 1477 0
 2950 001a 7B68     		ldr	r3, [r7, #4]
 2951 001c 6A22     		movs	r2, #106
 2952 001e 9B5C     		ldrb	r3, [r3, r2]
 2953 0020 DBB2     		uxtb	r3, r3
 2954 0022 BB60     		str	r3, [r7, #8]
1478:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   
1479:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return (HAL_UART_StateTypeDef)(temp1 | temp2);
 2955              		.loc 1 1479 0
 2956 0024 FB68     		ldr	r3, [r7, #12]
 2957 0026 DAB2     		uxtb	r2, r3
 2958 0028 BB68     		ldr	r3, [r7, #8]
 2959 002a DBB2     		uxtb	r3, r3
 2960 002c 1343     		orrs	r3, r2
 2961 002e DBB2     		uxtb	r3, r3
ARM GAS  /tmp/cciBqq80.s 			page 78


1480:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 2962              		.loc 1 1480 0
 2963 0030 1800     		movs	r0, r3
 2964 0032 BD46     		mov	sp, r7
 2965 0034 04B0     		add	sp, sp, #16
 2966              		@ sp needed
 2967 0036 80BD     		pop	{r7, pc}
 2968              		.cfi_endproc
 2969              	.LFE61:
 2971              		.section	.text.HAL_UART_GetError,"ax",%progbits
 2972              		.align	1
 2973              		.global	HAL_UART_GetError
 2974              		.syntax unified
 2975              		.code	16
 2976              		.thumb_func
 2977              		.fpu softvfp
 2979              	HAL_UART_GetError:
 2980              	.LFB62:
1481:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1482:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1483:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  Return the UART handle error code.
1484:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
1485:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *               the configuration information for the specified UART.
1486:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval UART Error Code
1487:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1488:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
1489:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 2981              		.loc 1 1489 0
 2982              		.cfi_startproc
 2983 0000 80B5     		push	{r7, lr}
 2984              	.LCFI81:
 2985              		.cfi_def_cfa_offset 8
 2986              		.cfi_offset 7, -8
 2987              		.cfi_offset 14, -4
 2988 0002 82B0     		sub	sp, sp, #8
 2989              	.LCFI82:
 2990              		.cfi_def_cfa_offset 16
 2991 0004 00AF     		add	r7, sp, #0
 2992              	.LCFI83:
 2993              		.cfi_def_cfa_register 7
 2994 0006 7860     		str	r0, [r7, #4]
1490:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return huart->ErrorCode;
 2995              		.loc 1 1490 0
 2996 0008 7B68     		ldr	r3, [r7, #4]
 2997 000a DB6E     		ldr	r3, [r3, #108]
1491:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 2998              		.loc 1 1491 0
 2999 000c 1800     		movs	r0, r3
 3000 000e BD46     		mov	sp, r7
 3001 0010 02B0     		add	sp, sp, #8
 3002              		@ sp needed
 3003 0012 80BD     		pop	{r7, pc}
 3004              		.cfi_endproc
 3005              	.LFE62:
 3007              		.global	__aeabi_uidiv
 3008              		.section	.text.UART_SetConfig,"ax",%progbits
 3009              		.align	1
ARM GAS  /tmp/cciBqq80.s 			page 79


 3010              		.global	UART_SetConfig
 3011              		.syntax unified
 3012              		.code	16
 3013              		.thumb_func
 3014              		.fpu softvfp
 3016              	UART_SetConfig:
 3017              	.LFB63:
1492:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1493:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @}
1494:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1495:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1496:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1497:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @}
1498:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1499:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1500:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /** @defgroup UART_Private_Functions UART Private Functions
1501:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @{
1502:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1503:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1504:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1505:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Configure the UART peripheral.
1506:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart: UART handle.
1507:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
1508:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1509:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
1510:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 3018              		.loc 1 1510 0
 3019              		.cfi_startproc
 3020 0000 90B5     		push	{r4, r7, lr}
 3021              	.LCFI84:
 3022              		.cfi_def_cfa_offset 12
 3023              		.cfi_offset 4, -12
 3024              		.cfi_offset 7, -8
 3025              		.cfi_offset 14, -4
 3026 0002 87B0     		sub	sp, sp, #28
 3027              	.LCFI85:
 3028              		.cfi_def_cfa_offset 40
 3029 0004 00AF     		add	r7, sp, #0
 3030              	.LCFI86:
 3031              		.cfi_def_cfa_register 7
 3032 0006 7860     		str	r0, [r7, #4]
1511:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint32_t tmpreg                     = 0x00000000;
 3033              		.loc 1 1511 0
 3034 0008 0023     		movs	r3, #0
 3035 000a FB60     		str	r3, [r7, #12]
1512:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 3036              		.loc 1 1512 0
 3037 000c 1723     		movs	r3, #23
 3038 000e FB18     		adds	r3, r7, r3
 3039 0010 1022     		movs	r2, #16
 3040 0012 1A70     		strb	r2, [r3]
1513:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint16_t brrtemp                    = 0x0000;
 3041              		.loc 1 1513 0
 3042 0014 0A23     		movs	r3, #10
 3043 0016 FB18     		adds	r3, r7, r3
 3044 0018 0022     		movs	r2, #0
 3045 001a 1A80     		strh	r2, [r3]
ARM GAS  /tmp/cciBqq80.s 			page 80


1514:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint16_t usartdiv                   = 0x0000;
 3046              		.loc 1 1514 0
 3047 001c 1423     		movs	r3, #20
 3048 001e FB18     		adds	r3, r7, r3
 3049 0020 0022     		movs	r2, #0
 3050 0022 1A80     		strh	r2, [r3]
1515:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   HAL_StatusTypeDef ret               = HAL_OK;
 3051              		.loc 1 1515 0
 3052 0024 1323     		movs	r3, #19
 3053 0026 FB18     		adds	r3, r7, r3
 3054 0028 0022     		movs	r2, #0
 3055 002a 1A70     		strb	r2, [r3]
1516:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1517:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check the parameters */
1518:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
1519:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
1520:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
1521:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   assert_param(IS_UART_PARITY(huart->Init.Parity));
1522:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   assert_param(IS_UART_MODE(huart->Init.Mode));
1523:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
1524:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
1525:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
1526:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1527:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1528:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
1529:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Clear M, PCE, PS, TE, RE and OVER8 bits and configure
1530:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****    *  the UART Word Length, Parity, Mode and oversampling:
1531:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****    *  set the M bits according to huart->Init.WordLength value
1532:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****    *  set PCE and PS bits according to huart->Init.Parity value
1533:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****    *  set TE and RE bits according to huart->Init.Mode value
1534:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****    *  set OVER8 bit according to huart->Init.OverSampling value */
1535:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.O
 3056              		.loc 1 1535 0
 3057 002c 7B68     		ldr	r3, [r7, #4]
 3058 002e 9A68     		ldr	r2, [r3, #8]
 3059 0030 7B68     		ldr	r3, [r7, #4]
 3060 0032 1B69     		ldr	r3, [r3, #16]
 3061 0034 1A43     		orrs	r2, r3
 3062 0036 7B68     		ldr	r3, [r7, #4]
 3063 0038 5B69     		ldr	r3, [r3, #20]
 3064 003a 1A43     		orrs	r2, r3
 3065 003c 7B68     		ldr	r3, [r7, #4]
 3066 003e DB69     		ldr	r3, [r3, #28]
 3067 0040 1343     		orrs	r3, r2
 3068 0042 FB60     		str	r3, [r7, #12]
1536:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 3069              		.loc 1 1536 0
 3070 0044 7B68     		ldr	r3, [r7, #4]
 3071 0046 1B68     		ldr	r3, [r3]
 3072 0048 7A68     		ldr	r2, [r7, #4]
 3073 004a 1268     		ldr	r2, [r2]
 3074 004c 1268     		ldr	r2, [r2]
 3075 004e C049     		ldr	r1, .L191
 3076 0050 1140     		ands	r1, r2
 3077 0052 FA68     		ldr	r2, [r7, #12]
 3078 0054 0A43     		orrs	r2, r1
 3079 0056 1A60     		str	r2, [r3]
ARM GAS  /tmp/cciBqq80.s 			page 81


1537:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1538:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /*-------------------------- USART CR2 Configuration -----------------------*/
1539:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Configure the UART Stop Bits: Set STOP[13:12] bits according
1540:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****    * to huart->Init.StopBits value */
1541:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 3080              		.loc 1 1541 0
 3081 0058 7B68     		ldr	r3, [r7, #4]
 3082 005a 1B68     		ldr	r3, [r3]
 3083 005c 7A68     		ldr	r2, [r7, #4]
 3084 005e 1268     		ldr	r2, [r2]
 3085 0060 5268     		ldr	r2, [r2, #4]
 3086 0062 BC49     		ldr	r1, .L191+4
 3087 0064 1140     		ands	r1, r2
 3088 0066 7A68     		ldr	r2, [r7, #4]
 3089 0068 D268     		ldr	r2, [r2, #12]
 3090 006a 0A43     		orrs	r2, r1
 3091 006c 5A60     		str	r2, [r3, #4]
1542:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1543:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /*-------------------------- USART CR3 Configuration -----------------------*/
1544:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Configure
1545:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****    * - UART HardWare Flow Control: set CTSE and RTSE bits according
1546:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****    *   to huart->Init.HwFlowCtl value
1547:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****    * - one-bit sampling method versus three samples' majority rule according
1548:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****    *   to huart->Init.OneBitSampling */
1549:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 3092              		.loc 1 1549 0
 3093 006e 7B68     		ldr	r3, [r7, #4]
 3094 0070 9A69     		ldr	r2, [r3, #24]
 3095 0072 7B68     		ldr	r3, [r7, #4]
 3096 0074 1B6A     		ldr	r3, [r3, #32]
 3097 0076 1343     		orrs	r3, r2
 3098 0078 FB60     		str	r3, [r7, #12]
1550:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 3099              		.loc 1 1550 0
 3100 007a 7B68     		ldr	r3, [r7, #4]
 3101 007c 1B68     		ldr	r3, [r3]
 3102 007e 7A68     		ldr	r2, [r7, #4]
 3103 0080 1268     		ldr	r2, [r2]
 3104 0082 9268     		ldr	r2, [r2, #8]
 3105 0084 B449     		ldr	r1, .L191+8
 3106 0086 1140     		ands	r1, r2
 3107 0088 FA68     		ldr	r2, [r7, #12]
 3108 008a 0A43     		orrs	r2, r1
 3109 008c 9A60     		str	r2, [r3, #8]
1551:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1552:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /*-------------------------- USART BRR Configuration -----------------------*/
1553:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UART_GETCLOCKSOURCE(huart, clocksource);
 3110              		.loc 1 1553 0
 3111 008e 7B68     		ldr	r3, [r7, #4]
 3112 0090 1B68     		ldr	r3, [r3]
 3113 0092 B24A     		ldr	r2, .L191+12
 3114 0094 9342     		cmp	r3, r2
 3115 0096 25D1     		bne	.L156
 3116              		.loc 1 1553 0 is_stmt 0 discriminator 1
 3117 0098 B14B     		ldr	r3, .L191+16
 3118 009a 1B6B     		ldr	r3, [r3, #48]
 3119 009c 0322     		movs	r2, #3
ARM GAS  /tmp/cciBqq80.s 			page 82


 3120 009e 1340     		ands	r3, r2
 3121 00a0 012B     		cmp	r3, #1
 3122 00a2 0FD0     		beq	.L158
 3123 00a4 04D3     		bcc	.L159
 3124 00a6 022B     		cmp	r3, #2
 3125 00a8 11D0     		beq	.L160
 3126 00aa 032B     		cmp	r3, #3
 3127 00ac 05D0     		beq	.L161
 3128              		.loc 1 1553 0
 3129 00ae 13E0     		b	.L190
 3130              	.L159:
 3131              		.loc 1 1553 0 discriminator 4
 3132 00b0 1723     		movs	r3, #23
 3133 00b2 FB18     		adds	r3, r7, r3
 3134 00b4 0022     		movs	r2, #0
 3135 00b6 1A70     		strb	r2, [r3]
 3136 00b8 64E0     		b	.L163
 3137              	.L161:
 3138              		.loc 1 1553 0 discriminator 7
 3139 00ba 1723     		movs	r3, #23
 3140 00bc FB18     		adds	r3, r7, r3
 3141 00be 0222     		movs	r2, #2
 3142 00c0 1A70     		strb	r2, [r3]
 3143 00c2 5FE0     		b	.L163
 3144              	.L158:
 3145              		.loc 1 1553 0 discriminator 5
 3146 00c4 1723     		movs	r3, #23
 3147 00c6 FB18     		adds	r3, r7, r3
 3148 00c8 0422     		movs	r2, #4
 3149 00ca 1A70     		strb	r2, [r3]
 3150 00cc 5AE0     		b	.L163
 3151              	.L160:
 3152              		.loc 1 1553 0 discriminator 6
 3153 00ce 1723     		movs	r3, #23
 3154 00d0 FB18     		adds	r3, r7, r3
 3155 00d2 0822     		movs	r2, #8
 3156 00d4 1A70     		strb	r2, [r3]
 3157 00d6 55E0     		b	.L163
 3158              	.L190:
 3159              		.loc 1 1553 0 discriminator 3
 3160 00d8 1723     		movs	r3, #23
 3161 00da FB18     		adds	r3, r7, r3
 3162 00dc 1022     		movs	r2, #16
 3163 00de 1A70     		strb	r2, [r3]
 3164 00e0 C046     		nop
 3165 00e2 4FE0     		b	.L163
 3166              	.L156:
 3167              		.loc 1 1553 0 discriminator 2
 3168 00e4 7B68     		ldr	r3, [r7, #4]
 3169 00e6 1B68     		ldr	r3, [r3]
 3170 00e8 9E4A     		ldr	r2, .L191+20
 3171 00ea 9342     		cmp	r3, r2
 3172 00ec 32D1     		bne	.L164
 3173              		.loc 1 1553 0 discriminator 8
 3174 00ee 9C4B     		ldr	r3, .L191+16
 3175 00f0 1A6B     		ldr	r2, [r3, #48]
 3176 00f2 C023     		movs	r3, #192
ARM GAS  /tmp/cciBqq80.s 			page 83


 3177 00f4 9B02     		lsls	r3, r3, #10
 3178 00f6 1340     		ands	r3, r2
 3179 00f8 8022     		movs	r2, #128
 3180 00fa 5202     		lsls	r2, r2, #9
 3181 00fc 9342     		cmp	r3, r2
 3182 00fe 19D0     		beq	.L166
 3183 0100 8022     		movs	r2, #128
 3184 0102 5202     		lsls	r2, r2, #9
 3185 0104 9342     		cmp	r3, r2
 3186 0106 02D8     		bhi	.L167
 3187 0108 002B     		cmp	r3, #0
 3188 010a 09D0     		beq	.L168
 3189              		.loc 1 1553 0
 3190 010c 1CE0     		b	.L165
 3191              	.L167:
 3192              		.loc 1 1553 0 discriminator 8
 3193 010e 8022     		movs	r2, #128
 3194 0110 9202     		lsls	r2, r2, #10
 3195 0112 9342     		cmp	r3, r2
 3196 0114 13D0     		beq	.L169
 3197 0116 C022     		movs	r2, #192
 3198 0118 9202     		lsls	r2, r2, #10
 3199 011a 9342     		cmp	r3, r2
 3200 011c 05D0     		beq	.L170
 3201              		.loc 1 1553 0
 3202 011e 13E0     		b	.L165
 3203              	.L168:
 3204              		.loc 1 1553 0 discriminator 11
 3205 0120 1723     		movs	r3, #23
 3206 0122 FB18     		adds	r3, r7, r3
 3207 0124 0022     		movs	r2, #0
 3208 0126 1A70     		strb	r2, [r3]
 3209 0128 2CE0     		b	.L163
 3210              	.L170:
 3211              		.loc 1 1553 0 discriminator 14
 3212 012a 1723     		movs	r3, #23
 3213 012c FB18     		adds	r3, r7, r3
 3214 012e 0222     		movs	r2, #2
 3215 0130 1A70     		strb	r2, [r3]
 3216 0132 27E0     		b	.L163
 3217              	.L166:
 3218              		.loc 1 1553 0 discriminator 12
 3219 0134 1723     		movs	r3, #23
 3220 0136 FB18     		adds	r3, r7, r3
 3221 0138 0422     		movs	r2, #4
 3222 013a 1A70     		strb	r2, [r3]
 3223 013c 22E0     		b	.L163
 3224              	.L169:
 3225              		.loc 1 1553 0 discriminator 13
 3226 013e 1723     		movs	r3, #23
 3227 0140 FB18     		adds	r3, r7, r3
 3228 0142 0822     		movs	r2, #8
 3229 0144 1A70     		strb	r2, [r3]
 3230 0146 1DE0     		b	.L163
 3231              	.L165:
 3232              		.loc 1 1553 0 discriminator 10
 3233 0148 1723     		movs	r3, #23
ARM GAS  /tmp/cciBqq80.s 			page 84


 3234 014a FB18     		adds	r3, r7, r3
 3235 014c 1022     		movs	r2, #16
 3236 014e 1A70     		strb	r2, [r3]
 3237 0150 C046     		nop
 3238 0152 17E0     		b	.L163
 3239              	.L164:
 3240              		.loc 1 1553 0 discriminator 9
 3241 0154 7B68     		ldr	r3, [r7, #4]
 3242 0156 1B68     		ldr	r3, [r3]
 3243 0158 834A     		ldr	r2, .L191+24
 3244 015a 9342     		cmp	r3, r2
 3245 015c 04D1     		bne	.L172
 3246              		.loc 1 1553 0 discriminator 15
 3247 015e 1723     		movs	r3, #23
 3248 0160 FB18     		adds	r3, r7, r3
 3249 0162 0022     		movs	r2, #0
 3250 0164 1A70     		strb	r2, [r3]
 3251 0166 0DE0     		b	.L163
 3252              	.L172:
 3253              		.loc 1 1553 0 discriminator 16
 3254 0168 7B68     		ldr	r3, [r7, #4]
 3255 016a 1B68     		ldr	r3, [r3]
 3256 016c 7F4A     		ldr	r2, .L191+28
 3257 016e 9342     		cmp	r3, r2
 3258 0170 04D1     		bne	.L173
 3259              		.loc 1 1553 0 discriminator 17
 3260 0172 1723     		movs	r3, #23
 3261 0174 FB18     		adds	r3, r7, r3
 3262 0176 0022     		movs	r2, #0
 3263 0178 1A70     		strb	r2, [r3]
 3264 017a 03E0     		b	.L163
 3265              	.L173:
 3266              		.loc 1 1553 0 discriminator 18
 3267 017c 1723     		movs	r3, #23
 3268 017e FB18     		adds	r3, r7, r3
 3269 0180 1022     		movs	r2, #16
 3270 0182 1A70     		strb	r2, [r3]
 3271              	.L163:
1554:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   
1555:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check UART Over Sampling to set Baud Rate Register */
1556:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 3272              		.loc 1 1556 0 is_stmt 1
 3273 0184 7B68     		ldr	r3, [r7, #4]
 3274 0186 DA69     		ldr	r2, [r3, #28]
 3275 0188 8023     		movs	r3, #128
 3276 018a 1B02     		lsls	r3, r3, #8
 3277 018c 9A42     		cmp	r2, r3
 3278 018e 00D0     		beq	.LCB2933
 3279 0190 7BE0     		b	.L174	@long jump
 3280              	.LCB2933:
1557:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1558:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     switch (clocksource)
 3281              		.loc 1 1558 0
 3282 0192 1723     		movs	r3, #23
 3283 0194 FB18     		adds	r3, r7, r3
 3284 0196 1B78     		ldrb	r3, [r3]
 3285 0198 022B     		cmp	r3, #2
ARM GAS  /tmp/cciBqq80.s 			page 85


 3286 019a 1CD0     		beq	.L176
 3287 019c 02DC     		bgt	.L177
 3288 019e 002B     		cmp	r3, #0
 3289 01a0 05D0     		beq	.L178
 3290 01a2 4FE0     		b	.L175
 3291              	.L177:
 3292 01a4 042B     		cmp	r3, #4
 3293 01a6 27D0     		beq	.L179
 3294 01a8 082B     		cmp	r3, #8
 3295 01aa 39D0     		beq	.L180
 3296 01ac 4AE0     		b	.L175
 3297              	.L178:
1559:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1560:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case UART_CLOCKSOURCE_PCLK1:
1561:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 3298              		.loc 1 1561 0
 3299 01ae FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 3300 01b2 0300     		movs	r3, r0
 3301 01b4 5A00     		lsls	r2, r3, #1
 3302 01b6 7B68     		ldr	r3, [r7, #4]
 3303 01b8 5B68     		ldr	r3, [r3, #4]
 3304 01ba 5B08     		lsrs	r3, r3, #1
 3305 01bc D218     		adds	r2, r2, r3
 3306 01be 7B68     		ldr	r3, [r7, #4]
 3307 01c0 5B68     		ldr	r3, [r3, #4]
 3308 01c2 1900     		movs	r1, r3
 3309 01c4 1000     		movs	r0, r2
 3310 01c6 FFF7FEFF 		bl	__aeabi_uidiv
 3311              	.LVL0:
 3312 01ca 0300     		movs	r3, r0
 3313 01cc 1A00     		movs	r2, r3
 3314 01ce 1423     		movs	r3, #20
 3315 01d0 FB18     		adds	r3, r7, r3
 3316 01d2 1A80     		strh	r2, [r3]
1562:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 3317              		.loc 1 1562 0
 3318 01d4 3BE0     		b	.L181
 3319              	.L176:
1563:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case UART_CLOCKSOURCE_HSI:
1564:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 3320              		.loc 1 1564 0
 3321 01d6 7B68     		ldr	r3, [r7, #4]
 3322 01d8 5B68     		ldr	r3, [r3, #4]
 3323 01da 5B08     		lsrs	r3, r3, #1
 3324 01dc 644A     		ldr	r2, .L191+32
 3325 01de 9A18     		adds	r2, r3, r2
 3326 01e0 7B68     		ldr	r3, [r7, #4]
 3327 01e2 5B68     		ldr	r3, [r3, #4]
 3328 01e4 1900     		movs	r1, r3
 3329 01e6 1000     		movs	r0, r2
 3330 01e8 FFF7FEFF 		bl	__aeabi_uidiv
 3331              	.LVL1:
 3332 01ec 0300     		movs	r3, r0
 3333 01ee 1A00     		movs	r2, r3
 3334 01f0 1423     		movs	r3, #20
 3335 01f2 FB18     		adds	r3, r7, r3
 3336 01f4 1A80     		strh	r2, [r3]
ARM GAS  /tmp/cciBqq80.s 			page 86


1565:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 3337              		.loc 1 1565 0
 3338 01f6 2AE0     		b	.L181
 3339              	.L179:
1566:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case UART_CLOCKSOURCE_SYSCLK:
1567:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 3340              		.loc 1 1567 0
 3341 01f8 FFF7FEFF 		bl	HAL_RCC_GetSysClockFreq
 3342 01fc 0300     		movs	r3, r0
 3343 01fe 5A00     		lsls	r2, r3, #1
 3344 0200 7B68     		ldr	r3, [r7, #4]
 3345 0202 5B68     		ldr	r3, [r3, #4]
 3346 0204 5B08     		lsrs	r3, r3, #1
 3347 0206 D218     		adds	r2, r2, r3
 3348 0208 7B68     		ldr	r3, [r7, #4]
 3349 020a 5B68     		ldr	r3, [r3, #4]
 3350 020c 1900     		movs	r1, r3
 3351 020e 1000     		movs	r0, r2
 3352 0210 FFF7FEFF 		bl	__aeabi_uidiv
 3353              	.LVL2:
 3354 0214 0300     		movs	r3, r0
 3355 0216 1A00     		movs	r2, r3
 3356 0218 1423     		movs	r3, #20
 3357 021a FB18     		adds	r3, r7, r3
 3358 021c 1A80     		strh	r2, [r3]
1568:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 3359              		.loc 1 1568 0
 3360 021e 16E0     		b	.L181
 3361              	.L180:
1569:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case UART_CLOCKSOURCE_LSE:
1570:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 3362              		.loc 1 1570 0
 3363 0220 7B68     		ldr	r3, [r7, #4]
 3364 0222 5B68     		ldr	r3, [r3, #4]
 3365 0224 5B08     		lsrs	r3, r3, #1
 3366 0226 8022     		movs	r2, #128
 3367 0228 5202     		lsls	r2, r2, #9
 3368 022a 9A18     		adds	r2, r3, r2
 3369 022c 7B68     		ldr	r3, [r7, #4]
 3370 022e 5B68     		ldr	r3, [r3, #4]
 3371 0230 1900     		movs	r1, r3
 3372 0232 1000     		movs	r0, r2
 3373 0234 FFF7FEFF 		bl	__aeabi_uidiv
 3374              	.LVL3:
 3375 0238 0300     		movs	r3, r0
 3376 023a 1A00     		movs	r2, r3
 3377 023c 1423     		movs	r3, #20
 3378 023e FB18     		adds	r3, r7, r3
 3379 0240 1A80     		strh	r2, [r3]
1571:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 3380              		.loc 1 1571 0
 3381 0242 04E0     		b	.L181
 3382              	.L175:
1572:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case UART_CLOCKSOURCE_UNDEFINED:
1573:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       default:
1574:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         ret = HAL_ERROR;
 3383              		.loc 1 1574 0
ARM GAS  /tmp/cciBqq80.s 			page 87


 3384 0244 1323     		movs	r3, #19
 3385 0246 FB18     		adds	r3, r7, r3
 3386 0248 0122     		movs	r2, #1
 3387 024a 1A70     		strb	r2, [r3]
1575:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 3388              		.loc 1 1575 0
 3389 024c C046     		nop
 3390              	.L181:
1576:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1577:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1578:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     brrtemp = usartdiv & 0xFFF0;
 3391              		.loc 1 1578 0
 3392 024e 0A23     		movs	r3, #10
 3393 0250 FB18     		adds	r3, r7, r3
 3394 0252 1422     		movs	r2, #20
 3395 0254 BA18     		adds	r2, r7, r2
 3396 0256 1288     		ldrh	r2, [r2]
 3397 0258 0F21     		movs	r1, #15
 3398 025a 8A43     		bics	r2, r1
 3399 025c 1A80     		strh	r2, [r3]
1579:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 3400              		.loc 1 1579 0
 3401 025e 1423     		movs	r3, #20
 3402 0260 FB18     		adds	r3, r7, r3
 3403 0262 1B88     		ldrh	r3, [r3]
 3404 0264 5B10     		asrs	r3, r3, #1
 3405 0266 9BB2     		uxth	r3, r3
 3406 0268 0722     		movs	r2, #7
 3407 026a 1340     		ands	r3, r2
 3408 026c 99B2     		uxth	r1, r3
 3409 026e 0A23     		movs	r3, #10
 3410 0270 FB18     		adds	r3, r7, r3
 3411 0272 0A22     		movs	r2, #10
 3412 0274 BA18     		adds	r2, r7, r2
 3413 0276 1288     		ldrh	r2, [r2]
 3414 0278 0A43     		orrs	r2, r1
 3415 027a 1A80     		strh	r2, [r3]
1580:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->Instance->BRR = brrtemp;
 3416              		.loc 1 1580 0
 3417 027c 7B68     		ldr	r3, [r7, #4]
 3418 027e 1B68     		ldr	r3, [r3]
 3419 0280 0A22     		movs	r2, #10
 3420 0282 BA18     		adds	r2, r7, r2
 3421 0284 1288     		ldrh	r2, [r2]
 3422 0286 DA60     		str	r2, [r3, #12]
 3423 0288 5BE0     		b	.L182
 3424              	.L174:
1581:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1582:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   else
1583:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1584:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     switch (clocksource)
 3425              		.loc 1 1584 0
 3426 028a 1723     		movs	r3, #23
 3427 028c FB18     		adds	r3, r7, r3
 3428 028e 1B78     		ldrb	r3, [r3]
 3429 0290 022B     		cmp	r3, #2
 3430 0292 1BD0     		beq	.L184
ARM GAS  /tmp/cciBqq80.s 			page 88


 3431 0294 02DC     		bgt	.L185
 3432 0296 002B     		cmp	r3, #0
 3433 0298 05D0     		beq	.L186
 3434 029a 4DE0     		b	.L183
 3435              	.L185:
 3436 029c 042B     		cmp	r3, #4
 3437 029e 26D0     		beq	.L187
 3438 02a0 082B     		cmp	r3, #8
 3439 02a2 37D0     		beq	.L188
 3440 02a4 48E0     		b	.L183
 3441              	.L186:
1585:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1586:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case UART_CLOCKSOURCE_PCLK1:
1587:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.B
 3442              		.loc 1 1587 0
 3443 02a6 7B68     		ldr	r3, [r7, #4]
 3444 02a8 1C68     		ldr	r4, [r3]
 3445 02aa FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 3446 02ae 0200     		movs	r2, r0
 3447 02b0 7B68     		ldr	r3, [r7, #4]
 3448 02b2 5B68     		ldr	r3, [r3, #4]
 3449 02b4 5B08     		lsrs	r3, r3, #1
 3450 02b6 D218     		adds	r2, r2, r3
 3451 02b8 7B68     		ldr	r3, [r7, #4]
 3452 02ba 5B68     		ldr	r3, [r3, #4]
 3453 02bc 1900     		movs	r1, r3
 3454 02be 1000     		movs	r0, r2
 3455 02c0 FFF7FEFF 		bl	__aeabi_uidiv
 3456              	.LVL4:
 3457 02c4 0300     		movs	r3, r0
 3458 02c6 9BB2     		uxth	r3, r3
 3459 02c8 E360     		str	r3, [r4, #12]
1588:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 3460              		.loc 1 1588 0
 3461 02ca 3AE0     		b	.L182
 3462              	.L184:
1589:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case UART_CLOCKSOURCE_HSI:
1590:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 3463              		.loc 1 1590 0
 3464 02cc 7B68     		ldr	r3, [r7, #4]
 3465 02ce 1C68     		ldr	r4, [r3]
 3466 02d0 7B68     		ldr	r3, [r7, #4]
 3467 02d2 5B68     		ldr	r3, [r3, #4]
 3468 02d4 5B08     		lsrs	r3, r3, #1
 3469 02d6 274A     		ldr	r2, .L191+36
 3470 02d8 9A18     		adds	r2, r3, r2
 3471 02da 7B68     		ldr	r3, [r7, #4]
 3472 02dc 5B68     		ldr	r3, [r3, #4]
 3473 02de 1900     		movs	r1, r3
 3474 02e0 1000     		movs	r0, r2
 3475 02e2 FFF7FEFF 		bl	__aeabi_uidiv
 3476              	.LVL5:
 3477 02e6 0300     		movs	r3, r0
 3478 02e8 9BB2     		uxth	r3, r3
 3479 02ea E360     		str	r3, [r4, #12]
1591:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 3480              		.loc 1 1591 0
ARM GAS  /tmp/cciBqq80.s 			page 89


 3481 02ec 29E0     		b	.L182
 3482              	.L187:
1592:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case UART_CLOCKSOURCE_SYSCLK:
1593:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Ini
 3483              		.loc 1 1593 0
 3484 02ee 7B68     		ldr	r3, [r7, #4]
 3485 02f0 1C68     		ldr	r4, [r3]
 3486 02f2 FFF7FEFF 		bl	HAL_RCC_GetSysClockFreq
 3487 02f6 0200     		movs	r2, r0
 3488 02f8 7B68     		ldr	r3, [r7, #4]
 3489 02fa 5B68     		ldr	r3, [r3, #4]
 3490 02fc 5B08     		lsrs	r3, r3, #1
 3491 02fe D218     		adds	r2, r2, r3
 3492 0300 7B68     		ldr	r3, [r7, #4]
 3493 0302 5B68     		ldr	r3, [r3, #4]
 3494 0304 1900     		movs	r1, r3
 3495 0306 1000     		movs	r0, r2
 3496 0308 FFF7FEFF 		bl	__aeabi_uidiv
 3497              	.LVL6:
 3498 030c 0300     		movs	r3, r0
 3499 030e 9BB2     		uxth	r3, r3
 3500 0310 E360     		str	r3, [r4, #12]
1594:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 3501              		.loc 1 1594 0
 3502 0312 16E0     		b	.L182
 3503              	.L188:
1595:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case UART_CLOCKSOURCE_LSE:
1596:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 3504              		.loc 1 1596 0
 3505 0314 7B68     		ldr	r3, [r7, #4]
 3506 0316 1C68     		ldr	r4, [r3]
 3507 0318 7B68     		ldr	r3, [r7, #4]
 3508 031a 5B68     		ldr	r3, [r3, #4]
 3509 031c 5B08     		lsrs	r3, r3, #1
 3510 031e 8022     		movs	r2, #128
 3511 0320 1202     		lsls	r2, r2, #8
 3512 0322 9A18     		adds	r2, r3, r2
 3513 0324 7B68     		ldr	r3, [r7, #4]
 3514 0326 5B68     		ldr	r3, [r3, #4]
 3515 0328 1900     		movs	r1, r3
 3516 032a 1000     		movs	r0, r2
 3517 032c FFF7FEFF 		bl	__aeabi_uidiv
 3518              	.LVL7:
 3519 0330 0300     		movs	r3, r0
 3520 0332 9BB2     		uxth	r3, r3
 3521 0334 E360     		str	r3, [r4, #12]
1597:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 3522              		.loc 1 1597 0
 3523 0336 04E0     		b	.L182
 3524              	.L183:
1598:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case UART_CLOCKSOURCE_UNDEFINED:
1599:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       default:
1600:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         ret = HAL_ERROR;
 3525              		.loc 1 1600 0
 3526 0338 1323     		movs	r3, #19
 3527 033a FB18     		adds	r3, r7, r3
 3528 033c 0122     		movs	r2, #1
ARM GAS  /tmp/cciBqq80.s 			page 90


 3529 033e 1A70     		strb	r2, [r3]
1601:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 3530              		.loc 1 1601 0
 3531 0340 C046     		nop
 3532              	.L182:
1602:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1603:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1604:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1605:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return ret;
 3533              		.loc 1 1605 0
 3534 0342 1323     		movs	r3, #19
 3535 0344 FB18     		adds	r3, r7, r3
 3536 0346 1B78     		ldrb	r3, [r3]
1606:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1607:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 3537              		.loc 1 1607 0
 3538 0348 1800     		movs	r0, r3
 3539 034a BD46     		mov	sp, r7
 3540 034c 07B0     		add	sp, sp, #28
 3541              		@ sp needed
 3542 034e 90BD     		pop	{r4, r7, pc}
 3543              	.L192:
 3544              		.align	2
 3545              	.L191:
 3546 0350 F369FFEF 		.word	-268473869
 3547 0354 FFCFFFFF 		.word	-12289
 3548 0358 FFF4FFFF 		.word	-2817
 3549 035c 00380140 		.word	1073821696
 3550 0360 00100240 		.word	1073876992
 3551 0364 00440040 		.word	1073759232
 3552 0368 00480040 		.word	1073760256
 3553 036c 004C0040 		.word	1073761280
 3554 0370 0024F400 		.word	16000000
 3555 0374 00127A00 		.word	8000000
 3556              		.cfi_endproc
 3557              	.LFE63:
 3559              		.section	.text.UART_AdvFeatureConfig,"ax",%progbits
 3560              		.align	1
 3561              		.global	UART_AdvFeatureConfig
 3562              		.syntax unified
 3563              		.code	16
 3564              		.thumb_func
 3565              		.fpu softvfp
 3567              	UART_AdvFeatureConfig:
 3568              	.LFB64:
1608:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1609:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1610:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Configure the UART peripheral advanced features.
1611:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart: UART handle.
1612:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
1613:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1614:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
1615:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 3569              		.loc 1 1615 0
 3570              		.cfi_startproc
 3571 0000 80B5     		push	{r7, lr}
 3572              	.LCFI87:
ARM GAS  /tmp/cciBqq80.s 			page 91


 3573              		.cfi_def_cfa_offset 8
 3574              		.cfi_offset 7, -8
 3575              		.cfi_offset 14, -4
 3576 0002 82B0     		sub	sp, sp, #8
 3577              	.LCFI88:
 3578              		.cfi_def_cfa_offset 16
 3579 0004 00AF     		add	r7, sp, #0
 3580              	.LCFI89:
 3581              		.cfi_def_cfa_register 7
 3582 0006 7860     		str	r0, [r7, #4]
1616:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check whether the set of advanced features to configure is properly set */
1617:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
1618:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1619:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* if required, configure TX pin active level inversion */
1620:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 3583              		.loc 1 1620 0
 3584 0008 7B68     		ldr	r3, [r7, #4]
 3585 000a 5B6A     		ldr	r3, [r3, #36]
 3586 000c 0122     		movs	r2, #1
 3587 000e 1340     		ands	r3, r2
 3588 0010 0AD0     		beq	.L194
1621:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1622:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
1623:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 3589              		.loc 1 1623 0
 3590 0012 7B68     		ldr	r3, [r7, #4]
 3591 0014 1B68     		ldr	r3, [r3]
 3592 0016 7A68     		ldr	r2, [r7, #4]
 3593 0018 1268     		ldr	r2, [r2]
 3594 001a 5268     		ldr	r2, [r2, #4]
 3595 001c 4549     		ldr	r1, .L203
 3596 001e 1140     		ands	r1, r2
 3597 0020 7A68     		ldr	r2, [r7, #4]
 3598 0022 926A     		ldr	r2, [r2, #40]
 3599 0024 0A43     		orrs	r2, r1
 3600 0026 5A60     		str	r2, [r3, #4]
 3601              	.L194:
1624:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1625:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1626:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* if required, configure RX pin active level inversion */
1627:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 3602              		.loc 1 1627 0
 3603 0028 7B68     		ldr	r3, [r7, #4]
 3604 002a 5B6A     		ldr	r3, [r3, #36]
 3605 002c 0222     		movs	r2, #2
 3606 002e 1340     		ands	r3, r2
 3607 0030 0AD0     		beq	.L195
1628:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1629:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
1630:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 3608              		.loc 1 1630 0
 3609 0032 7B68     		ldr	r3, [r7, #4]
 3610 0034 1B68     		ldr	r3, [r3]
 3611 0036 7A68     		ldr	r2, [r7, #4]
 3612 0038 1268     		ldr	r2, [r2]
 3613 003a 5268     		ldr	r2, [r2, #4]
 3614 003c 3E49     		ldr	r1, .L203+4
ARM GAS  /tmp/cciBqq80.s 			page 92


 3615 003e 1140     		ands	r1, r2
 3616 0040 7A68     		ldr	r2, [r7, #4]
 3617 0042 D26A     		ldr	r2, [r2, #44]
 3618 0044 0A43     		orrs	r2, r1
 3619 0046 5A60     		str	r2, [r3, #4]
 3620              	.L195:
1631:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1632:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1633:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* if required, configure data inversion */
1634:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 3621              		.loc 1 1634 0
 3622 0048 7B68     		ldr	r3, [r7, #4]
 3623 004a 5B6A     		ldr	r3, [r3, #36]
 3624 004c 0422     		movs	r2, #4
 3625 004e 1340     		ands	r3, r2
 3626 0050 0AD0     		beq	.L196
1635:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1636:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
1637:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 3627              		.loc 1 1637 0
 3628 0052 7B68     		ldr	r3, [r7, #4]
 3629 0054 1B68     		ldr	r3, [r3]
 3630 0056 7A68     		ldr	r2, [r7, #4]
 3631 0058 1268     		ldr	r2, [r2]
 3632 005a 5268     		ldr	r2, [r2, #4]
 3633 005c 3749     		ldr	r1, .L203+8
 3634 005e 1140     		ands	r1, r2
 3635 0060 7A68     		ldr	r2, [r7, #4]
 3636 0062 126B     		ldr	r2, [r2, #48]
 3637 0064 0A43     		orrs	r2, r1
 3638 0066 5A60     		str	r2, [r3, #4]
 3639              	.L196:
1638:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1639:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1640:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* if required, configure RX/TX pins swap */
1641:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 3640              		.loc 1 1641 0
 3641 0068 7B68     		ldr	r3, [r7, #4]
 3642 006a 5B6A     		ldr	r3, [r3, #36]
 3643 006c 0822     		movs	r2, #8
 3644 006e 1340     		ands	r3, r2
 3645 0070 0AD0     		beq	.L197
1642:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1643:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
1644:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 3646              		.loc 1 1644 0
 3647 0072 7B68     		ldr	r3, [r7, #4]
 3648 0074 1B68     		ldr	r3, [r3]
 3649 0076 7A68     		ldr	r2, [r7, #4]
 3650 0078 1268     		ldr	r2, [r2]
 3651 007a 5268     		ldr	r2, [r2, #4]
 3652 007c 3049     		ldr	r1, .L203+12
 3653 007e 1140     		ands	r1, r2
 3654 0080 7A68     		ldr	r2, [r7, #4]
 3655 0082 526B     		ldr	r2, [r2, #52]
 3656 0084 0A43     		orrs	r2, r1
 3657 0086 5A60     		str	r2, [r3, #4]
ARM GAS  /tmp/cciBqq80.s 			page 93


 3658              	.L197:
1645:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1646:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1647:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* if required, configure RX overrun detection disabling */
1648:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 3659              		.loc 1 1648 0
 3660 0088 7B68     		ldr	r3, [r7, #4]
 3661 008a 5B6A     		ldr	r3, [r3, #36]
 3662 008c 1022     		movs	r2, #16
 3663 008e 1340     		ands	r3, r2
 3664 0090 0AD0     		beq	.L198
1649:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1650:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
1651:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 3665              		.loc 1 1651 0
 3666 0092 7B68     		ldr	r3, [r7, #4]
 3667 0094 1B68     		ldr	r3, [r3]
 3668 0096 7A68     		ldr	r2, [r7, #4]
 3669 0098 1268     		ldr	r2, [r2]
 3670 009a 9268     		ldr	r2, [r2, #8]
 3671 009c 2949     		ldr	r1, .L203+16
 3672 009e 1140     		ands	r1, r2
 3673 00a0 7A68     		ldr	r2, [r7, #4]
 3674 00a2 926B     		ldr	r2, [r2, #56]
 3675 00a4 0A43     		orrs	r2, r1
 3676 00a6 9A60     		str	r2, [r3, #8]
 3677              	.L198:
1652:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1653:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1654:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* if required, configure DMA disabling on reception error */
1655:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 3678              		.loc 1 1655 0
 3679 00a8 7B68     		ldr	r3, [r7, #4]
 3680 00aa 5B6A     		ldr	r3, [r3, #36]
 3681 00ac 2022     		movs	r2, #32
 3682 00ae 1340     		ands	r3, r2
 3683 00b0 0AD0     		beq	.L199
1656:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1657:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
1658:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 3684              		.loc 1 1658 0
 3685 00b2 7B68     		ldr	r3, [r7, #4]
 3686 00b4 1B68     		ldr	r3, [r3]
 3687 00b6 7A68     		ldr	r2, [r7, #4]
 3688 00b8 1268     		ldr	r2, [r2]
 3689 00ba 9268     		ldr	r2, [r2, #8]
 3690 00bc 2249     		ldr	r1, .L203+20
 3691 00be 1140     		ands	r1, r2
 3692 00c0 7A68     		ldr	r2, [r7, #4]
 3693 00c2 D26B     		ldr	r2, [r2, #60]
 3694 00c4 0A43     		orrs	r2, r1
 3695 00c6 9A60     		str	r2, [r3, #8]
 3696              	.L199:
1659:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1660:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1661:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* if required, configure auto Baud rate detection scheme */
1662:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
ARM GAS  /tmp/cciBqq80.s 			page 94


 3697              		.loc 1 1662 0
 3698 00c8 7B68     		ldr	r3, [r7, #4]
 3699 00ca 5B6A     		ldr	r3, [r3, #36]
 3700 00cc 4022     		movs	r2, #64
 3701 00ce 1340     		ands	r3, r2
 3702 00d0 1BD0     		beq	.L200
1663:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1664:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
1665:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
1666:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 3703              		.loc 1 1666 0
 3704 00d2 7B68     		ldr	r3, [r7, #4]
 3705 00d4 1B68     		ldr	r3, [r3]
 3706 00d6 7A68     		ldr	r2, [r7, #4]
 3707 00d8 1268     		ldr	r2, [r2]
 3708 00da 5268     		ldr	r2, [r2, #4]
 3709 00dc 1B49     		ldr	r1, .L203+24
 3710 00de 1140     		ands	r1, r2
 3711 00e0 7A68     		ldr	r2, [r7, #4]
 3712 00e2 126C     		ldr	r2, [r2, #64]
 3713 00e4 0A43     		orrs	r2, r1
 3714 00e6 5A60     		str	r2, [r3, #4]
1667:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* set auto Baudrate detection parameters if detection is enabled */
1668:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 3715              		.loc 1 1668 0
 3716 00e8 7B68     		ldr	r3, [r7, #4]
 3717 00ea 1A6C     		ldr	r2, [r3, #64]
 3718 00ec 8023     		movs	r3, #128
 3719 00ee 5B03     		lsls	r3, r3, #13
 3720 00f0 9A42     		cmp	r2, r3
 3721 00f2 0AD1     		bne	.L200
1669:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1670:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
1671:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 3722              		.loc 1 1671 0
 3723 00f4 7B68     		ldr	r3, [r7, #4]
 3724 00f6 1B68     		ldr	r3, [r3]
 3725 00f8 7A68     		ldr	r2, [r7, #4]
 3726 00fa 1268     		ldr	r2, [r2]
 3727 00fc 5268     		ldr	r2, [r2, #4]
 3728 00fe 1449     		ldr	r1, .L203+28
 3729 0100 1140     		ands	r1, r2
 3730 0102 7A68     		ldr	r2, [r7, #4]
 3731 0104 526C     		ldr	r2, [r2, #68]
 3732 0106 0A43     		orrs	r2, r1
 3733 0108 5A60     		str	r2, [r3, #4]
 3734              	.L200:
1672:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1673:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1674:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1675:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* if required, configure MSB first on communication line */
1676:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 3735              		.loc 1 1676 0
 3736 010a 7B68     		ldr	r3, [r7, #4]
 3737 010c 5B6A     		ldr	r3, [r3, #36]
 3738 010e 8022     		movs	r2, #128
 3739 0110 1340     		ands	r3, r2
ARM GAS  /tmp/cciBqq80.s 			page 95


 3740 0112 0AD0     		beq	.L202
1677:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1678:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
1679:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 3741              		.loc 1 1679 0
 3742 0114 7B68     		ldr	r3, [r7, #4]
 3743 0116 1B68     		ldr	r3, [r3]
 3744 0118 7A68     		ldr	r2, [r7, #4]
 3745 011a 1268     		ldr	r2, [r2]
 3746 011c 5268     		ldr	r2, [r2, #4]
 3747 011e 0D49     		ldr	r1, .L203+32
 3748 0120 1140     		ands	r1, r2
 3749 0122 7A68     		ldr	r2, [r7, #4]
 3750 0124 926C     		ldr	r2, [r2, #72]
 3751 0126 0A43     		orrs	r2, r1
 3752 0128 5A60     		str	r2, [r3, #4]
 3753              	.L202:
1680:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1681:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 3754              		.loc 1 1681 0
 3755 012a C046     		nop
 3756 012c BD46     		mov	sp, r7
 3757 012e 02B0     		add	sp, sp, #8
 3758              		@ sp needed
 3759 0130 80BD     		pop	{r7, pc}
 3760              	.L204:
 3761 0132 C046     		.align	2
 3762              	.L203:
 3763 0134 FFFFFDFF 		.word	-131073
 3764 0138 FFFFFEFF 		.word	-65537
 3765 013c FFFFFBFF 		.word	-262145
 3766 0140 FF7FFFFF 		.word	-32769
 3767 0144 FFEFFFFF 		.word	-4097
 3768 0148 FFDFFFFF 		.word	-8193
 3769 014c FFFFEFFF 		.word	-1048577
 3770 0150 FFFF9FFF 		.word	-6291457
 3771 0154 FFFFF7FF 		.word	-524289
 3772              		.cfi_endproc
 3773              	.LFE64:
 3775              		.section	.text.UART_CheckIdleState,"ax",%progbits
 3776              		.align	1
 3777              		.global	UART_CheckIdleState
 3778              		.syntax unified
 3779              		.code	16
 3780              		.thumb_func
 3781              		.fpu softvfp
 3783              	UART_CheckIdleState:
 3784              	.LFB65:
1682:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1683:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1684:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Check the UART Idle State.
1685:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart: UART handle.
1686:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
1687:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1688:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
1689:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 3785              		.loc 1 1689 0
ARM GAS  /tmp/cciBqq80.s 			page 96


 3786              		.cfi_startproc
 3787 0000 80B5     		push	{r7, lr}
 3788              	.LCFI90:
 3789              		.cfi_def_cfa_offset 8
 3790              		.cfi_offset 7, -8
 3791              		.cfi_offset 14, -4
 3792 0002 82B0     		sub	sp, sp, #8
 3793              	.LCFI91:
 3794              		.cfi_def_cfa_offset 16
 3795 0004 00AF     		add	r7, sp, #0
 3796              	.LCFI92:
 3797              		.cfi_def_cfa_register 7
 3798 0006 7860     		str	r0, [r7, #4]
1690:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Initialize the UART ErrorCode */
1691:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 3799              		.loc 1 1691 0
 3800 0008 7B68     		ldr	r3, [r7, #4]
 3801 000a 0022     		movs	r2, #0
 3802 000c DA66     		str	r2, [r3, #108]
1692:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1693:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* TEACK and REACK bits in ISR are checked only when available (not available on all F0 devices).
1694:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      Bits are defined for some specific devices, and are available only for UART instances supporti
1695:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1696:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&
1697:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
 3803              		.loc 1 1697 0
 3804 000e 7B68     		ldr	r3, [r7, #4]
 3805 0010 1B68     		ldr	r3, [r3]
 3806 0012 204A     		ldr	r2, .L210
 3807 0014 9342     		cmp	r3, r2
 3808 0016 04D0     		beq	.L206
 3809              		.loc 1 1697 0 is_stmt 0 discriminator 1
 3810 0018 7B68     		ldr	r3, [r7, #4]
 3811 001a 1B68     		ldr	r3, [r3]
 3812 001c 1E4A     		ldr	r2, .L210+4
 3813 001e 9342     		cmp	r3, r2
 3814 0020 27D1     		bne	.L207
 3815              	.L206:
1698:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1699:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Check if the Transmitter is enabled */
1700:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 3816              		.loc 1 1700 0 is_stmt 1
 3817 0022 7B68     		ldr	r3, [r7, #4]
 3818 0024 1B68     		ldr	r3, [r3]
 3819 0026 1B68     		ldr	r3, [r3]
 3820 0028 0822     		movs	r2, #8
 3821 002a 1340     		ands	r3, r2
 3822 002c 082B     		cmp	r3, #8
 3823 002e 0CD1     		bne	.L208
1701:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1702:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Wait until TEACK flag is set */
1703:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HA
 3824              		.loc 1 1703 0
 3825 0030 FA23     		movs	r3, #250
 3826 0032 9A00     		lsls	r2, r3, #2
 3827 0034 8023     		movs	r3, #128
 3828 0036 9903     		lsls	r1, r3, #14
ARM GAS  /tmp/cciBqq80.s 			page 97


 3829 0038 7868     		ldr	r0, [r7, #4]
 3830 003a 1300     		movs	r3, r2
 3831 003c 0022     		movs	r2, #0
 3832 003e FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 3833 0042 031E     		subs	r3, r0, #0
 3834 0044 01D0     		beq	.L208
1704:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
1705:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         /* Timeout occurred */
1706:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         return HAL_TIMEOUT;
 3835              		.loc 1 1706 0
 3836 0046 0323     		movs	r3, #3
 3837 0048 20E0     		b	.L209
 3838              	.L208:
1707:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
1708:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1709:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1710:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Check if the Receiver is enabled */
1711:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 3839              		.loc 1 1711 0
 3840 004a 7B68     		ldr	r3, [r7, #4]
 3841 004c 1B68     		ldr	r3, [r3]
 3842 004e 1B68     		ldr	r3, [r3]
 3843 0050 0422     		movs	r2, #4
 3844 0052 1340     		ands	r3, r2
 3845 0054 042B     		cmp	r3, #4
 3846 0056 0CD1     		bne	.L207
1712:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1713:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Wait until REACK flag is set */
1714:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != H
 3847              		.loc 1 1714 0
 3848 0058 FA23     		movs	r3, #250
 3849 005a 9A00     		lsls	r2, r3, #2
 3850 005c 8023     		movs	r3, #128
 3851 005e D903     		lsls	r1, r3, #15
 3852 0060 7868     		ldr	r0, [r7, #4]
 3853 0062 1300     		movs	r3, r2
 3854 0064 0022     		movs	r2, #0
 3855 0066 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 3856 006a 031E     		subs	r3, r0, #0
 3857 006c 01D0     		beq	.L207
1715:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
1716:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         /* Timeout occurred */
1717:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         return HAL_TIMEOUT;
 3858              		.loc 1 1717 0
 3859 006e 0323     		movs	r3, #3
 3860 0070 0CE0     		b	.L209
 3861              	.L207:
1718:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
1719:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1720:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1721:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F0
1722:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1723:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Initialize the UART State */
1724:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState= HAL_UART_STATE_READY;
 3862              		.loc 1 1724 0
 3863 0072 7B68     		ldr	r3, [r7, #4]
 3864 0074 6922     		movs	r2, #105
ARM GAS  /tmp/cciBqq80.s 			page 98


 3865 0076 2021     		movs	r1, #32
 3866 0078 9954     		strb	r1, [r3, r2]
1725:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->RxState= HAL_UART_STATE_READY;
 3867              		.loc 1 1725 0
 3868 007a 7B68     		ldr	r3, [r7, #4]
 3869 007c 6A22     		movs	r2, #106
 3870 007e 2021     		movs	r1, #32
 3871 0080 9954     		strb	r1, [r3, r2]
1726:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1727:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Process Unlocked */
1728:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 3872              		.loc 1 1728 0
 3873 0082 7B68     		ldr	r3, [r7, #4]
 3874 0084 6822     		movs	r2, #104
 3875 0086 0021     		movs	r1, #0
 3876 0088 9954     		strb	r1, [r3, r2]
1729:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1730:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return HAL_OK;
 3877              		.loc 1 1730 0
 3878 008a 0023     		movs	r3, #0
 3879              	.L209:
1731:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 3880              		.loc 1 1731 0
 3881 008c 1800     		movs	r0, r3
 3882 008e BD46     		mov	sp, r7
 3883 0090 02B0     		add	sp, sp, #8
 3884              		@ sp needed
 3885 0092 80BD     		pop	{r7, pc}
 3886              	.L211:
 3887              		.align	2
 3888              	.L210:
 3889 0094 00380140 		.word	1073821696
 3890 0098 00440040 		.word	1073759232
 3891              		.cfi_endproc
 3892              	.LFE65:
 3894              		.section	.text.UART_WaitOnFlagUntilTimeout,"ax",%progbits
 3895              		.align	1
 3896              		.global	UART_WaitOnFlagUntilTimeout
 3897              		.syntax unified
 3898              		.code	16
 3899              		.thumb_func
 3900              		.fpu softvfp
 3902              	UART_WaitOnFlagUntilTimeout:
 3903              	.LFB66:
1732:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1733:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1734:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1735:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  Handle UART Communication Timeout.
1736:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart: UART handle.
1737:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  Flag: specifies the UART flag to check.
1738:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  Status: the Flag status (SET or RESET).
1739:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  Timeout: Timeout duration.
1740:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
1741:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1742:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus 
1743:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 3904              		.loc 1 1743 0
ARM GAS  /tmp/cciBqq80.s 			page 99


 3905              		.cfi_startproc
 3906 0000 80B5     		push	{r7, lr}
 3907              	.LCFI93:
 3908              		.cfi_def_cfa_offset 8
 3909              		.cfi_offset 7, -8
 3910              		.cfi_offset 14, -4
 3911 0002 86B0     		sub	sp, sp, #24
 3912              	.LCFI94:
 3913              		.cfi_def_cfa_offset 32
 3914 0004 00AF     		add	r7, sp, #0
 3915              	.LCFI95:
 3916              		.cfi_def_cfa_register 7
 3917 0006 F860     		str	r0, [r7, #12]
 3918 0008 B960     		str	r1, [r7, #8]
 3919 000a 3B60     		str	r3, [r7]
 3920 000c FB1D     		adds	r3, r7, #7
 3921 000e 1A70     		strb	r2, [r3]
1744:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint32_t tickstart = HAL_GetTick();
 3922              		.loc 1 1744 0
 3923 0010 FFF7FEFF 		bl	HAL_GetTick
 3924 0014 0300     		movs	r3, r0
 3925 0016 7B61     		str	r3, [r7, #20]
1745:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1746:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Wait until flag is set */
1747:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(Status == RESET)
 3926              		.loc 1 1747 0
 3927 0018 FB1D     		adds	r3, r7, #7
 3928 001a 1B78     		ldrb	r3, [r3]
 3929 001c 002B     		cmp	r3, #0
 3930 001e 00D0     		beq	.LCB3558
 3931 0020 81E0     		b	.L219	@long jump
 3932              	.LCB3558:
1748:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1749:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 3933              		.loc 1 1749 0
 3934 0022 3BE0     		b	.L214
 3935              	.L217:
1750:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1751:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Check for the Timeout */
1752:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if(Timeout != HAL_MAX_DELAY)
 3936              		.loc 1 1752 0
 3937 0024 3B68     		ldr	r3, [r7]
 3938 0026 0133     		adds	r3, r3, #1
 3939 0028 38D0     		beq	.L214
1753:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
1754:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 3940              		.loc 1 1754 0
 3941 002a 3B68     		ldr	r3, [r7]
 3942 002c 002B     		cmp	r3, #0
 3943 002e 07D0     		beq	.L215
 3944              		.loc 1 1754 0 is_stmt 0 discriminator 1
 3945 0030 FFF7FEFF 		bl	HAL_GetTick
 3946 0034 0200     		movs	r2, r0
 3947 0036 7B69     		ldr	r3, [r7, #20]
 3948 0038 D21A     		subs	r2, r2, r3
 3949 003a 3B68     		ldr	r3, [r7]
 3950 003c 9A42     		cmp	r2, r3
ARM GAS  /tmp/cciBqq80.s 			page 100


 3951 003e 2DD9     		bls	.L214
 3952              	.L215:
1755:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         {
1756:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for
1757:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 3953              		.loc 1 1757 0 is_stmt 1
 3954 0040 FB68     		ldr	r3, [r7, #12]
 3955 0042 1B68     		ldr	r3, [r3]
 3956 0044 FA68     		ldr	r2, [r7, #12]
 3957 0046 1268     		ldr	r2, [r2]
 3958 0048 1268     		ldr	r2, [r2]
 3959 004a 8021     		movs	r1, #128
 3960 004c 8A43     		bics	r2, r1
 3961 004e 1A60     		str	r2, [r3]
1758:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 3962              		.loc 1 1758 0
 3963 0050 FB68     		ldr	r3, [r7, #12]
 3964 0052 1B68     		ldr	r3, [r3]
 3965 0054 FA68     		ldr	r2, [r7, #12]
 3966 0056 1268     		ldr	r2, [r2]
 3967 0058 1268     		ldr	r2, [r2]
 3968 005a 2021     		movs	r1, #32
 3969 005c 8A43     		bics	r2, r1
 3970 005e 1A60     		str	r2, [r3]
1759:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 3971              		.loc 1 1759 0
 3972 0060 FB68     		ldr	r3, [r7, #12]
 3973 0062 1B68     		ldr	r3, [r3]
 3974 0064 FA68     		ldr	r2, [r7, #12]
 3975 0066 1268     		ldr	r2, [r2]
 3976 0068 1268     		ldr	r2, [r2]
 3977 006a 3549     		ldr	r1, .L222
 3978 006c 0A40     		ands	r2, r1
 3979 006e 1A60     		str	r2, [r3]
1760:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 3980              		.loc 1 1760 0
 3981 0070 FB68     		ldr	r3, [r7, #12]
 3982 0072 1B68     		ldr	r3, [r3]
 3983 0074 FA68     		ldr	r2, [r7, #12]
 3984 0076 1268     		ldr	r2, [r2]
 3985 0078 9268     		ldr	r2, [r2, #8]
 3986 007a 0121     		movs	r1, #1
 3987 007c 8A43     		bics	r2, r1
 3988 007e 9A60     		str	r2, [r3, #8]
1761:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1762:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           huart->gState = HAL_UART_STATE_READY;
 3989              		.loc 1 1762 0
 3990 0080 FB68     		ldr	r3, [r7, #12]
 3991 0082 6922     		movs	r2, #105
 3992 0084 2021     		movs	r1, #32
 3993 0086 9954     		strb	r1, [r3, r2]
1763:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           huart->RxState = HAL_UART_STATE_READY;
 3994              		.loc 1 1763 0
 3995 0088 FB68     		ldr	r3, [r7, #12]
 3996 008a 6A22     		movs	r2, #106
 3997 008c 2021     		movs	r1, #32
 3998 008e 9954     		strb	r1, [r3, r2]
ARM GAS  /tmp/cciBqq80.s 			page 101


1764:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1765:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           /* Process Unlocked */
1766:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           __HAL_UNLOCK(huart);
 3999              		.loc 1 1766 0
 4000 0090 FB68     		ldr	r3, [r7, #12]
 4001 0092 6822     		movs	r2, #104
 4002 0094 0021     		movs	r1, #0
 4003 0096 9954     		strb	r1, [r3, r2]
1767:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1768:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           return HAL_TIMEOUT;
 4004              		.loc 1 1768 0
 4005 0098 0323     		movs	r3, #3
 4006 009a 4DE0     		b	.L216
 4007              	.L214:
1749:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 4008              		.loc 1 1749 0
 4009 009c FB68     		ldr	r3, [r7, #12]
 4010 009e 1B68     		ldr	r3, [r3]
 4011 00a0 DB69     		ldr	r3, [r3, #28]
 4012 00a2 BA68     		ldr	r2, [r7, #8]
 4013 00a4 1A40     		ands	r2, r3
 4014 00a6 BB68     		ldr	r3, [r7, #8]
 4015 00a8 9A42     		cmp	r2, r3
 4016 00aa BBD1     		bne	.L217
 4017 00ac 43E0     		b	.L218
 4018              	.L221:
1769:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         }
1770:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
1771:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1772:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1773:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   else
1774:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1775:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
1776:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1777:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Check for the Timeout */
1778:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if(Timeout != HAL_MAX_DELAY)
 4019              		.loc 1 1778 0
 4020 00ae 3B68     		ldr	r3, [r7]
 4021 00b0 0133     		adds	r3, r3, #1
 4022 00b2 38D0     		beq	.L219
1779:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
1780:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 4023              		.loc 1 1780 0
 4024 00b4 3B68     		ldr	r3, [r7]
 4025 00b6 002B     		cmp	r3, #0
 4026 00b8 07D0     		beq	.L220
 4027              		.loc 1 1780 0 is_stmt 0 discriminator 1
 4028 00ba FFF7FEFF 		bl	HAL_GetTick
 4029 00be 0200     		movs	r2, r0
 4030 00c0 7B69     		ldr	r3, [r7, #20]
 4031 00c2 D21A     		subs	r2, r2, r3
 4032 00c4 3B68     		ldr	r3, [r7]
 4033 00c6 9A42     		cmp	r2, r3
 4034 00c8 2DD9     		bls	.L219
 4035              	.L220:
1781:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         {
1782:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for
ARM GAS  /tmp/cciBqq80.s 			page 102


1783:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 4036              		.loc 1 1783 0 is_stmt 1
 4037 00ca FB68     		ldr	r3, [r7, #12]
 4038 00cc 1B68     		ldr	r3, [r3]
 4039 00ce FA68     		ldr	r2, [r7, #12]
 4040 00d0 1268     		ldr	r2, [r2]
 4041 00d2 1268     		ldr	r2, [r2]
 4042 00d4 8021     		movs	r1, #128
 4043 00d6 8A43     		bics	r2, r1
 4044 00d8 1A60     		str	r2, [r3]
1784:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 4045              		.loc 1 1784 0
 4046 00da FB68     		ldr	r3, [r7, #12]
 4047 00dc 1B68     		ldr	r3, [r3]
 4048 00de FA68     		ldr	r2, [r7, #12]
 4049 00e0 1268     		ldr	r2, [r2]
 4050 00e2 1268     		ldr	r2, [r2]
 4051 00e4 2021     		movs	r1, #32
 4052 00e6 8A43     		bics	r2, r1
 4053 00e8 1A60     		str	r2, [r3]
1785:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 4054              		.loc 1 1785 0
 4055 00ea FB68     		ldr	r3, [r7, #12]
 4056 00ec 1B68     		ldr	r3, [r3]
 4057 00ee FA68     		ldr	r2, [r7, #12]
 4058 00f0 1268     		ldr	r2, [r2]
 4059 00f2 1268     		ldr	r2, [r2]
 4060 00f4 1249     		ldr	r1, .L222
 4061 00f6 0A40     		ands	r2, r1
 4062 00f8 1A60     		str	r2, [r3]
1786:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 4063              		.loc 1 1786 0
 4064 00fa FB68     		ldr	r3, [r7, #12]
 4065 00fc 1B68     		ldr	r3, [r3]
 4066 00fe FA68     		ldr	r2, [r7, #12]
 4067 0100 1268     		ldr	r2, [r2]
 4068 0102 9268     		ldr	r2, [r2, #8]
 4069 0104 0121     		movs	r1, #1
 4070 0106 8A43     		bics	r2, r1
 4071 0108 9A60     		str	r2, [r3, #8]
1787:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1788:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           huart->gState = HAL_UART_STATE_READY;
 4072              		.loc 1 1788 0
 4073 010a FB68     		ldr	r3, [r7, #12]
 4074 010c 6922     		movs	r2, #105
 4075 010e 2021     		movs	r1, #32
 4076 0110 9954     		strb	r1, [r3, r2]
1789:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           huart->RxState = HAL_UART_STATE_READY;
 4077              		.loc 1 1789 0
 4078 0112 FB68     		ldr	r3, [r7, #12]
 4079 0114 6A22     		movs	r2, #106
 4080 0116 2021     		movs	r1, #32
 4081 0118 9954     		strb	r1, [r3, r2]
1790:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1791:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           /* Process Unlocked */
1792:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           __HAL_UNLOCK(huart);
 4082              		.loc 1 1792 0
ARM GAS  /tmp/cciBqq80.s 			page 103


 4083 011a FB68     		ldr	r3, [r7, #12]
 4084 011c 6822     		movs	r2, #104
 4085 011e 0021     		movs	r1, #0
 4086 0120 9954     		strb	r1, [r3, r2]
1793:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1794:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           return HAL_TIMEOUT;
 4087              		.loc 1 1794 0
 4088 0122 0323     		movs	r3, #3
 4089 0124 08E0     		b	.L216
 4090              	.L219:
1775:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 4091              		.loc 1 1775 0
 4092 0126 FB68     		ldr	r3, [r7, #12]
 4093 0128 1B68     		ldr	r3, [r3]
 4094 012a DB69     		ldr	r3, [r3, #28]
 4095 012c BA68     		ldr	r2, [r7, #8]
 4096 012e 1A40     		ands	r2, r3
 4097 0130 BB68     		ldr	r3, [r7, #8]
 4098 0132 9A42     		cmp	r2, r3
 4099 0134 BBD0     		beq	.L221
 4100              	.L218:
1795:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         }
1796:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
1797:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1798:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1799:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return HAL_OK;
 4101              		.loc 1 1799 0
 4102 0136 0023     		movs	r3, #0
 4103              	.L216:
1800:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 4104              		.loc 1 1800 0
 4105 0138 1800     		movs	r0, r3
 4106 013a BD46     		mov	sp, r7
 4107 013c 06B0     		add	sp, sp, #24
 4108              		@ sp needed
 4109 013e 80BD     		pop	{r7, pc}
 4110              	.L223:
 4111              		.align	2
 4112              	.L222:
 4113 0140 FFFEFFFF 		.word	-257
 4114              		.cfi_endproc
 4115              	.LFE66:
 4117              		.section	.text.UART_DMATransmitCplt,"ax",%progbits
 4118              		.align	1
 4119              		.syntax unified
 4120              		.code	16
 4121              		.thumb_func
 4122              		.fpu softvfp
 4124              	UART_DMATransmitCplt:
 4125              	.LFB67:
1801:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1802:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1803:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief DMA UART transmit process complete callback.
1804:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param hdma: DMA handle.
1805:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
1806:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1807:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
ARM GAS  /tmp/cciBqq80.s 			page 104


1808:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 4126              		.loc 1 1808 0
 4127              		.cfi_startproc
 4128 0000 80B5     		push	{r7, lr}
 4129              	.LCFI96:
 4130              		.cfi_def_cfa_offset 8
 4131              		.cfi_offset 7, -8
 4132              		.cfi_offset 14, -4
 4133 0002 84B0     		sub	sp, sp, #16
 4134              	.LCFI97:
 4135              		.cfi_def_cfa_offset 24
 4136 0004 00AF     		add	r7, sp, #0
 4137              	.LCFI98:
 4138              		.cfi_def_cfa_register 7
 4139 0006 7860     		str	r0, [r7, #4]
1809:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 4140              		.loc 1 1809 0
 4141 0008 7B68     		ldr	r3, [r7, #4]
 4142 000a 5B6A     		ldr	r3, [r3, #36]
 4143 000c FB60     		str	r3, [r7, #12]
1810:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   
1811:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* DMA Normal mode */
1812:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 4144              		.loc 1 1812 0
 4145 000e 7B68     		ldr	r3, [r7, #4]
 4146 0010 1B68     		ldr	r3, [r3]
 4147 0012 1B68     		ldr	r3, [r3]
 4148 0014 2022     		movs	r2, #32
 4149 0016 1340     		ands	r3, r2
 4150 0018 14D1     		bne	.L225
1813:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {  
1814:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->TxXferCount = 0;
 4151              		.loc 1 1814 0
 4152 001a FB68     		ldr	r3, [r7, #12]
 4153 001c 5222     		movs	r2, #82
 4154 001e 0021     		movs	r1, #0
 4155 0020 9952     		strh	r1, [r3, r2]
1815:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   
1816:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Disable the DMA transfer for transmit request by resetting the DMAT bit
1817:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     in the UART CR3 register */
1818:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAT);
 4156              		.loc 1 1818 0
 4157 0022 FB68     		ldr	r3, [r7, #12]
 4158 0024 1B68     		ldr	r3, [r3]
 4159 0026 FA68     		ldr	r2, [r7, #12]
 4160 0028 1268     		ldr	r2, [r2]
 4161 002a 9268     		ldr	r2, [r2, #8]
 4162 002c 8021     		movs	r1, #128
 4163 002e 8A43     		bics	r2, r1
 4164 0030 9A60     		str	r2, [r3, #8]
1819:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1820:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Enable the UART Transmit Complete Interrupt */
1821:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 4165              		.loc 1 1821 0
 4166 0032 FB68     		ldr	r3, [r7, #12]
 4167 0034 1B68     		ldr	r3, [r3]
 4168 0036 FA68     		ldr	r2, [r7, #12]
ARM GAS  /tmp/cciBqq80.s 			page 105


 4169 0038 1268     		ldr	r2, [r2]
 4170 003a 1268     		ldr	r2, [r2]
 4171 003c 4021     		movs	r1, #64
 4172 003e 0A43     		orrs	r2, r1
 4173 0040 1A60     		str	r2, [r3]
1822:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1823:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* DMA Circular mode */
1824:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   else
1825:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1826:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     HAL_UART_TxCpltCallback(huart);
1827:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1828:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1829:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 4174              		.loc 1 1829 0
 4175 0042 03E0     		b	.L227
 4176              	.L225:
1826:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 4177              		.loc 1 1826 0
 4178 0044 FB68     		ldr	r3, [r7, #12]
 4179 0046 1800     		movs	r0, r3
 4180 0048 FFF7FEFF 		bl	HAL_UART_TxCpltCallback
 4181              	.L227:
 4182              		.loc 1 1829 0
 4183 004c C046     		nop
 4184 004e BD46     		mov	sp, r7
 4185 0050 04B0     		add	sp, sp, #16
 4186              		@ sp needed
 4187 0052 80BD     		pop	{r7, pc}
 4188              		.cfi_endproc
 4189              	.LFE67:
 4191              		.section	.text.UART_DMATxHalfCplt,"ax",%progbits
 4192              		.align	1
 4193              		.syntax unified
 4194              		.code	16
 4195              		.thumb_func
 4196              		.fpu softvfp
 4198              	UART_DMATxHalfCplt:
 4199              	.LFB68:
1830:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1831:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1832:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief DMA UART transmit process half complete callback.
1833:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param hdma : DMA handle.
1834:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
1835:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1836:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
1837:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 4200              		.loc 1 1837 0
 4201              		.cfi_startproc
 4202 0000 80B5     		push	{r7, lr}
 4203              	.LCFI99:
 4204              		.cfi_def_cfa_offset 8
 4205              		.cfi_offset 7, -8
 4206              		.cfi_offset 14, -4
 4207 0002 84B0     		sub	sp, sp, #16
 4208              	.LCFI100:
 4209              		.cfi_def_cfa_offset 24
 4210 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/cciBqq80.s 			page 106


 4211              	.LCFI101:
 4212              		.cfi_def_cfa_register 7
 4213 0006 7860     		str	r0, [r7, #4]
1838:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 4214              		.loc 1 1838 0
 4215 0008 7B68     		ldr	r3, [r7, #4]
 4216 000a 5B6A     		ldr	r3, [r3, #36]
 4217 000c FB60     		str	r3, [r7, #12]
1839:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1840:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   HAL_UART_TxHalfCpltCallback(huart);
 4218              		.loc 1 1840 0
 4219 000e FB68     		ldr	r3, [r7, #12]
 4220 0010 1800     		movs	r0, r3
 4221 0012 FFF7FEFF 		bl	HAL_UART_TxHalfCpltCallback
1841:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 4222              		.loc 1 1841 0
 4223 0016 C046     		nop
 4224 0018 BD46     		mov	sp, r7
 4225 001a 04B0     		add	sp, sp, #16
 4226              		@ sp needed
 4227 001c 80BD     		pop	{r7, pc}
 4228              		.cfi_endproc
 4229              	.LFE68:
 4231              		.section	.text.UART_DMAReceiveCplt,"ax",%progbits
 4232              		.align	1
 4233              		.syntax unified
 4234              		.code	16
 4235              		.thumb_func
 4236              		.fpu softvfp
 4238              	UART_DMAReceiveCplt:
 4239              	.LFB69:
1842:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1843:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1844:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief DMA UART receive process complete callback.
1845:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param hdma: DMA handle.
1846:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
1847:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1848:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
1849:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 4240              		.loc 1 1849 0
 4241              		.cfi_startproc
 4242 0000 80B5     		push	{r7, lr}
 4243              	.LCFI102:
 4244              		.cfi_def_cfa_offset 8
 4245              		.cfi_offset 7, -8
 4246              		.cfi_offset 14, -4
 4247 0002 84B0     		sub	sp, sp, #16
 4248              	.LCFI103:
 4249              		.cfi_def_cfa_offset 24
 4250 0004 00AF     		add	r7, sp, #0
 4251              	.LCFI104:
 4252              		.cfi_def_cfa_register 7
 4253 0006 7860     		str	r0, [r7, #4]
1850:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 4254              		.loc 1 1850 0
 4255 0008 7B68     		ldr	r3, [r7, #4]
 4256 000a 5B6A     		ldr	r3, [r3, #36]
ARM GAS  /tmp/cciBqq80.s 			page 107


 4257 000c FB60     		str	r3, [r7, #12]
1851:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   
1852:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* DMA Normal mode */
1853:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 4258              		.loc 1 1853 0
 4259 000e 7B68     		ldr	r3, [r7, #4]
 4260 0010 1B68     		ldr	r3, [r3]
 4261 0012 1B68     		ldr	r3, [r3]
 4262 0014 2022     		movs	r2, #32
 4263 0016 1340     		ands	r3, r2
 4264 0018 0FD1     		bne	.L230
1854:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1855:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxXferCount = 0;
 4265              		.loc 1 1855 0
 4266 001a FB68     		ldr	r3, [r7, #12]
 4267 001c 5A22     		movs	r2, #90
 4268 001e 0021     		movs	r1, #0
 4269 0020 9952     		strh	r1, [r3, r2]
1856:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1857:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
1858:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        in the UART CR3 register */
1859:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 4270              		.loc 1 1859 0
 4271 0022 FB68     		ldr	r3, [r7, #12]
 4272 0024 1B68     		ldr	r3, [r3]
 4273 0026 FA68     		ldr	r2, [r7, #12]
 4274 0028 1268     		ldr	r2, [r2]
 4275 002a 9268     		ldr	r2, [r2, #8]
 4276 002c 4021     		movs	r1, #64
 4277 002e 8A43     		bics	r2, r1
 4278 0030 9A60     		str	r2, [r3, #8]
1860:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1861:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* At end of Rx process, restore huart->RxState to Ready */
1862:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 4279              		.loc 1 1862 0
 4280 0032 FB68     		ldr	r3, [r7, #12]
 4281 0034 6A22     		movs	r2, #106
 4282 0036 2021     		movs	r1, #32
 4283 0038 9954     		strb	r1, [r3, r2]
 4284              	.L230:
1863:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1864:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   
1865:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   HAL_UART_RxCpltCallback(huart);
 4285              		.loc 1 1865 0
 4286 003a FB68     		ldr	r3, [r7, #12]
 4287 003c 1800     		movs	r0, r3
 4288 003e FFF7FEFF 		bl	HAL_UART_RxCpltCallback
1866:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 4289              		.loc 1 1866 0
 4290 0042 C046     		nop
 4291 0044 BD46     		mov	sp, r7
 4292 0046 04B0     		add	sp, sp, #16
 4293              		@ sp needed
 4294 0048 80BD     		pop	{r7, pc}
 4295              		.cfi_endproc
 4296              	.LFE69:
 4298              		.section	.text.UART_DMARxHalfCplt,"ax",%progbits
ARM GAS  /tmp/cciBqq80.s 			page 108


 4299              		.align	1
 4300              		.syntax unified
 4301              		.code	16
 4302              		.thumb_func
 4303              		.fpu softvfp
 4305              	UART_DMARxHalfCplt:
 4306              	.LFB70:
1867:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1868:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1869:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief DMA UART receive process half complete callback.
1870:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param hdma : DMA handle.
1871:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
1872:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1873:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
1874:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 4307              		.loc 1 1874 0
 4308              		.cfi_startproc
 4309 0000 80B5     		push	{r7, lr}
 4310              	.LCFI105:
 4311              		.cfi_def_cfa_offset 8
 4312              		.cfi_offset 7, -8
 4313              		.cfi_offset 14, -4
 4314 0002 84B0     		sub	sp, sp, #16
 4315              	.LCFI106:
 4316              		.cfi_def_cfa_offset 24
 4317 0004 00AF     		add	r7, sp, #0
 4318              	.LCFI107:
 4319              		.cfi_def_cfa_register 7
 4320 0006 7860     		str	r0, [r7, #4]
1875:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 4321              		.loc 1 1875 0
 4322 0008 7B68     		ldr	r3, [r7, #4]
 4323 000a 5B6A     		ldr	r3, [r3, #36]
 4324 000c FB60     		str	r3, [r7, #12]
1876:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1877:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   HAL_UART_RxHalfCpltCallback(huart);
 4325              		.loc 1 1877 0
 4326 000e FB68     		ldr	r3, [r7, #12]
 4327 0010 1800     		movs	r0, r3
 4328 0012 FFF7FEFF 		bl	HAL_UART_RxHalfCpltCallback
1878:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 4329              		.loc 1 1878 0
 4330 0016 C046     		nop
 4331 0018 BD46     		mov	sp, r7
 4332 001a 04B0     		add	sp, sp, #16
 4333              		@ sp needed
 4334 001c 80BD     		pop	{r7, pc}
 4335              		.cfi_endproc
 4336              	.LFE70:
 4338              		.section	.text.UART_DMAError,"ax",%progbits
 4339              		.align	1
 4340              		.syntax unified
 4341              		.code	16
 4342              		.thumb_func
 4343              		.fpu softvfp
 4345              	UART_DMAError:
 4346              	.LFB71:
ARM GAS  /tmp/cciBqq80.s 			page 109


1879:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1880:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1881:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief DMA UART communication error callback.
1882:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param hdma: DMA handle.
1883:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
1884:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1885:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_DMAError(DMA_HandleTypeDef *hdma)
1886:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 4347              		.loc 1 1886 0
 4348              		.cfi_startproc
 4349 0000 80B5     		push	{r7, lr}
 4350              	.LCFI108:
 4351              		.cfi_def_cfa_offset 8
 4352              		.cfi_offset 7, -8
 4353              		.cfi_offset 14, -4
 4354 0002 84B0     		sub	sp, sp, #16
 4355              	.LCFI109:
 4356              		.cfi_def_cfa_offset 24
 4357 0004 00AF     		add	r7, sp, #0
 4358              	.LCFI110:
 4359              		.cfi_def_cfa_register 7
 4360 0006 7860     		str	r0, [r7, #4]
1887:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 4361              		.loc 1 1887 0
 4362 0008 7B68     		ldr	r3, [r7, #4]
 4363 000a 5B6A     		ldr	r3, [r3, #36]
 4364 000c FB60     		str	r3, [r7, #12]
1888:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->RxXferCount = 0;
 4365              		.loc 1 1888 0
 4366 000e FB68     		ldr	r3, [r7, #12]
 4367 0010 5A22     		movs	r2, #90
 4368 0012 0021     		movs	r1, #0
 4369 0014 9952     		strh	r1, [r3, r2]
1889:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->TxXferCount = 0;
 4370              		.loc 1 1889 0
 4371 0016 FB68     		ldr	r3, [r7, #12]
 4372 0018 5222     		movs	r2, #82
 4373 001a 0021     		movs	r1, #0
 4374 001c 9952     		strh	r1, [r3, r2]
1890:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState= HAL_UART_STATE_READY;
 4375              		.loc 1 1890 0
 4376 001e FB68     		ldr	r3, [r7, #12]
 4377 0020 6922     		movs	r2, #105
 4378 0022 2021     		movs	r1, #32
 4379 0024 9954     		strb	r1, [r3, r2]
1891:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->RxState= HAL_UART_STATE_READY;
 4380              		.loc 1 1891 0
 4381 0026 FB68     		ldr	r3, [r7, #12]
 4382 0028 6A22     		movs	r2, #106
 4383 002a 2021     		movs	r1, #32
 4384 002c 9954     		strb	r1, [r3, r2]
1892:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->ErrorCode |= HAL_UART_ERROR_DMA;
 4385              		.loc 1 1892 0
 4386 002e FB68     		ldr	r3, [r7, #12]
 4387 0030 DB6E     		ldr	r3, [r3, #108]
 4388 0032 1022     		movs	r2, #16
 4389 0034 1A43     		orrs	r2, r3
ARM GAS  /tmp/cciBqq80.s 			page 110


 4390 0036 FB68     		ldr	r3, [r7, #12]
 4391 0038 DA66     		str	r2, [r3, #108]
1893:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   HAL_UART_ErrorCallback(huart);
 4392              		.loc 1 1893 0
 4393 003a FB68     		ldr	r3, [r7, #12]
 4394 003c 1800     		movs	r0, r3
 4395 003e FFF7FEFF 		bl	HAL_UART_ErrorCallback
1894:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 4396              		.loc 1 1894 0
 4397 0042 C046     		nop
 4398 0044 BD46     		mov	sp, r7
 4399 0046 04B0     		add	sp, sp, #16
 4400              		@ sp needed
 4401 0048 80BD     		pop	{r7, pc}
 4402              		.cfi_endproc
 4403              	.LFE71:
 4405              		.section	.text.UART_Transmit_IT,"ax",%progbits
 4406              		.align	1
 4407              		.global	UART_Transmit_IT
 4408              		.syntax unified
 4409              		.code	16
 4410              		.thumb_func
 4411              		.fpu softvfp
 4413              	UART_Transmit_IT:
 4414              	.LFB72:
1895:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1896:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1897:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Send an amount of data in interrupt mode.
1898:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   Function is called under interruption only, once
1899:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         interruptions have been enabled by HAL_UART_Transmit_IT().
1900:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart: UART handle.
1901:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
1902:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1903:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
1904:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 4415              		.loc 1 1904 0
 4416              		.cfi_startproc
 4417 0000 80B5     		push	{r7, lr}
 4418              	.LCFI111:
 4419              		.cfi_def_cfa_offset 8
 4420              		.cfi_offset 7, -8
 4421              		.cfi_offset 14, -4
 4422 0002 84B0     		sub	sp, sp, #16
 4423              	.LCFI112:
 4424              		.cfi_def_cfa_offset 24
 4425 0004 00AF     		add	r7, sp, #0
 4426              	.LCFI113:
 4427              		.cfi_def_cfa_register 7
 4428 0006 7860     		str	r0, [r7, #4]
1905:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint16_t* tmp;
1906:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1907:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check that a Tx process is ongoing */
1908:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_BUSY_TX)
 4429              		.loc 1 1908 0
 4430 0008 7B68     		ldr	r3, [r7, #4]
 4431 000a 6922     		movs	r2, #105
 4432 000c 9B5C     		ldrb	r3, [r3, r2]
ARM GAS  /tmp/cciBqq80.s 			page 111


 4433 000e DBB2     		uxtb	r3, r3
 4434 0010 212B     		cmp	r3, #33
 4435 0012 45D1     		bne	.L234
1909:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1910:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if(huart->TxXferCount == 0)
 4436              		.loc 1 1910 0
 4437 0014 7B68     		ldr	r3, [r7, #4]
 4438 0016 5222     		movs	r2, #82
 4439 0018 9B5A     		ldrh	r3, [r3, r2]
 4440 001a 002B     		cmp	r3, #0
 4441 001c 11D1     		bne	.L235
1911:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1912:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Disable the UART Transmit Data Register Empty Interrupt */
1913:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 4442              		.loc 1 1913 0
 4443 001e 7B68     		ldr	r3, [r7, #4]
 4444 0020 1B68     		ldr	r3, [r3]
 4445 0022 7A68     		ldr	r2, [r7, #4]
 4446 0024 1268     		ldr	r2, [r2]
 4447 0026 1268     		ldr	r2, [r2]
 4448 0028 8021     		movs	r1, #128
 4449 002a 8A43     		bics	r2, r1
 4450 002c 1A60     		str	r2, [r3]
1914:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1915:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Enable the UART Transmit Complete Interrupt */
1916:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 4451              		.loc 1 1916 0
 4452 002e 7B68     		ldr	r3, [r7, #4]
 4453 0030 1B68     		ldr	r3, [r3]
 4454 0032 7A68     		ldr	r2, [r7, #4]
 4455 0034 1268     		ldr	r2, [r2]
 4456 0036 1268     		ldr	r2, [r2]
 4457 0038 4021     		movs	r1, #64
 4458 003a 0A43     		orrs	r2, r1
 4459 003c 1A60     		str	r2, [r3]
1917:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1918:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       return HAL_OK;
 4460              		.loc 1 1918 0
 4461 003e 0023     		movs	r3, #0
 4462 0040 2FE0     		b	.L236
 4463              	.L235:
1919:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1920:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     else
1921:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1922:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE
 4464              		.loc 1 1922 0
 4465 0042 7B68     		ldr	r3, [r7, #4]
 4466 0044 9A68     		ldr	r2, [r3, #8]
 4467 0046 8023     		movs	r3, #128
 4468 0048 5B01     		lsls	r3, r3, #5
 4469 004a 9A42     		cmp	r2, r3
 4470 004c 14D1     		bne	.L237
 4471              		.loc 1 1922 0 is_stmt 0 discriminator 1
 4472 004e 7B68     		ldr	r3, [r7, #4]
 4473 0050 1B69     		ldr	r3, [r3, #16]
 4474 0052 002B     		cmp	r3, #0
 4475 0054 10D1     		bne	.L237
ARM GAS  /tmp/cciBqq80.s 			page 112


1923:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
1924:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         tmp = (uint16_t*) huart->pTxBuffPtr;
 4476              		.loc 1 1924 0 is_stmt 1
 4477 0056 7B68     		ldr	r3, [r7, #4]
 4478 0058 DB6C     		ldr	r3, [r3, #76]
 4479 005a FB60     		str	r3, [r7, #12]
1925:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 4480              		.loc 1 1925 0
 4481 005c 7B68     		ldr	r3, [r7, #4]
 4482 005e 1B68     		ldr	r3, [r3]
 4483 0060 FA68     		ldr	r2, [r7, #12]
 4484 0062 1288     		ldrh	r2, [r2]
 4485 0064 D205     		lsls	r2, r2, #23
 4486 0066 D20D     		lsrs	r2, r2, #23
 4487 0068 92B2     		uxth	r2, r2
 4488 006a 1A85     		strh	r2, [r3, #40]
1926:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->pTxBuffPtr += 2;
 4489              		.loc 1 1926 0
 4490 006c 7B68     		ldr	r3, [r7, #4]
 4491 006e DB6C     		ldr	r3, [r3, #76]
 4492 0070 9A1C     		adds	r2, r3, #2
 4493 0072 7B68     		ldr	r3, [r7, #4]
 4494 0074 DA64     		str	r2, [r3, #76]
 4495 0076 09E0     		b	.L238
 4496              	.L237:
1927:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
1928:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       else
1929:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
1930:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 4497              		.loc 1 1930 0
 4498 0078 7B68     		ldr	r3, [r7, #4]
 4499 007a 1968     		ldr	r1, [r3]
 4500 007c 7B68     		ldr	r3, [r7, #4]
 4501 007e DB6C     		ldr	r3, [r3, #76]
 4502 0080 581C     		adds	r0, r3, #1
 4503 0082 7A68     		ldr	r2, [r7, #4]
 4504 0084 D064     		str	r0, [r2, #76]
 4505 0086 1B78     		ldrb	r3, [r3]
 4506 0088 9BB2     		uxth	r3, r3
 4507 008a 0B85     		strh	r3, [r1, #40]
 4508              	.L238:
1931:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
1932:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1933:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->TxXferCount--;
 4509              		.loc 1 1933 0
 4510 008c 7B68     		ldr	r3, [r7, #4]
 4511 008e 5222     		movs	r2, #82
 4512 0090 9B5A     		ldrh	r3, [r3, r2]
 4513 0092 013B     		subs	r3, r3, #1
 4514 0094 99B2     		uxth	r1, r3
 4515 0096 7B68     		ldr	r3, [r7, #4]
 4516 0098 5222     		movs	r2, #82
 4517 009a 9952     		strh	r1, [r3, r2]
1934:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1935:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       return HAL_OK;
 4518              		.loc 1 1935 0
 4519 009c 0023     		movs	r3, #0
ARM GAS  /tmp/cciBqq80.s 			page 113


 4520 009e 00E0     		b	.L236
 4521              	.L234:
1936:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1937:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1938:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   else
1939:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1940:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_BUSY;
 4522              		.loc 1 1940 0
 4523 00a0 0223     		movs	r3, #2
 4524              	.L236:
1941:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1942:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 4525              		.loc 1 1942 0
 4526 00a2 1800     		movs	r0, r3
 4527 00a4 BD46     		mov	sp, r7
 4528 00a6 04B0     		add	sp, sp, #16
 4529              		@ sp needed
 4530 00a8 80BD     		pop	{r7, pc}
 4531              		.cfi_endproc
 4532              	.LFE72:
 4534              		.section	.text.UART_EndTransmit_IT,"ax",%progbits
 4535              		.align	1
 4536              		.global	UART_EndTransmit_IT
 4537              		.syntax unified
 4538              		.code	16
 4539              		.thumb_func
 4540              		.fpu softvfp
 4542              	UART_EndTransmit_IT:
 4543              	.LFB73:
1943:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1944:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1945:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1946:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  Wrap up transmission in non-blocking mode.
1947:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart: pointer to a UART_HandleTypeDef structure that contains
1948:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1949:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
1950:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1951:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
1952:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 4544              		.loc 1 1952 0
 4545              		.cfi_startproc
 4546 0000 80B5     		push	{r7, lr}
 4547              	.LCFI114:
 4548              		.cfi_def_cfa_offset 8
 4549              		.cfi_offset 7, -8
 4550              		.cfi_offset 14, -4
 4551 0002 82B0     		sub	sp, sp, #8
 4552              	.LCFI115:
 4553              		.cfi_def_cfa_offset 16
 4554 0004 00AF     		add	r7, sp, #0
 4555              	.LCFI116:
 4556              		.cfi_def_cfa_register 7
 4557 0006 7860     		str	r0, [r7, #4]
1953:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Disable the UART Transmit Complete Interrupt */
1954:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 4558              		.loc 1 1954 0
 4559 0008 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cciBqq80.s 			page 114


 4560 000a 1B68     		ldr	r3, [r3]
 4561 000c 7A68     		ldr	r2, [r7, #4]
 4562 000e 1268     		ldr	r2, [r2]
 4563 0010 1268     		ldr	r2, [r2]
 4564 0012 4021     		movs	r1, #64
 4565 0014 8A43     		bics	r2, r1
 4566 0016 1A60     		str	r2, [r3]
1955:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1956:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Tx process is ended, restore huart->gState to Ready */
1957:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 4567              		.loc 1 1957 0
 4568 0018 7B68     		ldr	r3, [r7, #4]
 4569 001a 6922     		movs	r2, #105
 4570 001c 2021     		movs	r1, #32
 4571 001e 9954     		strb	r1, [r3, r2]
1958:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1959:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   HAL_UART_TxCpltCallback(huart);
 4572              		.loc 1 1959 0
 4573 0020 7B68     		ldr	r3, [r7, #4]
 4574 0022 1800     		movs	r0, r3
 4575 0024 FFF7FEFF 		bl	HAL_UART_TxCpltCallback
1960:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1961:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return HAL_OK;
 4576              		.loc 1 1961 0
 4577 0028 0023     		movs	r3, #0
1962:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 4578              		.loc 1 1962 0
 4579 002a 1800     		movs	r0, r3
 4580 002c BD46     		mov	sp, r7
 4581 002e 02B0     		add	sp, sp, #8
 4582              		@ sp needed
 4583 0030 80BD     		pop	{r7, pc}
 4584              		.cfi_endproc
 4585              	.LFE73:
 4587              		.section	.text.UART_Receive_IT,"ax",%progbits
 4588              		.align	1
 4589              		.global	UART_Receive_IT
 4590              		.syntax unified
 4591              		.code	16
 4592              		.thumb_func
 4593              		.fpu softvfp
 4595              	UART_Receive_IT:
 4596              	.LFB74:
1963:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1964:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1965:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1966:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Receive an amount of data in interrupt mode.
1967:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   Function is called under interruption only, once
1968:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         interruptions have been enabled by HAL_UART_Receive_IT()
1969:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart: UART handle.
1970:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
1971:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1972:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
1973:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 4597              		.loc 1 1973 0
 4598              		.cfi_startproc
 4599 0000 80B5     		push	{r7, lr}
ARM GAS  /tmp/cciBqq80.s 			page 115


 4600              	.LCFI117:
 4601              		.cfi_def_cfa_offset 8
 4602              		.cfi_offset 7, -8
 4603              		.cfi_offset 14, -4
 4604 0002 84B0     		sub	sp, sp, #16
 4605              	.LCFI118:
 4606              		.cfi_def_cfa_offset 24
 4607 0004 00AF     		add	r7, sp, #0
 4608              	.LCFI119:
 4609              		.cfi_def_cfa_register 7
 4610 0006 7860     		str	r0, [r7, #4]
1974:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint16_t* tmp;
1975:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint16_t uhMask = huart->Mask;
 4611              		.loc 1 1975 0
 4612 0008 0E23     		movs	r3, #14
 4613 000a FB18     		adds	r3, r7, r3
 4614 000c 7A68     		ldr	r2, [r7, #4]
 4615 000e 5C21     		movs	r1, #92
 4616 0010 525A     		ldrh	r2, [r2, r1]
 4617 0012 1A80     		strh	r2, [r3]
1976:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1977:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check that a Rx process is ongoing */
1978:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 4618              		.loc 1 1978 0
 4619 0014 7B68     		ldr	r3, [r7, #4]
 4620 0016 6A22     		movs	r2, #106
 4621 0018 9B5C     		ldrb	r3, [r3, r2]
 4622 001a DBB2     		uxtb	r3, r3
 4623 001c 222B     		cmp	r3, #34
 4624 001e 5FD1     		bne	.L242
1979:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1980:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 4625              		.loc 1 1980 0
 4626 0020 7B68     		ldr	r3, [r7, #4]
 4627 0022 9A68     		ldr	r2, [r3, #8]
 4628 0024 8023     		movs	r3, #128
 4629 0026 5B01     		lsls	r3, r3, #5
 4630 0028 9A42     		cmp	r2, r3
 4631 002a 17D1     		bne	.L243
 4632              		.loc 1 1980 0 is_stmt 0 discriminator 1
 4633 002c 7B68     		ldr	r3, [r7, #4]
 4634 002e 1B69     		ldr	r3, [r3, #16]
 4635 0030 002B     		cmp	r3, #0
 4636 0032 13D1     		bne	.L243
1981:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1982:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       tmp = (uint16_t*) huart->pRxBuffPtr ;
 4637              		.loc 1 1982 0 is_stmt 1
 4638 0034 7B68     		ldr	r3, [r7, #4]
 4639 0036 5B6D     		ldr	r3, [r3, #84]
 4640 0038 BB60     		str	r3, [r7, #8]
1983:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 4641              		.loc 1 1983 0
 4642 003a 7B68     		ldr	r3, [r7, #4]
 4643 003c 1B68     		ldr	r3, [r3]
 4644 003e 9B8C     		ldrh	r3, [r3, #36]
 4645 0040 9BB2     		uxth	r3, r3
 4646 0042 0E22     		movs	r2, #14
ARM GAS  /tmp/cciBqq80.s 			page 116


 4647 0044 BA18     		adds	r2, r7, r2
 4648 0046 1288     		ldrh	r2, [r2]
 4649 0048 1340     		ands	r3, r2
 4650 004a 9AB2     		uxth	r2, r3
 4651 004c BB68     		ldr	r3, [r7, #8]
 4652 004e 1A80     		strh	r2, [r3]
1984:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->pRxBuffPtr +=2;
 4653              		.loc 1 1984 0
 4654 0050 7B68     		ldr	r3, [r7, #4]
 4655 0052 5B6D     		ldr	r3, [r3, #84]
 4656 0054 9A1C     		adds	r2, r3, #2
 4657 0056 7B68     		ldr	r3, [r7, #4]
 4658 0058 5A65     		str	r2, [r3, #84]
 4659 005a 10E0     		b	.L244
 4660              	.L243:
1985:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1986:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     else
1987:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1988:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 4661              		.loc 1 1988 0
 4662 005c 7B68     		ldr	r3, [r7, #4]
 4663 005e 5B6D     		ldr	r3, [r3, #84]
 4664 0060 591C     		adds	r1, r3, #1
 4665 0062 7A68     		ldr	r2, [r7, #4]
 4666 0064 5165     		str	r1, [r2, #84]
 4667 0066 7A68     		ldr	r2, [r7, #4]
 4668 0068 1268     		ldr	r2, [r2]
 4669 006a 928C     		ldrh	r2, [r2, #36]
 4670 006c 92B2     		uxth	r2, r2
 4671 006e D2B2     		uxtb	r2, r2
 4672 0070 0E21     		movs	r1, #14
 4673 0072 7918     		adds	r1, r7, r1
 4674 0074 0988     		ldrh	r1, [r1]
 4675 0076 C9B2     		uxtb	r1, r1
 4676 0078 0A40     		ands	r2, r1
 4677 007a D2B2     		uxtb	r2, r2
 4678 007c 1A70     		strb	r2, [r3]
 4679              	.L244:
1989:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1990:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1991:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if(--huart->RxXferCount == 0)
 4680              		.loc 1 1991 0
 4681 007e 7B68     		ldr	r3, [r7, #4]
 4682 0080 5A22     		movs	r2, #90
 4683 0082 9B5A     		ldrh	r3, [r3, r2]
 4684 0084 013B     		subs	r3, r3, #1
 4685 0086 99B2     		uxth	r1, r3
 4686 0088 7B68     		ldr	r3, [r7, #4]
 4687 008a 5A22     		movs	r2, #90
 4688 008c 9952     		strh	r1, [r3, r2]
 4689 008e 7B68     		ldr	r3, [r7, #4]
 4690 0090 5A22     		movs	r2, #90
 4691 0092 9B5A     		ldrh	r3, [r3, r2]
 4692 0094 002B     		cmp	r3, #0
 4693 0096 21D1     		bne	.L245
1992:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1993:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
ARM GAS  /tmp/cciBqq80.s 			page 117


 4694              		.loc 1 1993 0
 4695 0098 7B68     		ldr	r3, [r7, #4]
 4696 009a 1B68     		ldr	r3, [r3]
 4697 009c 7A68     		ldr	r2, [r7, #4]
 4698 009e 1268     		ldr	r2, [r2]
 4699 00a0 1268     		ldr	r2, [r2]
 4700 00a2 2021     		movs	r1, #32
 4701 00a4 8A43     		bics	r2, r1
 4702 00a6 1A60     		str	r2, [r3]
1994:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1995:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Disable the UART Parity Error Interrupt */
1996:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 4703              		.loc 1 1996 0
 4704 00a8 7B68     		ldr	r3, [r7, #4]
 4705 00aa 1B68     		ldr	r3, [r3]
 4706 00ac 7A68     		ldr	r2, [r7, #4]
 4707 00ae 1268     		ldr	r2, [r2]
 4708 00b0 1268     		ldr	r2, [r2]
 4709 00b2 1249     		ldr	r1, .L247
 4710 00b4 0A40     		ands	r2, r1
 4711 00b6 1A60     		str	r2, [r3]
1997:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1998:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
1999:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 4712              		.loc 1 1999 0
 4713 00b8 7B68     		ldr	r3, [r7, #4]
 4714 00ba 1B68     		ldr	r3, [r3]
 4715 00bc 7A68     		ldr	r2, [r7, #4]
 4716 00be 1268     		ldr	r2, [r2]
 4717 00c0 9268     		ldr	r2, [r2, #8]
 4718 00c2 0121     		movs	r1, #1
 4719 00c4 8A43     		bics	r2, r1
 4720 00c6 9A60     		str	r2, [r3, #8]
2000:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2001:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Rx process is completed, restore huart->RxState to Ready */
2002:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->RxState = HAL_UART_STATE_READY;
 4721              		.loc 1 2002 0
 4722 00c8 7B68     		ldr	r3, [r7, #4]
 4723 00ca 6A22     		movs	r2, #106
 4724 00cc 2021     		movs	r1, #32
 4725 00ce 9954     		strb	r1, [r3, r2]
2003:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2004:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       HAL_UART_RxCpltCallback(huart);
 4726              		.loc 1 2004 0
 4727 00d0 7B68     		ldr	r3, [r7, #4]
 4728 00d2 1800     		movs	r0, r3
 4729 00d4 FFF7FEFF 		bl	HAL_UART_RxCpltCallback
2005:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2006:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       return HAL_OK;
 4730              		.loc 1 2006 0
 4731 00d8 0023     		movs	r3, #0
 4732 00da 0AE0     		b	.L246
 4733              	.L245:
2007:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
2008:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2009:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_OK;
 4734              		.loc 1 2009 0
ARM GAS  /tmp/cciBqq80.s 			page 118


 4735 00dc 0023     		movs	r3, #0
 4736 00de 08E0     		b	.L246
 4737              	.L242:
2010:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
2011:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   else
2012:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
2013:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Clear RXNE interrupt flag */
2014:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 4738              		.loc 1 2014 0
 4739 00e0 7B68     		ldr	r3, [r7, #4]
 4740 00e2 1B68     		ldr	r3, [r3]
 4741 00e4 7A68     		ldr	r2, [r7, #4]
 4742 00e6 1268     		ldr	r2, [r2]
 4743 00e8 9269     		ldr	r2, [r2, #24]
 4744 00ea 0821     		movs	r1, #8
 4745 00ec 0A43     		orrs	r2, r1
 4746 00ee 9A61     		str	r2, [r3, #24]
2015:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2016:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_BUSY;
 4747              		.loc 1 2016 0
 4748 00f0 0223     		movs	r3, #2
 4749              	.L246:
2017:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
2018:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 4750              		.loc 1 2018 0
 4751 00f2 1800     		movs	r0, r3
 4752 00f4 BD46     		mov	sp, r7
 4753 00f6 04B0     		add	sp, sp, #16
 4754              		@ sp needed
 4755 00f8 80BD     		pop	{r7, pc}
 4756              	.L248:
 4757 00fa C046     		.align	2
 4758              	.L247:
 4759 00fc FFFEFFFF 		.word	-257
 4760              		.cfi_endproc
 4761              	.LFE74:
 4763              		.text
 4764              	.Letext0:
 4765              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 4766              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 4767              		.file 4 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/system_stm32f0xx.h"
 4768              		.file 5 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 4769              		.file 6 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f0xx.h"
 4770              		.file 7 "/usr/arm-none-eabi/include/sys/lock.h"
 4771              		.file 8 "/usr/arm-none-eabi/include/sys/_types.h"
 4772              		.file 9 "/usr/lib/gcc/arm-none-eabi/6.2.0/include/stddef.h"
 4773              		.file 10 "/usr/arm-none-eabi/include/sys/reent.h"
 4774              		.file 11 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 4775              		.file 12 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 4776              		.file 13 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_uart.h"
ARM GAS  /tmp/cciBqq80.s 			page 119


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f0xx_hal_uart.c
     /tmp/cciBqq80.s:16     .text.HAL_UART_Init:0000000000000000 $t
     /tmp/cciBqq80.s:23     .text.HAL_UART_Init:0000000000000000 HAL_UART_Init
     /tmp/cciBqq80.s:557    .text.HAL_UART_MspInit:0000000000000000 HAL_UART_MspInit
     /tmp/cciBqq80.s:3016   .text.UART_SetConfig:0000000000000000 UART_SetConfig
     /tmp/cciBqq80.s:3567   .text.UART_AdvFeatureConfig:0000000000000000 UART_AdvFeatureConfig
     /tmp/cciBqq80.s:3783   .text.UART_CheckIdleState:0000000000000000 UART_CheckIdleState
     /tmp/cciBqq80.s:142    .text.HAL_UART_Init:00000000000000ac $d
     /tmp/cciBqq80.s:147    .text.HAL_HalfDuplex_Init:0000000000000000 $t
     /tmp/cciBqq80.s:154    .text.HAL_HalfDuplex_Init:0000000000000000 HAL_HalfDuplex_Init
     /tmp/cciBqq80.s:281    .text.HAL_HalfDuplex_Init:00000000000000bc $d
     /tmp/cciBqq80.s:286    .text.HAL_MultiProcessor_Init:0000000000000000 $t
     /tmp/cciBqq80.s:293    .text.HAL_MultiProcessor_Init:0000000000000000 HAL_MultiProcessor_Init
     /tmp/cciBqq80.s:448    .text.HAL_MultiProcessor_Init:00000000000000ec $d
     /tmp/cciBqq80.s:454    .text.HAL_UART_DeInit:0000000000000000 $t
     /tmp/cciBqq80.s:461    .text.HAL_UART_DeInit:0000000000000000 HAL_UART_DeInit
     /tmp/cciBqq80.s:590    .text.HAL_UART_MspDeInit:0000000000000000 HAL_UART_MspDeInit
     /tmp/cciBqq80.s:550    .text.HAL_UART_MspInit:0000000000000000 $t
     /tmp/cciBqq80.s:583    .text.HAL_UART_MspDeInit:0000000000000000 $t
     /tmp/cciBqq80.s:616    .text.HAL_UART_Transmit:0000000000000000 $t
     /tmp/cciBqq80.s:623    .text.HAL_UART_Transmit:0000000000000000 HAL_UART_Transmit
     /tmp/cciBqq80.s:3902   .text.UART_WaitOnFlagUntilTimeout:0000000000000000 UART_WaitOnFlagUntilTimeout
     /tmp/cciBqq80.s:832    .text.HAL_UART_Receive:0000000000000000 $t
     /tmp/cciBqq80.s:839    .text.HAL_UART_Receive:0000000000000000 HAL_UART_Receive
     /tmp/cciBqq80.s:1127   .text.HAL_UART_Receive:00000000000001a8 $d
     /tmp/cciBqq80.s:1132   .text.HAL_UART_Transmit_IT:0000000000000000 $t
     /tmp/cciBqq80.s:1139   .text.HAL_UART_Transmit_IT:0000000000000000 HAL_UART_Transmit_IT
     /tmp/cciBqq80.s:1271   .text.HAL_UART_Receive_IT:0000000000000000 $t
     /tmp/cciBqq80.s:1278   .text.HAL_UART_Receive_IT:0000000000000000 HAL_UART_Receive_IT
     /tmp/cciBqq80.s:1505   .text.HAL_UART_Receive_IT:0000000000000148 $d
     /tmp/cciBqq80.s:1510   .text.HAL_UART_IRQHandler:0000000000000000 $t
     /tmp/cciBqq80.s:1517   .text.HAL_UART_IRQHandler:0000000000000000 HAL_UART_IRQHandler
     /tmp/cciBqq80.s:4595   .text.UART_Receive_IT:0000000000000000 UART_Receive_IT
     /tmp/cciBqq80.s:4413   .text.UART_Transmit_IT:0000000000000000 UART_Transmit_IT
     /tmp/cciBqq80.s:4542   .text.UART_EndTransmit_IT:0000000000000000 UART_EndTransmit_IT
     /tmp/cciBqq80.s:2528   .text.HAL_UART_ErrorCallback:0000000000000000 HAL_UART_ErrorCallback
     /tmp/cciBqq80.s:1766   .text.HAL_UART_Transmit_DMA:0000000000000000 $t
     /tmp/cciBqq80.s:1773   .text.HAL_UART_Transmit_DMA:0000000000000000 HAL_UART_Transmit_DMA
     /tmp/cciBqq80.s:1941   .text.HAL_UART_Transmit_DMA:00000000000000f0 $d
     /tmp/cciBqq80.s:4124   .text.UART_DMATransmitCplt:0000000000000000 UART_DMATransmitCplt
     /tmp/cciBqq80.s:4198   .text.UART_DMATxHalfCplt:0000000000000000 UART_DMATxHalfCplt
     /tmp/cciBqq80.s:4345   .text.UART_DMAError:0000000000000000 UART_DMAError
     /tmp/cciBqq80.s:1948   .text.HAL_UART_Receive_DMA:0000000000000000 $t
     /tmp/cciBqq80.s:1955   .text.HAL_UART_Receive_DMA:0000000000000000 HAL_UART_Receive_DMA
     /tmp/cciBqq80.s:2112   .text.HAL_UART_Receive_DMA:00000000000000e0 $d
     /tmp/cciBqq80.s:4238   .text.UART_DMAReceiveCplt:0000000000000000 UART_DMAReceiveCplt
     /tmp/cciBqq80.s:4305   .text.UART_DMARxHalfCplt:0000000000000000 UART_DMARxHalfCplt
     /tmp/cciBqq80.s:2119   .text.HAL_UART_DMAPause:0000000000000000 $t
     /tmp/cciBqq80.s:2126   .text.HAL_UART_DMAPause:0000000000000000 HAL_UART_DMAPause
     /tmp/cciBqq80.s:2209   .text.HAL_UART_DMAResume:0000000000000000 $t
     /tmp/cciBqq80.s:2216   .text.HAL_UART_DMAResume:0000000000000000 HAL_UART_DMAResume
     /tmp/cciBqq80.s:2304   .text.HAL_UART_DMAStop:0000000000000000 $t
     /tmp/cciBqq80.s:2311   .text.HAL_UART_DMAStop:0000000000000000 HAL_UART_DMAStop
     /tmp/cciBqq80.s:2389   .text.HAL_UART_TxCpltCallback:0000000000000000 $t
     /tmp/cciBqq80.s:2396   .text.HAL_UART_TxCpltCallback:0000000000000000 HAL_UART_TxCpltCallback
     /tmp/cciBqq80.s:2422   .text.HAL_UART_TxHalfCpltCallback:0000000000000000 $t
ARM GAS  /tmp/cciBqq80.s 			page 120


     /tmp/cciBqq80.s:2429   .text.HAL_UART_TxHalfCpltCallback:0000000000000000 HAL_UART_TxHalfCpltCallback
     /tmp/cciBqq80.s:2455   .text.HAL_UART_RxCpltCallback:0000000000000000 $t
     /tmp/cciBqq80.s:2462   .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
     /tmp/cciBqq80.s:2488   .text.HAL_UART_RxHalfCpltCallback:0000000000000000 $t
     /tmp/cciBqq80.s:2495   .text.HAL_UART_RxHalfCpltCallback:0000000000000000 HAL_UART_RxHalfCpltCallback
     /tmp/cciBqq80.s:2521   .text.HAL_UART_ErrorCallback:0000000000000000 $t
     /tmp/cciBqq80.s:2554   .text.HAL_MultiProcessor_EnableMuteMode:0000000000000000 $t
     /tmp/cciBqq80.s:2561   .text.HAL_MultiProcessor_EnableMuteMode:0000000000000000 HAL_MultiProcessor_EnableMuteMode
     /tmp/cciBqq80.s:2628   .text.HAL_MultiProcessor_DisableMuteMode:0000000000000000 $t
     /tmp/cciBqq80.s:2635   .text.HAL_MultiProcessor_DisableMuteMode:0000000000000000 HAL_MultiProcessor_DisableMuteMode
     /tmp/cciBqq80.s:2700   .text.HAL_MultiProcessor_DisableMuteMode:0000000000000050 $d
     /tmp/cciBqq80.s:2705   .text.HAL_MultiProcessor_EnterMuteMode:0000000000000000 $t
     /tmp/cciBqq80.s:2712   .text.HAL_MultiProcessor_EnterMuteMode:0000000000000000 HAL_MultiProcessor_EnterMuteMode
     /tmp/cciBqq80.s:2747   .text.HAL_HalfDuplex_EnableTransmitter:0000000000000000 $t
     /tmp/cciBqq80.s:2754   .text.HAL_HalfDuplex_EnableTransmitter:0000000000000000 HAL_HalfDuplex_EnableTransmitter
     /tmp/cciBqq80.s:2831   .text.HAL_HalfDuplex_EnableReceiver:0000000000000000 $t
     /tmp/cciBqq80.s:2838   .text.HAL_HalfDuplex_EnableReceiver:0000000000000000 HAL_HalfDuplex_EnableReceiver
     /tmp/cciBqq80.s:2915   .text.HAL_UART_GetState:0000000000000000 $t
     /tmp/cciBqq80.s:2922   .text.HAL_UART_GetState:0000000000000000 HAL_UART_GetState
     /tmp/cciBqq80.s:2972   .text.HAL_UART_GetError:0000000000000000 $t
     /tmp/cciBqq80.s:2979   .text.HAL_UART_GetError:0000000000000000 HAL_UART_GetError
     /tmp/cciBqq80.s:3009   .text.UART_SetConfig:0000000000000000 $t
     /tmp/cciBqq80.s:3546   .text.UART_SetConfig:0000000000000350 $d
     /tmp/cciBqq80.s:3560   .text.UART_AdvFeatureConfig:0000000000000000 $t
     /tmp/cciBqq80.s:3763   .text.UART_AdvFeatureConfig:0000000000000134 $d
     /tmp/cciBqq80.s:3776   .text.UART_CheckIdleState:0000000000000000 $t
     /tmp/cciBqq80.s:3889   .text.UART_CheckIdleState:0000000000000094 $d
     /tmp/cciBqq80.s:3895   .text.UART_WaitOnFlagUntilTimeout:0000000000000000 $t
     /tmp/cciBqq80.s:4113   .text.UART_WaitOnFlagUntilTimeout:0000000000000140 $d
     /tmp/cciBqq80.s:4118   .text.UART_DMATransmitCplt:0000000000000000 $t
     /tmp/cciBqq80.s:4192   .text.UART_DMATxHalfCplt:0000000000000000 $t
     /tmp/cciBqq80.s:4232   .text.UART_DMAReceiveCplt:0000000000000000 $t
     /tmp/cciBqq80.s:4299   .text.UART_DMARxHalfCplt:0000000000000000 $t
     /tmp/cciBqq80.s:4339   .text.UART_DMAError:0000000000000000 $t
     /tmp/cciBqq80.s:4406   .text.UART_Transmit_IT:0000000000000000 $t
     /tmp/cciBqq80.s:4535   .text.UART_EndTransmit_IT:0000000000000000 $t
     /tmp/cciBqq80.s:4588   .text.UART_Receive_IT:0000000000000000 $t
     /tmp/cciBqq80.s:4759   .text.UART_Receive_IT:00000000000000fc $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_UARTEx_WakeupCallback
HAL_DMA_Start_IT
HAL_DMA_Abort
__aeabi_uidiv
HAL_RCC_GetPCLK1Freq
HAL_RCC_GetSysClockFreq
HAL_GetTick
