ARM GAS  /tmp/ccWvJRjM.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f0xx_hal_rcc.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.HAL_RCC_DeInit,"ax",%progbits
  16              		.align	1
  17              		.global	HAL_RCC_DeInit
  18              		.syntax unified
  19              		.code	16
  20              		.thumb_func
  21              		.fpu softvfp
  23              	HAL_RCC_DeInit:
  24              	.LFB35:
  25              		.file 1 "Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c"
   1:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** /**
   2:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   ******************************************************************************
   3:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @file    stm32f0xx_hal_rcc.c
   4:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @author  MCD Application Team
   5:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @version V1.4.0
   6:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @date    27-May-2016
   7:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @brief   RCC HAL module driver.
   8:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *          This file provides firmware functions to manage the following 
   9:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *          functionalities of the Reset and Clock Control (RCC) peripheral:
  10:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *           + Initialization and de-initialization functions
  11:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *           + Peripheral Control functions
  12:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *       
  13:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   @verbatim                
  14:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   ==============================================================================
  15:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****                       ##### RCC specific features #####
  16:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   ==============================================================================
  17:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     [..]  
  18:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       After reset the device is running from Internal High Speed oscillator
  19:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       (HSI 8MHz) with Flash 0 wait state, Flash prefetch buffer is enabled, 
  20:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       and all peripherals are off except internal SRAM, Flash and JTAG.
  21:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       (+) There is no prescaler on High speed (AHB) and Low speed (APB) buses;
  22:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           all peripherals mapped on these buses are running at HSI speed.
  23:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       (+) The clock for all peripherals is switched off, except the SRAM and FLASH.
  24:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       (+) All GPIOs are in input floating state, except the JTAG pins which
  25:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           are assigned to be used for debug purpose.
  26:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     [..] Once the device started from reset, the user application has to:
  27:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       (+) Configure the clock source to be used to drive the System clock
  28:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           (if the application needs higher frequency/performance)
  29:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       (+) Configure the System clock frequency and Flash settings  
  30:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       (+) Configure the AHB and APB buses prescalers
  31:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       (+) Enable the clock for the peripheral(s) to be used
  32:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       (+) Configure the clock source(s) for peripherals whose clocks are not
  33:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           derived from the System clock (RTC, ADC, I2C, USART, TIM, USB FS, etc..)
ARM GAS  /tmp/ccWvJRjM.s 			page 2


  34:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
  35:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****                       ##### RCC Limitations #####
  36:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   ==============================================================================
  37:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     [..]  
  38:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       A delay between an RCC peripheral clock enable and the effective peripheral 
  39:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       enabling should be taken into account in order to manage the peripheral read/write 
  40:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       from/to registers.
  41:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       (+) This delay depends on the peripheral mapping.
  42:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         (++) AHB & APB peripherals, 1 dummy read is necessary
  43:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
  44:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     [..]  
  45:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       Workarounds:
  46:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       (#) For AHB & APB peripherals, a dummy read to the peripheral register has been
  47:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           inserted in each __HAL_RCC_PPP_CLK_ENABLE() macro.
  48:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
  49:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   @endverbatim
  50:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   ******************************************************************************
  51:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @attention
  52:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *
  53:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
  54:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *
  55:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * Redistribution and use in source and binary forms, with or without modification,
  56:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * are permitted provided that the following conditions are met:
  57:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  58:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *      this list of conditions and the following disclaimer.
  59:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  60:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *      this list of conditions and the following disclaimer in the documentation
  61:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *      and/or other materials provided with the distribution.
  62:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  63:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *      may be used to endorse or promote products derived from this software
  64:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *      without specific prior written permission.
  65:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *
  66:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  67:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  68:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  69:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  70:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  71:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  72:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  73:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  74:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  75:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  76:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *
  77:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   ******************************************************************************  
  78:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** */
  79:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   
  80:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** /* Includes ------------------------------------------------------------------*/
  81:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** #include "stm32f0xx_hal.h"
  82:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
  83:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** /** @addtogroup STM32F0xx_HAL_Driver
  84:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @{
  85:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   */
  86:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
  87:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** /** @defgroup RCC RCC
  88:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** * @brief RCC HAL module driver
  89:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @{
  90:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   */
ARM GAS  /tmp/ccWvJRjM.s 			page 3


  91:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
  92:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** #ifdef HAL_RCC_MODULE_ENABLED
  93:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
  94:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** /* Private typedef -----------------------------------------------------------*/
  95:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** /* Private define ------------------------------------------------------------*/
  96:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** /** @defgroup RCC_Private_Constants RCC Private Constants
  97:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****  * @{
  98:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****  */
  99:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** /**
 100:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @}
 101:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   */
 102:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** /* Private macro -------------------------------------------------------------*/
 103:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** /** @defgroup RCC_Private_Macros RCC Private Macros
 104:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @{
 105:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   */
 106:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
 107:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** #define MCO1_CLK_ENABLE()     __HAL_RCC_GPIOA_CLK_ENABLE()
 108:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** #define MCO1_GPIO_PORT        GPIOA
 109:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** #define MCO1_PIN              GPIO_PIN_8
 110:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
 111:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** /**
 112:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @}
 113:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   */
 114:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
 115:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** /* Private variables ---------------------------------------------------------*/
 116:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** /** @defgroup RCC_Private_Variables RCC Private Variables
 117:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @{
 118:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   */
 119:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** /**
 120:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @}
 121:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   */
 122:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
 123:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** /* Private function prototypes -----------------------------------------------*/
 124:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** /* Exported functions ---------------------------------------------------------*/
 125:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
 126:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** /** @defgroup RCC_Exported_Functions RCC Exported Functions
 127:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @{
 128:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   */
 129:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
 130:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** /** @defgroup RCC_Exported_Functions_Group1 Initialization and de-initialization functions 
 131:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *  @brief    Initialization and Configuration functions 
 132:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *
 133:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   @verbatim    
 134:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   ===============================================================================
 135:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****            ##### Initialization and de-initialization functions #####
 136:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   ===============================================================================
 137:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     [..]
 138:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       This section provides functions allowing to configure the internal/external oscillators
 139:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       (HSE, HSI, HSI14, HSI48, LSE, LSI, PLL, CSS and MCO) and the System buses clocks (SYSCLK, 
 140:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       AHB and APB1).
 141:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
 142:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     [..] Internal/external clock and PLL configuration
 143:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       (#) HSI (high-speed internal), 8 MHz factory-trimmed RC used directly or through
 144:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           the PLL as System clock source.
 145:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           The HSI clock can be used also to clock the USART and I2C peripherals.
 146:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
 147:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       (#) HSI14 (high-speed internal), 14 MHz factory-trimmed RC used directly to clock 
ARM GAS  /tmp/ccWvJRjM.s 			page 4


 148:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           the ADC peripheral.
 149:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
 150:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       (#) LSI (low-speed internal), ~40 KHz low consumption RC used as IWDG and/or RTC
 151:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           clock source.
 152:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
 153:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       (#) HSE (high-speed external), 4 to 32 MHz crystal oscillator used directly or
 154:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           through the PLL as System clock source. Can be used also as RTC clock source.
 155:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
 156:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       (#) LSE (low-speed external), 32 KHz oscillator used as RTC clock source.   
 157:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
 158:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       (#) PLL (clocked by HSI, HSI48 or HSE), featuring different output clocks:
 159:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****        (++) The first output is used to generate the high speed system clock (up to 48 MHz)
 160:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****        (++) The second output is used to generate the clock for the USB FS (48 MHz)
 161:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****        (++) The third output may be used to generate the clock for the TIM, I2C and USART 
 162:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****             peripherals (up to 48 MHz)
 163:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
 164:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       (#) CSS (Clock security system), once enable using the macro __HAL_RCC_CSS_ENABLE()
 165:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           and if a HSE clock failure occurs(HSE used directly or through PLL as System 
 166:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           clock source), the System clocks automatically switched to HSI and an interrupt
 167:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           is generated if enabled. The interrupt is linked to the Cortex-M0 NMI 
 168:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           (Non-Maskable Interrupt) exception vector.   
 169:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
 170:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       (#) MCO (microcontroller clock output), used to output SYSCLK, HSI, HSE, LSI, LSE or PLL
 171:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           clock (divided by 2) output on pin (such as PA8 pin).
 172:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
 173:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     [..] System, AHB and APB buses clocks configuration
 174:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       (#) Several clock sources can be used to drive the System clock (SYSCLK): HSI,
 175:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           HSE and PLL.
 176:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           The AHB clock (HCLK) is derived from System clock through configurable
 177:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           prescaler and used to clock the CPU, memory and peripherals mapped
 178:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           on AHB bus (DMA, GPIO...). APB1 (PCLK1) clock is derived
 179:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           from AHB clock through configurable prescalers and used to clock
 180:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           the peripherals mapped on these buses. You can use
 181:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           "@ref HAL_RCC_GetSysClockFreq()" function to retrieve the frequencies of these clocks.
 182:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
 183:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       (#) All the peripheral clocks are derived from the System clock (SYSCLK) except:
 184:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         (++) The FLASH program/erase clock  which is always HSI 8MHz clock.
 185:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         (++) The USB 48 MHz clock which is derived from the PLL VCO clock.
 186:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         (++) The USART clock which can be derived as well from HSI 8MHz, LSI or LSE.
 187:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         (++) The I2C clock which can be derived as well from HSI 8MHz clock.
 188:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         (++) The ADC clock which is derived from PLL output.
 189:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         (++) The RTC clock which is derived from the LSE, LSI or 1 MHz HSE_RTC
 190:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****              (HSE divided by a programmable prescaler). The System clock (SYSCLK)
 191:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****              frequency must be higher or equal to the RTC clock frequency.
 192:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         (++) IWDG clock which is always the LSI clock.
 193:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
 194:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       (#) For the STM32F0xx devices, the maximum frequency of the SYSCLK, HCLK and PCLK1 is 48 MHz,
 195:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           Depending on the SYSCLK frequency, the flash latency should be adapted accordingly.
 196:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
 197:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       (#) After reset, the System clock source is the HSI (8 MHz) with 0 WS and
 198:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           prefetch is disabled.
 199:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   @endverbatim
 200:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @{
 201:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   */
 202:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   
 203:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** /*
 204:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   Additional consideration on the SYSCLK based on Latency settings:
ARM GAS  /tmp/ccWvJRjM.s 			page 5


 205:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           +-----------------------------------------------+
 206:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           | Latency       | SYSCLK clock frequency (MHz)  |
 207:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           |---------------|-------------------------------|
 208:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           |0WS(1CPU cycle)|       0 < SYSCLK <= 24        |
 209:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           |---------------|-------------------------------|
 210:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           |1WS(2CPU cycle)|      24 < SYSCLK <= 48        |
 211:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           +-----------------------------------------------+
 212:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   */
 213:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
 214:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** /**
 215:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
 216:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @note   The default reset state of the clock configuration is given below:
 217:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *            - HSI ON and used as system clock source
 218:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *            - HSE and PLL OFF
 219:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *            - AHB, APB1 prescaler set to 1.
 220:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *            - CSS and MCO1 OFF
 221:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *            - All interrupts disabled
 222:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @note   This function does not modify the configuration of the
 223:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *            - Peripheral clocks
 224:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *            - LSI, LSE and RTC clocks
 225:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @retval None
 226:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   */
 227:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** void HAL_RCC_DeInit(void)
 228:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** {
  26              		.loc 1 228 0
  27              		.cfi_startproc
  28 0000 80B5     		push	{r7, lr}
  29              	.LCFI0:
  30              		.cfi_def_cfa_offset 8
  31              		.cfi_offset 7, -8
  32              		.cfi_offset 14, -4
  33 0002 00AF     		add	r7, sp, #0
  34              	.LCFI1:
  35              		.cfi_def_cfa_register 7
 229:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   /* Set HSION bit, HSITRIM[4:0] bits to the reset value*/
 230:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   SET_BIT(RCC->CR, RCC_CR_HSION | RCC_CR_HSITRIM_4); 
  36              		.loc 1 230 0
  37 0004 144B     		ldr	r3, .L2
  38 0006 144A     		ldr	r2, .L2
  39 0008 1268     		ldr	r2, [r2]
  40 000a 8121     		movs	r1, #129
  41 000c 0A43     		orrs	r2, r1
  42 000e 1A60     		str	r2, [r3]
 231:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
 232:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   /* Reset SW[1:0], HPRE[3:0], PPRE[2:0] and MCOSEL[2:0] bits */
 233:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   CLEAR_BIT(RCC->CFGR, RCC_CFGR_SW | RCC_CFGR_HPRE | RCC_CFGR_PPRE | RCC_CFGR_MCO);
  43              		.loc 1 233 0
  44 0010 114B     		ldr	r3, .L2
  45 0012 114A     		ldr	r2, .L2
  46 0014 5268     		ldr	r2, [r2, #4]
  47 0016 1149     		ldr	r1, .L2+4
  48 0018 0A40     		ands	r2, r1
  49 001a 5A60     		str	r2, [r3, #4]
 234:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
 235:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   /* Reset HSEON, CSSON, PLLON bits */
 236:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   CLEAR_BIT(RCC->CR, RCC_CR_PLLON | RCC_CR_CSSON | RCC_CR_HSEON);
  50              		.loc 1 236 0
ARM GAS  /tmp/ccWvJRjM.s 			page 6


  51 001c 0E4B     		ldr	r3, .L2
  52 001e 0E4A     		ldr	r2, .L2
  53 0020 1268     		ldr	r2, [r2]
  54 0022 0F49     		ldr	r1, .L2+8
  55 0024 0A40     		ands	r2, r1
  56 0026 1A60     		str	r2, [r3]
 237:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   
 238:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   /* Reset HSEBYP bit */
 239:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
  57              		.loc 1 239 0
  58 0028 0B4B     		ldr	r3, .L2
  59 002a 0B4A     		ldr	r2, .L2
  60 002c 1268     		ldr	r2, [r2]
  61 002e 0D49     		ldr	r1, .L2+12
  62 0030 0A40     		ands	r2, r1
  63 0032 1A60     		str	r2, [r3]
 240:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   
 241:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   /* Reset CFGR register */
 242:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   CLEAR_REG(RCC->CFGR);
  64              		.loc 1 242 0
  65 0034 084B     		ldr	r3, .L2
  66 0036 0022     		movs	r2, #0
  67 0038 5A60     		str	r2, [r3, #4]
 243:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   
 244:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   /* Reset CFGR2 register */
 245:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   CLEAR_REG(RCC->CFGR2);
  68              		.loc 1 245 0
  69 003a 074B     		ldr	r3, .L2
  70 003c 0022     		movs	r2, #0
  71 003e DA62     		str	r2, [r3, #44]
 246:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   
 247:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   /* Reset CFGR3 register */
 248:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   CLEAR_REG(RCC->CFGR3);
  72              		.loc 1 248 0
  73 0040 054B     		ldr	r3, .L2
  74 0042 0022     		movs	r2, #0
  75 0044 1A63     		str	r2, [r3, #48]
 249:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   
 250:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   /* Disable all interrupts */
 251:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   CLEAR_REG(RCC->CIR);
  76              		.loc 1 251 0
  77 0046 044B     		ldr	r3, .L2
  78 0048 0022     		movs	r2, #0
  79 004a 9A60     		str	r2, [r3, #8]
 252:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
 253:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   /* Update the SystemCoreClock global variable */
 254:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   SystemCoreClock = HSI_VALUE;
  80              		.loc 1 254 0
  81 004c 064B     		ldr	r3, .L2+16
  82 004e 074A     		ldr	r2, .L2+20
  83 0050 1A60     		str	r2, [r3]
 255:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** }
  84              		.loc 1 255 0
  85 0052 C046     		nop
  86 0054 BD46     		mov	sp, r7
  87              		@ sp needed
  88 0056 80BD     		pop	{r7, pc}
ARM GAS  /tmp/ccWvJRjM.s 			page 7


  89              	.L3:
  90              		.align	2
  91              	.L2:
  92 0058 00100240 		.word	1073876992
  93 005c 0CF8FFF0 		.word	-251660276
  94 0060 FFFFF6FE 		.word	-17367041
  95 0064 FFFFFBFF 		.word	-262145
  96 0068 00000000 		.word	SystemCoreClock
  97 006c 00127A00 		.word	8000000
  98              		.cfi_endproc
  99              	.LFE35:
 101              		.section	.text.HAL_RCC_OscConfig,"ax",%progbits
 102              		.align	1
 103              		.global	HAL_RCC_OscConfig
 104              		.syntax unified
 105              		.code	16
 106              		.thumb_func
 107              		.fpu softvfp
 109              	HAL_RCC_OscConfig:
 110              	.LFB36:
 256:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
 257:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** /**
 258:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @brief  Initializes the RCC Oscillators according to the specified parameters in the
 259:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *         RCC_OscInitTypeDef.
 260:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that
 261:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *         contains the configuration information for the RCC Oscillators.
 262:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @note   The PLL is not disabled when used as system clock.
 263:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @note   Transitions LSE Bypass to LSE On and LSE On to LSE Bypass are not
 264:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *         supported by this macro. User should request a transition to LSE Off
 265:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *         first and then LSE On or LSE Bypass.
 266:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @note   Transition HSE Bypass to HSE On and HSE On to HSE Bypass are not
 267:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *         supported by this macro. User should request a transition to HSE Off
 268:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *         first and then HSE On or HSE Bypass.
 269:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @retval HAL status
 270:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   */
 271:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
 272:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** {
 111              		.loc 1 272 0
 112              		.cfi_startproc
 113 0000 80B5     		push	{r7, lr}
 114              	.LCFI2:
 115              		.cfi_def_cfa_offset 8
 116              		.cfi_offset 7, -8
 117              		.cfi_offset 14, -4
 118 0002 86B0     		sub	sp, sp, #24
 119              	.LCFI3:
 120              		.cfi_def_cfa_offset 32
 121 0004 00AF     		add	r7, sp, #0
 122              	.LCFI4:
 123              		.cfi_def_cfa_register 7
 124 0006 7860     		str	r0, [r7, #4]
 273:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****    uint32_t tickstart = 0;
 125              		.loc 1 273 0
 126 0008 0023     		movs	r3, #0
 127 000a 3B61     		str	r3, [r7, #16]
 274:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   
 275:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   /* Check the parameters */
ARM GAS  /tmp/ccWvJRjM.s 			page 8


 276:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   assert_param(RCC_OscInitStruct != NULL);
 277:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 278:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   
 279:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   /*------------------------------- HSE Configuration ------------------------*/ 
 280:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 128              		.loc 1 280 0
 129 000c 7B68     		ldr	r3, [r7, #4]
 130 000e 1B68     		ldr	r3, [r3]
 131 0010 0122     		movs	r2, #1
 132 0012 1340     		ands	r3, r2
 133 0014 00D1     		bne	.LCB94
 134 0016 8DE0     		b	.L5	@long jump
 135              	.LCB94:
 281:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   {
 282:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     /* Check the parameters */
 283:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 284:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         
 285:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowe
 286:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 136              		.loc 1 286 0
 137 0018 C54B     		ldr	r3, .L76
 138 001a 5B68     		ldr	r3, [r3, #4]
 139 001c 0C22     		movs	r2, #12
 140 001e 1340     		ands	r3, r2
 141 0020 042B     		cmp	r3, #4
 142 0022 0ED0     		beq	.L6
 287:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_
 143              		.loc 1 287 0
 144 0024 C24B     		ldr	r3, .L76
 145 0026 5B68     		ldr	r3, [r3, #4]
 146 0028 0C22     		movs	r2, #12
 147 002a 1340     		ands	r3, r2
 148 002c 082B     		cmp	r3, #8
 149 002e 16D1     		bne	.L7
 150              		.loc 1 287 0 is_stmt 0 discriminator 1
 151 0030 BF4B     		ldr	r3, .L76
 152 0032 5A68     		ldr	r2, [r3, #4]
 153 0034 C023     		movs	r3, #192
 154 0036 5B02     		lsls	r3, r3, #9
 155 0038 1A40     		ands	r2, r3
 156 003a 8023     		movs	r3, #128
 157 003c 5B02     		lsls	r3, r3, #9
 158 003e 9A42     		cmp	r2, r3
 159 0040 0DD1     		bne	.L7
 160              	.L6:
 288:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     {
 289:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_
 161              		.loc 1 289 0 is_stmt 1
 162 0042 BB4B     		ldr	r3, .L76
 163 0044 1A68     		ldr	r2, [r3]
 164 0046 8023     		movs	r3, #128
 165 0048 9B02     		lsls	r3, r3, #10
 166 004a 1340     		ands	r3, r2
 167 004c 00D1     		bne	.LCB123
 168 004e 70E0     		b	.L74	@long jump
 169              	.LCB123:
 170              		.loc 1 289 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccWvJRjM.s 			page 9


 171 0050 7B68     		ldr	r3, [r7, #4]
 172 0052 5B68     		ldr	r3, [r3, #4]
 173 0054 002B     		cmp	r3, #0
 174 0056 00D0     		beq	.LCB127
 175 0058 6BE0     		b	.L74	@long jump
 176              	.LCB127:
 290:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       {
 291:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         return HAL_ERROR;
 177              		.loc 1 291 0 is_stmt 1
 178 005a 0123     		movs	r3, #1
 179 005c 27E3     		b	.L9
 180              	.L7:
 292:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       }
 293:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     }
 294:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     else
 295:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     {
 296:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       /* Set the new HSE configuration ---------------------------------------*/
 297:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 181              		.loc 1 297 0
 182 005e 7B68     		ldr	r3, [r7, #4]
 183 0060 5B68     		ldr	r3, [r3, #4]
 184 0062 012B     		cmp	r3, #1
 185 0064 07D1     		bne	.L10
 186              		.loc 1 297 0 is_stmt 0 discriminator 1
 187 0066 B24B     		ldr	r3, .L76
 188 0068 B14A     		ldr	r2, .L76
 189 006a 1268     		ldr	r2, [r2]
 190 006c 8021     		movs	r1, #128
 191 006e 4902     		lsls	r1, r1, #9
 192 0070 0A43     		orrs	r2, r1
 193 0072 1A60     		str	r2, [r3]
 194 0074 2FE0     		b	.L11
 195              	.L10:
 196              		.loc 1 297 0 discriminator 2
 197 0076 7B68     		ldr	r3, [r7, #4]
 198 0078 5B68     		ldr	r3, [r3, #4]
 199 007a 002B     		cmp	r3, #0
 200 007c 0CD1     		bne	.L12
 201              		.loc 1 297 0 discriminator 3
 202 007e AC4B     		ldr	r3, .L76
 203 0080 AB4A     		ldr	r2, .L76
 204 0082 1268     		ldr	r2, [r2]
 205 0084 AB49     		ldr	r1, .L76+4
 206 0086 0A40     		ands	r2, r1
 207 0088 1A60     		str	r2, [r3]
 208 008a A94B     		ldr	r3, .L76
 209 008c A84A     		ldr	r2, .L76
 210 008e 1268     		ldr	r2, [r2]
 211 0090 A949     		ldr	r1, .L76+8
 212 0092 0A40     		ands	r2, r1
 213 0094 1A60     		str	r2, [r3]
 214 0096 1EE0     		b	.L11
 215              	.L12:
 216              		.loc 1 297 0 discriminator 4
 217 0098 7B68     		ldr	r3, [r7, #4]
 218 009a 5B68     		ldr	r3, [r3, #4]
 219 009c 052B     		cmp	r3, #5
ARM GAS  /tmp/ccWvJRjM.s 			page 10


 220 009e 0ED1     		bne	.L13
 221              		.loc 1 297 0 discriminator 5
 222 00a0 A34B     		ldr	r3, .L76
 223 00a2 A34A     		ldr	r2, .L76
 224 00a4 1268     		ldr	r2, [r2]
 225 00a6 8021     		movs	r1, #128
 226 00a8 C902     		lsls	r1, r1, #11
 227 00aa 0A43     		orrs	r2, r1
 228 00ac 1A60     		str	r2, [r3]
 229 00ae A04B     		ldr	r3, .L76
 230 00b0 9F4A     		ldr	r2, .L76
 231 00b2 1268     		ldr	r2, [r2]
 232 00b4 8021     		movs	r1, #128
 233 00b6 4902     		lsls	r1, r1, #9
 234 00b8 0A43     		orrs	r2, r1
 235 00ba 1A60     		str	r2, [r3]
 236 00bc 0BE0     		b	.L11
 237              	.L13:
 238              		.loc 1 297 0 discriminator 6
 239 00be 9C4B     		ldr	r3, .L76
 240 00c0 9B4A     		ldr	r2, .L76
 241 00c2 1268     		ldr	r2, [r2]
 242 00c4 9B49     		ldr	r1, .L76+4
 243 00c6 0A40     		ands	r2, r1
 244 00c8 1A60     		str	r2, [r3]
 245 00ca 994B     		ldr	r3, .L76
 246 00cc 984A     		ldr	r2, .L76
 247 00ce 1268     		ldr	r2, [r2]
 248 00d0 9949     		ldr	r1, .L76+8
 249 00d2 0A40     		ands	r2, r1
 250 00d4 1A60     		str	r2, [r3]
 251              	.L11:
 298:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       
 299:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
 300:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****        /* Check the HSE State */
 301:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 252              		.loc 1 301 0 is_stmt 1
 253 00d6 7B68     		ldr	r3, [r7, #4]
 254 00d8 5B68     		ldr	r3, [r3, #4]
 255 00da 002B     		cmp	r3, #0
 256 00dc 14D0     		beq	.L14
 302:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       {
 303:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         /* Get Start Tick */
 304:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 257              		.loc 1 304 0
 258 00de FFF7FEFF 		bl	HAL_GetTick
 259 00e2 0300     		movs	r3, r0
 260 00e4 3B61     		str	r3, [r7, #16]
 305:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         
 306:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         /* Wait till HSE is ready */
 307:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 261              		.loc 1 307 0
 262 00e6 08E0     		b	.L15
 263              	.L16:
 308:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         {
 309:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 264              		.loc 1 309 0
ARM GAS  /tmp/ccWvJRjM.s 			page 11


 265 00e8 FFF7FEFF 		bl	HAL_GetTick
 266 00ec 0200     		movs	r2, r0
 267 00ee 3B69     		ldr	r3, [r7, #16]
 268 00f0 D31A     		subs	r3, r2, r3
 269 00f2 642B     		cmp	r3, #100
 270 00f4 01D9     		bls	.L15
 310:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           {
 311:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****             return HAL_TIMEOUT;
 271              		.loc 1 311 0
 272 00f6 0323     		movs	r3, #3
 273 00f8 D9E2     		b	.L9
 274              	.L15:
 307:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         {
 275              		.loc 1 307 0
 276 00fa 8D4B     		ldr	r3, .L76
 277 00fc 1A68     		ldr	r2, [r3]
 278 00fe 8023     		movs	r3, #128
 279 0100 9B02     		lsls	r3, r3, #10
 280 0102 1340     		ands	r3, r2
 281 0104 F0D0     		beq	.L16
 282 0106 15E0     		b	.L5
 283              	.L14:
 312:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           }
 313:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         }
 314:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       }
 315:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       else
 316:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       {
 317:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         /* Get Start Tick */
 318:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 284              		.loc 1 318 0
 285 0108 FFF7FEFF 		bl	HAL_GetTick
 286 010c 0300     		movs	r3, r0
 287 010e 3B61     		str	r3, [r7, #16]
 319:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         
 320:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         /* Wait till HSE is disabled */
 321:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 288              		.loc 1 321 0
 289 0110 08E0     		b	.L17
 290              	.L18:
 322:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         {
 323:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****            if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 291              		.loc 1 323 0
 292 0112 FFF7FEFF 		bl	HAL_GetTick
 293 0116 0200     		movs	r2, r0
 294 0118 3B69     		ldr	r3, [r7, #16]
 295 011a D31A     		subs	r3, r2, r3
 296 011c 642B     		cmp	r3, #100
 297 011e 01D9     		bls	.L17
 324:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           {
 325:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****             return HAL_TIMEOUT;
 298              		.loc 1 325 0
 299 0120 0323     		movs	r3, #3
 300 0122 C4E2     		b	.L9
 301              	.L17:
 321:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         {
 302              		.loc 1 321 0
 303 0124 824B     		ldr	r3, .L76
ARM GAS  /tmp/ccWvJRjM.s 			page 12


 304 0126 1A68     		ldr	r2, [r3]
 305 0128 8023     		movs	r3, #128
 306 012a 9B02     		lsls	r3, r3, #10
 307 012c 1340     		ands	r3, r2
 308 012e F0D1     		bne	.L18
 309 0130 00E0     		b	.L5
 310              	.L74:
 289:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       {
 311              		.loc 1 289 0
 312 0132 C046     		nop
 313              	.L5:
 326:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           }
 327:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         }
 328:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       }
 329:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     }
 330:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   }
 331:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   /*----------------------------- HSI Configuration --------------------------*/ 
 332:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 314              		.loc 1 332 0
 315 0134 7B68     		ldr	r3, [r7, #4]
 316 0136 1B68     		ldr	r3, [r3]
 317 0138 0222     		movs	r2, #2
 318 013a 1340     		ands	r3, r2
 319 013c 00D1     		bne	.LCB274
 320 013e 6CE0     		b	.L19	@long jump
 321              	.LCB274:
 333:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   {
 334:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     /* Check the parameters */
 335:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 336:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 337:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     
 338:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock *
 339:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 322              		.loc 1 339 0
 323 0140 7B4B     		ldr	r3, .L76
 324 0142 5B68     		ldr	r3, [r3, #4]
 325 0144 0C22     		movs	r2, #12
 326 0146 1340     		ands	r3, r2
 327 0148 0ED0     		beq	.L20
 340:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_
 328              		.loc 1 340 0
 329 014a 794B     		ldr	r3, .L76
 330 014c 5B68     		ldr	r3, [r3, #4]
 331 014e 0C22     		movs	r2, #12
 332 0150 1340     		ands	r3, r2
 333 0152 082B     		cmp	r3, #8
 334 0154 1FD1     		bne	.L21
 335              		.loc 1 340 0 is_stmt 0 discriminator 1
 336 0156 764B     		ldr	r3, .L76
 337 0158 5A68     		ldr	r2, [r3, #4]
 338 015a C023     		movs	r3, #192
 339 015c 5B02     		lsls	r3, r3, #9
 340 015e 1A40     		ands	r2, r3
 341 0160 8023     		movs	r3, #128
 342 0162 1B02     		lsls	r3, r3, #8
 343 0164 9A42     		cmp	r2, r3
 344 0166 16D1     		bne	.L21
ARM GAS  /tmp/ccWvJRjM.s 			page 13


 345              	.L20:
 341:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     {
 342:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       /* When HSI is used as system clock it will not disabled */
 343:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_
 346              		.loc 1 343 0 is_stmt 1
 347 0168 714B     		ldr	r3, .L76
 348 016a 1B68     		ldr	r3, [r3]
 349 016c 0222     		movs	r2, #2
 350 016e 1340     		ands	r3, r2
 351 0170 05D0     		beq	.L22
 352              		.loc 1 343 0 is_stmt 0 discriminator 1
 353 0172 7B68     		ldr	r3, [r7, #4]
 354 0174 DB68     		ldr	r3, [r3, #12]
 355 0176 012B     		cmp	r3, #1
 356 0178 01D0     		beq	.L22
 344:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       {
 345:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         return HAL_ERROR;
 357              		.loc 1 345 0 is_stmt 1
 358 017a 0123     		movs	r3, #1
 359 017c 97E2     		b	.L9
 360              	.L22:
 346:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       }
 347:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       /* Otherwise, just the calibration is allowed */
 348:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       else
 349:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       {
 350:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
 351:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 361              		.loc 1 351 0
 362 017e 6C4A     		ldr	r2, .L76
 363 0180 6B4B     		ldr	r3, .L76
 364 0182 1B68     		ldr	r3, [r3]
 365 0184 F821     		movs	r1, #248
 366 0186 8B43     		bics	r3, r1
 367 0188 1900     		movs	r1, r3
 368 018a 7B68     		ldr	r3, [r7, #4]
 369 018c 1B69     		ldr	r3, [r3, #16]
 370 018e DB00     		lsls	r3, r3, #3
 371 0190 0B43     		orrs	r3, r1
 372 0192 1360     		str	r3, [r2]
 343:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       {
 373              		.loc 1 343 0
 374 0194 41E0     		b	.L19
 375              	.L21:
 352:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       }
 353:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     }
 354:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     else
 355:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     {
 356:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       /* Check the HSI State */
 357:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 376              		.loc 1 357 0
 377 0196 7B68     		ldr	r3, [r7, #4]
 378 0198 DB68     		ldr	r3, [r3, #12]
 379 019a 002B     		cmp	r3, #0
 380 019c 24D0     		beq	.L23
 358:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       {
 359:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****        /* Enable the Internal High Speed oscillator (HSI). */
 360:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         __HAL_RCC_HSI_ENABLE();
ARM GAS  /tmp/ccWvJRjM.s 			page 14


 381              		.loc 1 360 0
 382 019e 644B     		ldr	r3, .L76
 383 01a0 634A     		ldr	r2, .L76
 384 01a2 1268     		ldr	r2, [r2]
 385 01a4 0121     		movs	r1, #1
 386 01a6 0A43     		orrs	r2, r1
 387 01a8 1A60     		str	r2, [r3]
 361:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         
 362:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         /* Get Start Tick */
 363:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 388              		.loc 1 363 0
 389 01aa FFF7FEFF 		bl	HAL_GetTick
 390 01ae 0300     		movs	r3, r0
 391 01b0 3B61     		str	r3, [r7, #16]
 364:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         
 365:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         /* Wait till HSI is ready */
 366:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 392              		.loc 1 366 0
 393 01b2 08E0     		b	.L24
 394              	.L25:
 367:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         {
 368:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 395              		.loc 1 368 0
 396 01b4 FFF7FEFF 		bl	HAL_GetTick
 397 01b8 0200     		movs	r2, r0
 398 01ba 3B69     		ldr	r3, [r7, #16]
 399 01bc D31A     		subs	r3, r2, r3
 400 01be 022B     		cmp	r3, #2
 401 01c0 01D9     		bls	.L24
 369:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           {
 370:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****             return HAL_TIMEOUT;
 402              		.loc 1 370 0
 403 01c2 0323     		movs	r3, #3
 404 01c4 73E2     		b	.L9
 405              	.L24:
 366:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         {
 406              		.loc 1 366 0
 407 01c6 5A4B     		ldr	r3, .L76
 408 01c8 1B68     		ldr	r3, [r3]
 409 01ca 0222     		movs	r2, #2
 410 01cc 1340     		ands	r3, r2
 411 01ce F1D0     		beq	.L25
 371:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           }
 372:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         }
 373:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****                 
 374:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
 375:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 412              		.loc 1 375 0
 413 01d0 574A     		ldr	r2, .L76
 414 01d2 574B     		ldr	r3, .L76
 415 01d4 1B68     		ldr	r3, [r3]
 416 01d6 F821     		movs	r1, #248
 417 01d8 8B43     		bics	r3, r1
 418 01da 1900     		movs	r1, r3
 419 01dc 7B68     		ldr	r3, [r7, #4]
 420 01de 1B69     		ldr	r3, [r3, #16]
 421 01e0 DB00     		lsls	r3, r3, #3
ARM GAS  /tmp/ccWvJRjM.s 			page 15


 422 01e2 0B43     		orrs	r3, r1
 423 01e4 1360     		str	r3, [r2]
 424 01e6 18E0     		b	.L19
 425              	.L23:
 376:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       }
 377:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       else
 378:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       {
 379:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         /* Disable the Internal High Speed oscillator (HSI). */
 380:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         __HAL_RCC_HSI_DISABLE();
 426              		.loc 1 380 0
 427 01e8 514B     		ldr	r3, .L76
 428 01ea 514A     		ldr	r2, .L76
 429 01ec 1268     		ldr	r2, [r2]
 430 01ee 0121     		movs	r1, #1
 431 01f0 8A43     		bics	r2, r1
 432 01f2 1A60     		str	r2, [r3]
 381:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         
 382:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         /* Get Start Tick */
 383:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 433              		.loc 1 383 0
 434 01f4 FFF7FEFF 		bl	HAL_GetTick
 435 01f8 0300     		movs	r3, r0
 436 01fa 3B61     		str	r3, [r7, #16]
 384:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         
 385:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         /* Wait till HSI is disabled */
 386:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 437              		.loc 1 386 0
 438 01fc 08E0     		b	.L26
 439              	.L27:
 387:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         {
 388:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 440              		.loc 1 388 0
 441 01fe FFF7FEFF 		bl	HAL_GetTick
 442 0202 0200     		movs	r2, r0
 443 0204 3B69     		ldr	r3, [r7, #16]
 444 0206 D31A     		subs	r3, r2, r3
 445 0208 022B     		cmp	r3, #2
 446 020a 01D9     		bls	.L26
 389:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           {
 390:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****             return HAL_TIMEOUT;
 447              		.loc 1 390 0
 448 020c 0323     		movs	r3, #3
 449 020e 4EE2     		b	.L9
 450              	.L26:
 386:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         {
 451              		.loc 1 386 0
 452 0210 474B     		ldr	r3, .L76
 453 0212 1B68     		ldr	r3, [r3]
 454 0214 0222     		movs	r2, #2
 455 0216 1340     		ands	r3, r2
 456 0218 F1D1     		bne	.L27
 457              	.L19:
 391:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           }
 392:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         }
 393:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       }
 394:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     }
 395:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   }
ARM GAS  /tmp/ccWvJRjM.s 			page 16


 396:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   /*------------------------------ LSI Configuration -------------------------*/ 
 397:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 458              		.loc 1 397 0
 459 021a 7B68     		ldr	r3, [r7, #4]
 460 021c 1B68     		ldr	r3, [r3]
 461 021e 0822     		movs	r2, #8
 462 0220 1340     		ands	r3, r2
 463 0222 36D0     		beq	.L28
 398:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   {
 399:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     /* Check the parameters */
 400:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 401:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     
 402:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     /* Check the LSI State */
 403:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 464              		.loc 1 403 0
 465 0224 7B68     		ldr	r3, [r7, #4]
 466 0226 DB69     		ldr	r3, [r3, #28]
 467 0228 002B     		cmp	r3, #0
 468 022a 19D0     		beq	.L29
 404:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     {
 405:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       /* Enable the Internal Low Speed oscillator (LSI). */
 406:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       __HAL_RCC_LSI_ENABLE();
 469              		.loc 1 406 0
 470 022c 404B     		ldr	r3, .L76
 471 022e 404A     		ldr	r2, .L76
 472 0230 526A     		ldr	r2, [r2, #36]
 473 0232 0121     		movs	r1, #1
 474 0234 0A43     		orrs	r2, r1
 475 0236 5A62     		str	r2, [r3, #36]
 407:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       
 408:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       /* Get Start Tick */
 409:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 476              		.loc 1 409 0
 477 0238 FFF7FEFF 		bl	HAL_GetTick
 478 023c 0300     		movs	r3, r0
 479 023e 3B61     		str	r3, [r7, #16]
 410:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       
 411:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       /* Wait till LSI is ready */  
 412:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 480              		.loc 1 412 0
 481 0240 08E0     		b	.L30
 482              	.L31:
 413:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       {
 414:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 483              		.loc 1 414 0
 484 0242 FFF7FEFF 		bl	HAL_GetTick
 485 0246 0200     		movs	r2, r0
 486 0248 3B69     		ldr	r3, [r7, #16]
 487 024a D31A     		subs	r3, r2, r3
 488 024c 022B     		cmp	r3, #2
 489 024e 01D9     		bls	.L30
 415:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         {
 416:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           return HAL_TIMEOUT;
 490              		.loc 1 416 0
 491 0250 0323     		movs	r3, #3
 492 0252 2CE2     		b	.L9
 493              	.L30:
ARM GAS  /tmp/ccWvJRjM.s 			page 17


 412:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       {
 494              		.loc 1 412 0
 495 0254 364B     		ldr	r3, .L76
 496 0256 5B6A     		ldr	r3, [r3, #36]
 497 0258 0222     		movs	r2, #2
 498 025a 1340     		ands	r3, r2
 499 025c F1D0     		beq	.L31
 500 025e 18E0     		b	.L28
 501              	.L29:
 417:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         }
 418:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       }
 419:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     }
 420:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     else
 421:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     {
 422:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       /* Disable the Internal Low Speed oscillator (LSI). */
 423:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       __HAL_RCC_LSI_DISABLE();
 502              		.loc 1 423 0
 503 0260 334B     		ldr	r3, .L76
 504 0262 334A     		ldr	r2, .L76
 505 0264 526A     		ldr	r2, [r2, #36]
 506 0266 0121     		movs	r1, #1
 507 0268 8A43     		bics	r2, r1
 508 026a 5A62     		str	r2, [r3, #36]
 424:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       
 425:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       /* Get Start Tick */
 426:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 509              		.loc 1 426 0
 510 026c FFF7FEFF 		bl	HAL_GetTick
 511 0270 0300     		movs	r3, r0
 512 0272 3B61     		str	r3, [r7, #16]
 427:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       
 428:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       /* Wait till LSI is disabled */  
 429:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 513              		.loc 1 429 0
 514 0274 08E0     		b	.L32
 515              	.L33:
 430:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       {
 431:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 516              		.loc 1 431 0
 517 0276 FFF7FEFF 		bl	HAL_GetTick
 518 027a 0200     		movs	r2, r0
 519 027c 3B69     		ldr	r3, [r7, #16]
 520 027e D31A     		subs	r3, r2, r3
 521 0280 022B     		cmp	r3, #2
 522 0282 01D9     		bls	.L32
 432:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         {
 433:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           return HAL_TIMEOUT;
 523              		.loc 1 433 0
 524 0284 0323     		movs	r3, #3
 525 0286 12E2     		b	.L9
 526              	.L32:
 429:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       {
 527              		.loc 1 429 0
 528 0288 294B     		ldr	r3, .L76
 529 028a 5B6A     		ldr	r3, [r3, #36]
 530 028c 0222     		movs	r2, #2
 531 028e 1340     		ands	r3, r2
ARM GAS  /tmp/ccWvJRjM.s 			page 18


 532 0290 F1D1     		bne	.L33
 533              	.L28:
 434:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         }
 435:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       }
 436:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     }
 437:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   }
 438:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   /*------------------------------ LSE Configuration -------------------------*/ 
 439:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 534              		.loc 1 439 0
 535 0292 7B68     		ldr	r3, [r7, #4]
 536 0294 1B68     		ldr	r3, [r3]
 537 0296 0422     		movs	r2, #4
 538 0298 1340     		ands	r3, r2
 539 029a 00D1     		bne	.LCB487
 540 029c B6E0     		b	.L34	@long jump
 541              	.LCB487:
 542              	.LBB2:
 440:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   {
 441:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     FlagStatus       pwrclkchanged = RESET;
 543              		.loc 1 441 0
 544 029e 1723     		movs	r3, #23
 545 02a0 FB18     		adds	r3, r7, r3
 546 02a2 0022     		movs	r2, #0
 547 02a4 1A70     		strb	r2, [r3]
 442:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     
 443:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     /* Check the parameters */
 444:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 445:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
 446:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     /* Update LSE configuration in Backup Domain control register    */
 447:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     /* Requires to enable write access to Backup Domain of necessary */
 448:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 548              		.loc 1 448 0
 549 02a6 224B     		ldr	r3, .L76
 550 02a8 DA69     		ldr	r2, [r3, #28]
 551 02aa 8023     		movs	r3, #128
 552 02ac 5B05     		lsls	r3, r3, #21
 553 02ae 1340     		ands	r3, r2
 554 02b0 11D1     		bne	.L35
 555              	.LBB3:
 449:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     {
 450:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       __HAL_RCC_PWR_CLK_ENABLE();
 556              		.loc 1 450 0
 557 02b2 1F4B     		ldr	r3, .L76
 558 02b4 1E4A     		ldr	r2, .L76
 559 02b6 D269     		ldr	r2, [r2, #28]
 560 02b8 8021     		movs	r1, #128
 561 02ba 4905     		lsls	r1, r1, #21
 562 02bc 0A43     		orrs	r2, r1
 563 02be DA61     		str	r2, [r3, #28]
 564 02c0 1B4B     		ldr	r3, .L76
 565 02c2 DA69     		ldr	r2, [r3, #28]
 566 02c4 8023     		movs	r3, #128
 567 02c6 5B05     		lsls	r3, r3, #21
 568 02c8 1340     		ands	r3, r2
 569 02ca FB60     		str	r3, [r7, #12]
 570 02cc FB68     		ldr	r3, [r7, #12]
 571              	.LBE3:
ARM GAS  /tmp/ccWvJRjM.s 			page 19


 451:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       pwrclkchanged = SET;
 572              		.loc 1 451 0
 573 02ce 1723     		movs	r3, #23
 574 02d0 FB18     		adds	r3, r7, r3
 575 02d2 0122     		movs	r2, #1
 576 02d4 1A70     		strb	r2, [r3]
 577              	.L35:
 452:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     }
 453:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     
 454:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 578              		.loc 1 454 0
 579 02d6 194B     		ldr	r3, .L76+12
 580 02d8 1A68     		ldr	r2, [r3]
 581 02da 8023     		movs	r3, #128
 582 02dc 5B00     		lsls	r3, r3, #1
 583 02de 1340     		ands	r3, r2
 584 02e0 1AD1     		bne	.L36
 455:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     {
 456:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       /* Enable write access to Backup domain */
 457:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       SET_BIT(PWR->CR, PWR_CR_DBP);
 585              		.loc 1 457 0
 586 02e2 164B     		ldr	r3, .L76+12
 587 02e4 154A     		ldr	r2, .L76+12
 588 02e6 1268     		ldr	r2, [r2]
 589 02e8 8021     		movs	r1, #128
 590 02ea 4900     		lsls	r1, r1, #1
 591 02ec 0A43     		orrs	r2, r1
 592 02ee 1A60     		str	r2, [r3]
 458:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       
 459:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       /* Wait for Backup domain Write protection disable */
 460:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 593              		.loc 1 460 0
 594 02f0 FFF7FEFF 		bl	HAL_GetTick
 595 02f4 0300     		movs	r3, r0
 596 02f6 3B61     		str	r3, [r7, #16]
 461:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
 462:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 597              		.loc 1 462 0
 598 02f8 08E0     		b	.L37
 599              	.L38:
 463:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       {
 464:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 600              		.loc 1 464 0
 601 02fa FFF7FEFF 		bl	HAL_GetTick
 602 02fe 0200     		movs	r2, r0
 603 0300 3B69     		ldr	r3, [r7, #16]
 604 0302 D31A     		subs	r3, r2, r3
 605 0304 642B     		cmp	r3, #100
 606 0306 01D9     		bls	.L37
 465:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         {
 466:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           return HAL_TIMEOUT;
 607              		.loc 1 466 0
 608 0308 0323     		movs	r3, #3
 609 030a D0E1     		b	.L9
 610              	.L37:
 462:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       {
 611              		.loc 1 462 0
ARM GAS  /tmp/ccWvJRjM.s 			page 20


 612 030c 0B4B     		ldr	r3, .L76+12
 613 030e 1A68     		ldr	r2, [r3]
 614 0310 8023     		movs	r3, #128
 615 0312 5B00     		lsls	r3, r3, #1
 616 0314 1340     		ands	r3, r2
 617 0316 F0D0     		beq	.L38
 618              	.L36:
 467:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         }
 468:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       }
 469:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     }
 470:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
 471:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     /* Set the new LSE configuration -----------------------------------------*/
 472:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 619              		.loc 1 472 0
 620 0318 7B68     		ldr	r3, [r7, #4]
 621 031a 9B68     		ldr	r3, [r3, #8]
 622 031c 012B     		cmp	r3, #1
 623 031e 0FD1     		bne	.L39
 624              		.loc 1 472 0 is_stmt 0 discriminator 1
 625 0320 034B     		ldr	r3, .L76
 626 0322 034A     		ldr	r2, .L76
 627 0324 126A     		ldr	r2, [r2, #32]
 628 0326 0121     		movs	r1, #1
 629 0328 0A43     		orrs	r2, r1
 630 032a 1A62     		str	r2, [r3, #32]
 631 032c 36E0     		b	.L40
 632              	.L77:
 633 032e C046     		.align	2
 634              	.L76:
 635 0330 00100240 		.word	1073876992
 636 0334 FFFFFEFF 		.word	-65537
 637 0338 FFFFFBFF 		.word	-262145
 638 033c 00700040 		.word	1073770496
 639              	.L39:
 640              		.loc 1 472 0 discriminator 2
 641 0340 7B68     		ldr	r3, [r7, #4]
 642 0342 9B68     		ldr	r3, [r3, #8]
 643 0344 002B     		cmp	r3, #0
 644 0346 0CD1     		bne	.L41
 645              		.loc 1 472 0 discriminator 3
 646 0348 C94B     		ldr	r3, .L78
 647 034a C94A     		ldr	r2, .L78
 648 034c 126A     		ldr	r2, [r2, #32]
 649 034e 0121     		movs	r1, #1
 650 0350 8A43     		bics	r2, r1
 651 0352 1A62     		str	r2, [r3, #32]
 652 0354 C64B     		ldr	r3, .L78
 653 0356 C64A     		ldr	r2, .L78
 654 0358 126A     		ldr	r2, [r2, #32]
 655 035a 0421     		movs	r1, #4
 656 035c 8A43     		bics	r2, r1
 657 035e 1A62     		str	r2, [r3, #32]
 658 0360 1CE0     		b	.L40
 659              	.L41:
 660              		.loc 1 472 0 discriminator 4
 661 0362 7B68     		ldr	r3, [r7, #4]
 662 0364 9B68     		ldr	r3, [r3, #8]
ARM GAS  /tmp/ccWvJRjM.s 			page 21


 663 0366 052B     		cmp	r3, #5
 664 0368 0CD1     		bne	.L42
 665              		.loc 1 472 0 discriminator 5
 666 036a C14B     		ldr	r3, .L78
 667 036c C04A     		ldr	r2, .L78
 668 036e 126A     		ldr	r2, [r2, #32]
 669 0370 0421     		movs	r1, #4
 670 0372 0A43     		orrs	r2, r1
 671 0374 1A62     		str	r2, [r3, #32]
 672 0376 BE4B     		ldr	r3, .L78
 673 0378 BD4A     		ldr	r2, .L78
 674 037a 126A     		ldr	r2, [r2, #32]
 675 037c 0121     		movs	r1, #1
 676 037e 0A43     		orrs	r2, r1
 677 0380 1A62     		str	r2, [r3, #32]
 678 0382 0BE0     		b	.L40
 679              	.L42:
 680              		.loc 1 472 0 discriminator 6
 681 0384 BA4B     		ldr	r3, .L78
 682 0386 BA4A     		ldr	r2, .L78
 683 0388 126A     		ldr	r2, [r2, #32]
 684 038a 0121     		movs	r1, #1
 685 038c 8A43     		bics	r2, r1
 686 038e 1A62     		str	r2, [r3, #32]
 687 0390 B74B     		ldr	r3, .L78
 688 0392 B74A     		ldr	r2, .L78
 689 0394 126A     		ldr	r2, [r2, #32]
 690 0396 0421     		movs	r1, #4
 691 0398 8A43     		bics	r2, r1
 692 039a 1A62     		str	r2, [r3, #32]
 693              	.L40:
 473:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     /* Check the LSE State */
 474:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 694              		.loc 1 474 0 is_stmt 1
 695 039c 7B68     		ldr	r3, [r7, #4]
 696 039e 9B68     		ldr	r3, [r3, #8]
 697 03a0 002B     		cmp	r3, #0
 698 03a2 14D0     		beq	.L43
 475:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     {
 476:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       /* Get Start Tick */
 477:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 699              		.loc 1 477 0
 700 03a4 FFF7FEFF 		bl	HAL_GetTick
 701 03a8 0300     		movs	r3, r0
 702 03aa 3B61     		str	r3, [r7, #16]
 478:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       
 479:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       /* Wait till LSE is ready */  
 480:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 703              		.loc 1 480 0
 704 03ac 09E0     		b	.L44
 705              	.L45:
 481:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       {
 482:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 706              		.loc 1 482 0
 707 03ae FFF7FEFF 		bl	HAL_GetTick
 708 03b2 0200     		movs	r2, r0
 709 03b4 3B69     		ldr	r3, [r7, #16]
ARM GAS  /tmp/ccWvJRjM.s 			page 22


 710 03b6 D31A     		subs	r3, r2, r3
 711 03b8 AE4A     		ldr	r2, .L78+4
 712 03ba 9342     		cmp	r3, r2
 713 03bc 01D9     		bls	.L44
 483:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         {
 484:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           return HAL_TIMEOUT;
 714              		.loc 1 484 0
 715 03be 0323     		movs	r3, #3
 716 03c0 75E1     		b	.L9
 717              	.L44:
 480:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       {
 718              		.loc 1 480 0
 719 03c2 AB4B     		ldr	r3, .L78
 720 03c4 1B6A     		ldr	r3, [r3, #32]
 721 03c6 0222     		movs	r2, #2
 722 03c8 1340     		ands	r3, r2
 723 03ca F0D0     		beq	.L45
 724 03cc 13E0     		b	.L46
 725              	.L43:
 485:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         }
 486:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       }
 487:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     }
 488:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     else
 489:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     {
 490:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       /* Get Start Tick */
 491:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 726              		.loc 1 491 0
 727 03ce FFF7FEFF 		bl	HAL_GetTick
 728 03d2 0300     		movs	r3, r0
 729 03d4 3B61     		str	r3, [r7, #16]
 492:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       
 493:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       /* Wait till LSE is disabled */  
 494:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 730              		.loc 1 494 0
 731 03d6 09E0     		b	.L47
 732              	.L48:
 495:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       {
 496:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 733              		.loc 1 496 0
 734 03d8 FFF7FEFF 		bl	HAL_GetTick
 735 03dc 0200     		movs	r2, r0
 736 03de 3B69     		ldr	r3, [r7, #16]
 737 03e0 D31A     		subs	r3, r2, r3
 738 03e2 A44A     		ldr	r2, .L78+4
 739 03e4 9342     		cmp	r3, r2
 740 03e6 01D9     		bls	.L47
 497:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         {
 498:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           return HAL_TIMEOUT;
 741              		.loc 1 498 0
 742 03e8 0323     		movs	r3, #3
 743 03ea 60E1     		b	.L9
 744              	.L47:
 494:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       {
 745              		.loc 1 494 0
 746 03ec A04B     		ldr	r3, .L78
 747 03ee 1B6A     		ldr	r3, [r3, #32]
 748 03f0 0222     		movs	r2, #2
ARM GAS  /tmp/ccWvJRjM.s 			page 23


 749 03f2 1340     		ands	r3, r2
 750 03f4 F0D1     		bne	.L48
 751              	.L46:
 499:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         }
 500:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       }
 501:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     }
 502:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
 503:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     /* Require to disable power clock if necessary */
 504:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     if(pwrclkchanged == SET)
 752              		.loc 1 504 0
 753 03f6 1723     		movs	r3, #23
 754 03f8 FB18     		adds	r3, r7, r3
 755 03fa 1B78     		ldrb	r3, [r3]
 756 03fc 012B     		cmp	r3, #1
 757 03fe 05D1     		bne	.L34
 505:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     {
 506:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       __HAL_RCC_PWR_CLK_DISABLE();
 758              		.loc 1 506 0
 759 0400 9B4B     		ldr	r3, .L78
 760 0402 9B4A     		ldr	r2, .L78
 761 0404 D269     		ldr	r2, [r2, #28]
 762 0406 9C49     		ldr	r1, .L78+8
 763 0408 0A40     		ands	r2, r1
 764 040a DA61     		str	r2, [r3, #28]
 765              	.L34:
 766              	.LBE2:
 507:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     }
 508:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   }
 509:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
 510:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   /*----------------------------- HSI14 Configuration --------------------------*/
 511:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 767              		.loc 1 511 0
 768 040c 7B68     		ldr	r3, [r7, #4]
 769 040e 1B68     		ldr	r3, [r3]
 770 0410 1022     		movs	r2, #16
 771 0412 1340     		ands	r3, r2
 772 0414 63D0     		beq	.L49
 512:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   {
 513:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     /* Check the parameters */
 514:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
 515:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));
 516:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
 517:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     /* Check the HSI14 State */
 518:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 773              		.loc 1 518 0
 774 0416 7B68     		ldr	r3, [r7, #4]
 775 0418 5B69     		ldr	r3, [r3, #20]
 776 041a 012B     		cmp	r3, #1
 777 041c 2AD1     		bne	.L50
 519:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     {
 520:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       /* Disable ADC control of the Internal High Speed oscillator HSI14 */
 521:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       __HAL_RCC_HSI14ADC_DISABLE();
 778              		.loc 1 521 0
 779 041e 944B     		ldr	r3, .L78
 780 0420 934A     		ldr	r2, .L78
 781 0422 526B     		ldr	r2, [r2, #52]
 782 0424 0421     		movs	r1, #4
ARM GAS  /tmp/ccWvJRjM.s 			page 24


 783 0426 0A43     		orrs	r2, r1
 784 0428 5A63     		str	r2, [r3, #52]
 522:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
 523:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       /* Enable the Internal High Speed oscillator (HSI). */
 524:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       __HAL_RCC_HSI14_ENABLE();
 785              		.loc 1 524 0
 786 042a 914B     		ldr	r3, .L78
 787 042c 904A     		ldr	r2, .L78
 788 042e 526B     		ldr	r2, [r2, #52]
 789 0430 0121     		movs	r1, #1
 790 0432 0A43     		orrs	r2, r1
 791 0434 5A63     		str	r2, [r3, #52]
 525:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
 526:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       /* Get Start Tick */
 527:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 792              		.loc 1 527 0
 793 0436 FFF7FEFF 		bl	HAL_GetTick
 794 043a 0300     		movs	r3, r0
 795 043c 3B61     		str	r3, [r7, #16]
 528:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       
 529:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       /* Wait till HSI is ready */  
 530:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 796              		.loc 1 530 0
 797 043e 08E0     		b	.L51
 798              	.L52:
 531:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       {
 532:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 799              		.loc 1 532 0
 800 0440 FFF7FEFF 		bl	HAL_GetTick
 801 0444 0200     		movs	r2, r0
 802 0446 3B69     		ldr	r3, [r7, #16]
 803 0448 D31A     		subs	r3, r2, r3
 804 044a 022B     		cmp	r3, #2
 805 044c 01D9     		bls	.L51
 533:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         {
 534:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           return HAL_TIMEOUT;
 806              		.loc 1 534 0
 807 044e 0323     		movs	r3, #3
 808 0450 2DE1     		b	.L9
 809              	.L51:
 530:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       {
 810              		.loc 1 530 0
 811 0452 874B     		ldr	r3, .L78
 812 0454 5B6B     		ldr	r3, [r3, #52]
 813 0456 0222     		movs	r2, #2
 814 0458 1340     		ands	r3, r2
 815 045a F1D0     		beq	.L52
 535:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         }      
 536:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       } 
 537:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
 538:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
 539:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 816              		.loc 1 539 0
 817 045c 844A     		ldr	r2, .L78
 818 045e 844B     		ldr	r3, .L78
 819 0460 5B6B     		ldr	r3, [r3, #52]
 820 0462 F821     		movs	r1, #248
ARM GAS  /tmp/ccWvJRjM.s 			page 25


 821 0464 8B43     		bics	r3, r1
 822 0466 1900     		movs	r1, r3
 823 0468 7B68     		ldr	r3, [r7, #4]
 824 046a 9B69     		ldr	r3, [r3, #24]
 825 046c DB00     		lsls	r3, r3, #3
 826 046e 0B43     		orrs	r3, r1
 827 0470 5363     		str	r3, [r2, #52]
 828 0472 34E0     		b	.L49
 829              	.L50:
 540:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     }
 541:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 830              		.loc 1 541 0
 831 0474 7B68     		ldr	r3, [r7, #4]
 832 0476 5B69     		ldr	r3, [r3, #20]
 833 0478 0533     		adds	r3, r3, #5
 834 047a 11D1     		bne	.L53
 542:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     {
 543:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       /* Enable ADC control of the Internal High Speed oscillator HSI14 */
 544:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       __HAL_RCC_HSI14ADC_ENABLE();
 835              		.loc 1 544 0
 836 047c 7C4B     		ldr	r3, .L78
 837 047e 7C4A     		ldr	r2, .L78
 838 0480 526B     		ldr	r2, [r2, #52]
 839 0482 0421     		movs	r1, #4
 840 0484 8A43     		bics	r2, r1
 841 0486 5A63     		str	r2, [r3, #52]
 545:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
 546:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
 547:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 842              		.loc 1 547 0
 843 0488 794A     		ldr	r2, .L78
 844 048a 794B     		ldr	r3, .L78
 845 048c 5B6B     		ldr	r3, [r3, #52]
 846 048e F821     		movs	r1, #248
 847 0490 8B43     		bics	r3, r1
 848 0492 1900     		movs	r1, r3
 849 0494 7B68     		ldr	r3, [r7, #4]
 850 0496 9B69     		ldr	r3, [r3, #24]
 851 0498 DB00     		lsls	r3, r3, #3
 852 049a 0B43     		orrs	r3, r1
 853 049c 5363     		str	r3, [r2, #52]
 854 049e 1EE0     		b	.L49
 855              	.L53:
 548:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     }
 549:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     else
 550:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     {
 551:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       /* Disable ADC control of the Internal High Speed oscillator HSI14 */
 552:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       __HAL_RCC_HSI14ADC_DISABLE();
 856              		.loc 1 552 0
 857 04a0 734B     		ldr	r3, .L78
 858 04a2 734A     		ldr	r2, .L78
 859 04a4 526B     		ldr	r2, [r2, #52]
 860 04a6 0421     		movs	r1, #4
 861 04a8 0A43     		orrs	r2, r1
 862 04aa 5A63     		str	r2, [r3, #52]
 553:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
 554:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       /* Disable the Internal High Speed oscillator (HSI). */
ARM GAS  /tmp/ccWvJRjM.s 			page 26


 555:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       __HAL_RCC_HSI14_DISABLE();
 863              		.loc 1 555 0
 864 04ac 704B     		ldr	r3, .L78
 865 04ae 704A     		ldr	r2, .L78
 866 04b0 526B     		ldr	r2, [r2, #52]
 867 04b2 0121     		movs	r1, #1
 868 04b4 8A43     		bics	r2, r1
 869 04b6 5A63     		str	r2, [r3, #52]
 556:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
 557:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       /* Get Start Tick */
 558:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 870              		.loc 1 558 0
 871 04b8 FFF7FEFF 		bl	HAL_GetTick
 872 04bc 0300     		movs	r3, r0
 873 04be 3B61     		str	r3, [r7, #16]
 559:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       
 560:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       /* Wait till HSI is ready */  
 561:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 874              		.loc 1 561 0
 875 04c0 08E0     		b	.L54
 876              	.L55:
 562:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       {
 563:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 877              		.loc 1 563 0
 878 04c2 FFF7FEFF 		bl	HAL_GetTick
 879 04c6 0200     		movs	r2, r0
 880 04c8 3B69     		ldr	r3, [r7, #16]
 881 04ca D31A     		subs	r3, r2, r3
 882 04cc 022B     		cmp	r3, #2
 883 04ce 01D9     		bls	.L54
 564:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         {
 565:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           return HAL_TIMEOUT;
 884              		.loc 1 565 0
 885 04d0 0323     		movs	r3, #3
 886 04d2 ECE0     		b	.L9
 887              	.L54:
 561:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       {
 888              		.loc 1 561 0
 889 04d4 664B     		ldr	r3, .L78
 890 04d6 5B6B     		ldr	r3, [r3, #52]
 891 04d8 0222     		movs	r2, #2
 892 04da 1340     		ands	r3, r2
 893 04dc F1D1     		bne	.L55
 894              	.L49:
 566:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         }
 567:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       }
 568:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     }
 569:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   }
 570:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
 571:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** #if defined(RCC_HSI48_SUPPORT)
 572:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   /*----------------------------- HSI48 Configuration --------------------------*/
 573:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 895              		.loc 1 573 0
 896 04de 7B68     		ldr	r3, [r7, #4]
 897 04e0 1B68     		ldr	r3, [r3]
 898 04e2 2022     		movs	r2, #32
 899 04e4 1340     		ands	r3, r2
ARM GAS  /tmp/ccWvJRjM.s 			page 27


 900 04e6 5CD0     		beq	.L56
 574:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   {
 575:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     /* Check the parameters */
 576:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 577:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
 578:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     /* When the HSI48 is used as system clock it is not allowed to be disabled */
 579:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 901              		.loc 1 579 0
 902 04e8 614B     		ldr	r3, .L78
 903 04ea 5B68     		ldr	r3, [r3, #4]
 904 04ec 0C22     		movs	r2, #12
 905 04ee 1340     		ands	r3, r2
 906 04f0 0C2B     		cmp	r3, #12
 907 04f2 0ED0     		beq	.L57
 580:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSC
 908              		.loc 1 580 0 discriminator 1
 909 04f4 5E4B     		ldr	r3, .L78
 910 04f6 5B68     		ldr	r3, [r3, #4]
 911 04f8 0C22     		movs	r2, #12
 912 04fa 1340     		ands	r3, r2
 579:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSC
 913              		.loc 1 579 0 discriminator 1
 914 04fc 082B     		cmp	r3, #8
 915 04fe 14D1     		bne	.L58
 916              		.loc 1 580 0
 917 0500 5B4B     		ldr	r3, .L78
 918 0502 5A68     		ldr	r2, [r3, #4]
 919 0504 C023     		movs	r3, #192
 920 0506 5B02     		lsls	r3, r3, #9
 921 0508 1A40     		ands	r2, r3
 922 050a C023     		movs	r3, #192
 923 050c 5B02     		lsls	r3, r3, #9
 924 050e 9A42     		cmp	r2, r3
 925 0510 0BD1     		bne	.L58
 926              	.L57:
 581:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     {
 582:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_
 927              		.loc 1 582 0
 928 0512 574B     		ldr	r3, .L78
 929 0514 5A6B     		ldr	r2, [r3, #52]
 930 0516 8023     		movs	r3, #128
 931 0518 5B02     		lsls	r3, r3, #9
 932 051a 1340     		ands	r3, r2
 933 051c 40D0     		beq	.L75
 934              		.loc 1 582 0 is_stmt 0 discriminator 1
 935 051e 7B68     		ldr	r3, [r7, #4]
 936 0520 1B6A     		ldr	r3, [r3, #32]
 937 0522 012B     		cmp	r3, #1
 938 0524 3CD0     		beq	.L75
 583:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       {
 584:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         return HAL_ERROR;
 939              		.loc 1 584 0 is_stmt 1
 940 0526 0123     		movs	r3, #1
 941 0528 C1E0     		b	.L9
 942              	.L58:
 585:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       }
 586:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     }
ARM GAS  /tmp/ccWvJRjM.s 			page 28


 587:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     else
 588:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     {
 589:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       /* Check the HSI48 State */
 590:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 943              		.loc 1 590 0
 944 052a 7B68     		ldr	r3, [r7, #4]
 945 052c 1B6A     		ldr	r3, [r3, #32]
 946 052e 002B     		cmp	r3, #0
 947 0530 1BD0     		beq	.L60
 591:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       {
 592:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         /* Enable the Internal High Speed oscillator (HSI48). */
 593:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         __HAL_RCC_HSI48_ENABLE();
 948              		.loc 1 593 0
 949 0532 4F4B     		ldr	r3, .L78
 950 0534 4E4A     		ldr	r2, .L78
 951 0536 526B     		ldr	r2, [r2, #52]
 952 0538 8021     		movs	r1, #128
 953 053a 4902     		lsls	r1, r1, #9
 954 053c 0A43     		orrs	r2, r1
 955 053e 5A63     		str	r2, [r3, #52]
 594:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
 595:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         /* Get Start Tick */
 596:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 956              		.loc 1 596 0
 957 0540 FFF7FEFF 		bl	HAL_GetTick
 958 0544 0300     		movs	r3, r0
 959 0546 3B61     		str	r3, [r7, #16]
 597:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       
 598:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         /* Wait till HSI48 is ready */  
 599:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 960              		.loc 1 599 0
 961 0548 08E0     		b	.L61
 962              	.L62:
 600:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         {
 601:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 963              		.loc 1 601 0
 964 054a FFF7FEFF 		bl	HAL_GetTick
 965 054e 0200     		movs	r2, r0
 966 0550 3B69     		ldr	r3, [r7, #16]
 967 0552 D31A     		subs	r3, r2, r3
 968 0554 022B     		cmp	r3, #2
 969 0556 01D9     		bls	.L61
 602:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           {
 603:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****             return HAL_TIMEOUT;
 970              		.loc 1 603 0
 971 0558 0323     		movs	r3, #3
 972 055a A8E0     		b	.L9
 973              	.L61:
 599:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         {
 974              		.loc 1 599 0
 975 055c 444B     		ldr	r3, .L78
 976 055e 5A6B     		ldr	r2, [r3, #52]
 977 0560 8023     		movs	r3, #128
 978 0562 5B02     		lsls	r3, r3, #9
 979 0564 1340     		ands	r3, r2
 980 0566 F0D0     		beq	.L62
 981 0568 1BE0     		b	.L56
ARM GAS  /tmp/ccWvJRjM.s 			page 29


 982              	.L60:
 604:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           }
 605:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         } 
 606:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       }
 607:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       else
 608:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       {
 609:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         /* Disable the Internal High Speed oscillator (HSI48). */
 610:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         __HAL_RCC_HSI48_DISABLE();
 983              		.loc 1 610 0
 984 056a 414B     		ldr	r3, .L78
 985 056c 404A     		ldr	r2, .L78
 986 056e 526B     		ldr	r2, [r2, #52]
 987 0570 4249     		ldr	r1, .L78+12
 988 0572 0A40     		ands	r2, r1
 989 0574 5A63     		str	r2, [r3, #52]
 611:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
 612:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         /* Get Start Tick */
 613:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 990              		.loc 1 613 0
 991 0576 FFF7FEFF 		bl	HAL_GetTick
 992 057a 0300     		movs	r3, r0
 993 057c 3B61     		str	r3, [r7, #16]
 614:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       
 615:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         /* Wait till HSI48 is ready */  
 616:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 994              		.loc 1 616 0
 995 057e 08E0     		b	.L63
 996              	.L64:
 617:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         {
 618:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 997              		.loc 1 618 0
 998 0580 FFF7FEFF 		bl	HAL_GetTick
 999 0584 0200     		movs	r2, r0
 1000 0586 3B69     		ldr	r3, [r7, #16]
 1001 0588 D31A     		subs	r3, r2, r3
 1002 058a 022B     		cmp	r3, #2
 1003 058c 01D9     		bls	.L63
 619:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           {
 620:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****             return HAL_TIMEOUT;
 1004              		.loc 1 620 0
 1005 058e 0323     		movs	r3, #3
 1006 0590 8DE0     		b	.L9
 1007              	.L63:
 616:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         {
 1008              		.loc 1 616 0
 1009 0592 374B     		ldr	r3, .L78
 1010 0594 5A6B     		ldr	r2, [r3, #52]
 1011 0596 8023     		movs	r3, #128
 1012 0598 5B02     		lsls	r3, r3, #9
 1013 059a 1340     		ands	r3, r2
 1014 059c F0D1     		bne	.L64
 1015 059e 00E0     		b	.L56
 1016              	.L75:
 582:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       {
 1017              		.loc 1 582 0
 1018 05a0 C046     		nop
 1019              	.L56:
ARM GAS  /tmp/ccWvJRjM.s 			page 30


 621:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           }
 622:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         }
 623:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       }
 624:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     }
 625:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   }
 626:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** #endif /* RCC_HSI48_SUPPORT */
 627:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****        
 628:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   /*-------------------------------- PLL Configuration -----------------------*/
 629:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   /* Check the parameters */
 630:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 631:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 1020              		.loc 1 631 0
 1021 05a2 7B68     		ldr	r3, [r7, #4]
 1022 05a4 5B6A     		ldr	r3, [r3, #36]
 1023 05a6 002B     		cmp	r3, #0
 1024 05a8 00D1     		bne	.LCB960
 1025 05aa 7FE0     		b	.L65	@long jump
 1026              	.LCB960:
 632:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   {
 633:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     /* Check if the PLL is used as system clock or not */
 634:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 1027              		.loc 1 634 0
 1028 05ac 304B     		ldr	r3, .L78
 1029 05ae 5B68     		ldr	r3, [r3, #4]
 1030 05b0 0C22     		movs	r2, #12
 1031 05b2 1340     		ands	r3, r2
 1032 05b4 082B     		cmp	r3, #8
 1033 05b6 00D1     		bne	.LCB966
 1034 05b8 76E0     		b	.L66	@long jump
 1035              	.LCB966:
 635:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     { 
 636:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 1036              		.loc 1 636 0
 1037 05ba 7B68     		ldr	r3, [r7, #4]
 1038 05bc 5B6A     		ldr	r3, [r3, #36]
 1039 05be 022B     		cmp	r3, #2
 1040 05c0 4BD1     		bne	.L67
 637:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       {
 638:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         /* Check the parameters */
 639:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 640:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 641:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
 642:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   
 643:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         /* Disable the main PLL. */
 644:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         __HAL_RCC_PLL_DISABLE();
 1041              		.loc 1 644 0
 1042 05c2 2B4B     		ldr	r3, .L78
 1043 05c4 2A4A     		ldr	r2, .L78
 1044 05c6 1268     		ldr	r2, [r2]
 1045 05c8 2D49     		ldr	r1, .L78+16
 1046 05ca 0A40     		ands	r2, r1
 1047 05cc 1A60     		str	r2, [r3]
 645:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         
 646:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         /* Get Start Tick */
 647:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 1048              		.loc 1 647 0
 1049 05ce FFF7FEFF 		bl	HAL_GetTick
ARM GAS  /tmp/ccWvJRjM.s 			page 31


 1050 05d2 0300     		movs	r3, r0
 1051 05d4 3B61     		str	r3, [r7, #16]
 648:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         
 649:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         /* Wait till PLL is disabled */
 650:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 1052              		.loc 1 650 0
 1053 05d6 08E0     		b	.L68
 1054              	.L69:
 651:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         {
 652:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 1055              		.loc 1 652 0
 1056 05d8 FFF7FEFF 		bl	HAL_GetTick
 1057 05dc 0200     		movs	r2, r0
 1058 05de 3B69     		ldr	r3, [r7, #16]
 1059 05e0 D31A     		subs	r3, r2, r3
 1060 05e2 022B     		cmp	r3, #2
 1061 05e4 01D9     		bls	.L68
 653:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           {
 654:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****             return HAL_TIMEOUT;
 1062              		.loc 1 654 0
 1063 05e6 0323     		movs	r3, #3
 1064 05e8 61E0     		b	.L9
 1065              	.L68:
 650:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         {
 1066              		.loc 1 650 0
 1067 05ea 214B     		ldr	r3, .L78
 1068 05ec 1A68     		ldr	r2, [r3]
 1069 05ee 8023     		movs	r3, #128
 1070 05f0 9B04     		lsls	r3, r3, #18
 1071 05f2 1340     		ands	r3, r2
 1072 05f4 F0D1     		bne	.L69
 655:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           }
 656:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         }
 657:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
 658:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         /* Configure the main PLL clock source, predivider and multiplication factor. */
 659:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 1073              		.loc 1 659 0
 1074 05f6 1E4A     		ldr	r2, .L78
 1075 05f8 1D4B     		ldr	r3, .L78
 1076 05fa DB6A     		ldr	r3, [r3, #44]
 1077 05fc 0F21     		movs	r1, #15
 1078 05fe 8B43     		bics	r3, r1
 1079 0600 1900     		movs	r1, r3
 1080 0602 7B68     		ldr	r3, [r7, #4]
 1081 0604 1B6B     		ldr	r3, [r3, #48]
 1082 0606 0B43     		orrs	r3, r1
 1083 0608 D362     		str	r3, [r2, #44]
 1084 060a 194A     		ldr	r2, .L78
 1085 060c 184B     		ldr	r3, .L78
 1086 060e 5B68     		ldr	r3, [r3, #4]
 1087 0610 1C49     		ldr	r1, .L78+20
 1088 0612 1940     		ands	r1, r3
 1089 0614 7B68     		ldr	r3, [r7, #4]
 1090 0616 D86A     		ldr	r0, [r3, #44]
 1091 0618 7B68     		ldr	r3, [r7, #4]
 1092 061a 9B6A     		ldr	r3, [r3, #40]
 1093 061c 0343     		orrs	r3, r0
ARM GAS  /tmp/ccWvJRjM.s 			page 32


 1094 061e 0B43     		orrs	r3, r1
 1095 0620 5360     		str	r3, [r2, #4]
 660:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****                              RCC_OscInitStruct->PLL.PREDIV,
 661:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****                              RCC_OscInitStruct->PLL.PLLMUL);
 662:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         /* Enable the main PLL. */
 663:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         __HAL_RCC_PLL_ENABLE();
 1096              		.loc 1 663 0
 1097 0622 134B     		ldr	r3, .L78
 1098 0624 124A     		ldr	r2, .L78
 1099 0626 1268     		ldr	r2, [r2]
 1100 0628 8021     		movs	r1, #128
 1101 062a 4904     		lsls	r1, r1, #17
 1102 062c 0A43     		orrs	r2, r1
 1103 062e 1A60     		str	r2, [r3]
 664:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         
 665:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         /* Get Start Tick */
 666:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 1104              		.loc 1 666 0
 1105 0630 FFF7FEFF 		bl	HAL_GetTick
 1106 0634 0300     		movs	r3, r0
 1107 0636 3B61     		str	r3, [r7, #16]
 667:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         
 668:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         /* Wait till PLL is ready */
 669:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 1108              		.loc 1 669 0
 1109 0638 08E0     		b	.L70
 1110              	.L71:
 670:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         {
 671:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 1111              		.loc 1 671 0
 1112 063a FFF7FEFF 		bl	HAL_GetTick
 1113 063e 0200     		movs	r2, r0
 1114 0640 3B69     		ldr	r3, [r7, #16]
 1115 0642 D31A     		subs	r3, r2, r3
 1116 0644 022B     		cmp	r3, #2
 1117 0646 01D9     		bls	.L70
 672:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           {
 673:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****             return HAL_TIMEOUT;
 1118              		.loc 1 673 0
 1119 0648 0323     		movs	r3, #3
 1120 064a 30E0     		b	.L9
 1121              	.L70:
 669:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         {
 1122              		.loc 1 669 0
 1123 064c 084B     		ldr	r3, .L78
 1124 064e 1A68     		ldr	r2, [r3]
 1125 0650 8023     		movs	r3, #128
 1126 0652 9B04     		lsls	r3, r3, #18
 1127 0654 1340     		ands	r3, r2
 1128 0656 F0D0     		beq	.L71
 1129 0658 28E0     		b	.L65
 1130              	.L67:
 674:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           }
 675:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         }
 676:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       }
 677:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       else
 678:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       {
ARM GAS  /tmp/ccWvJRjM.s 			page 33


 679:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         /* Disable the main PLL. */
 680:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         __HAL_RCC_PLL_DISABLE();
 1131              		.loc 1 680 0
 1132 065a 054B     		ldr	r3, .L78
 1133 065c 044A     		ldr	r2, .L78
 1134 065e 1268     		ldr	r2, [r2]
 1135 0660 0749     		ldr	r1, .L78+16
 1136 0662 0A40     		ands	r2, r1
 1137 0664 1A60     		str	r2, [r3]
 681:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****  
 682:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         /* Get Start Tick */
 683:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 1138              		.loc 1 683 0
 1139 0666 FFF7FEFF 		bl	HAL_GetTick
 1140 066a 0300     		movs	r3, r0
 1141 066c 3B61     		str	r3, [r7, #16]
 684:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         
 685:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         /* Wait till PLL is disabled */  
 686:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 1142              		.loc 1 686 0
 1143 066e 14E0     		b	.L72
 1144              	.L79:
 1145              		.align	2
 1146              	.L78:
 1147 0670 00100240 		.word	1073876992
 1148 0674 88130000 		.word	5000
 1149 0678 FFFFFFEF 		.word	-268435457
 1150 067c FFFFFEFF 		.word	-65537
 1151 0680 FFFFFFFE 		.word	-16777217
 1152 0684 FF7FC2FF 		.word	-4030465
 1153              	.L73:
 687:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         {
 688:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 1154              		.loc 1 688 0
 1155 0688 FFF7FEFF 		bl	HAL_GetTick
 1156 068c 0200     		movs	r2, r0
 1157 068e 3B69     		ldr	r3, [r7, #16]
 1158 0690 D31A     		subs	r3, r2, r3
 1159 0692 022B     		cmp	r3, #2
 1160 0694 01D9     		bls	.L72
 689:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           {
 690:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****             return HAL_TIMEOUT;
 1161              		.loc 1 690 0
 1162 0696 0323     		movs	r3, #3
 1163 0698 09E0     		b	.L9
 1164              	.L72:
 686:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         {
 1165              		.loc 1 686 0
 1166 069a 074B     		ldr	r3, .L80
 1167 069c 1A68     		ldr	r2, [r3]
 1168 069e 8023     		movs	r3, #128
 1169 06a0 9B04     		lsls	r3, r3, #18
 1170 06a2 1340     		ands	r3, r2
 1171 06a4 F0D1     		bne	.L73
 1172 06a6 01E0     		b	.L65
 1173              	.L66:
 691:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           }
ARM GAS  /tmp/ccWvJRjM.s 			page 34


 692:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         }
 693:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       }
 694:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     }
 695:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     else
 696:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     {
 697:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       return HAL_ERROR;
 1174              		.loc 1 697 0
 1175 06a8 0123     		movs	r3, #1
 1176 06aa 00E0     		b	.L9
 1177              	.L65:
 698:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     }
 699:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   }
 700:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   
 701:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   return HAL_OK;
 1178              		.loc 1 701 0
 1179 06ac 0023     		movs	r3, #0
 1180              	.L9:
 702:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** }
 1181              		.loc 1 702 0
 1182 06ae 1800     		movs	r0, r3
 1183 06b0 BD46     		mov	sp, r7
 1184 06b2 06B0     		add	sp, sp, #24
 1185              		@ sp needed
 1186 06b4 80BD     		pop	{r7, pc}
 1187              	.L81:
 1188 06b6 C046     		.align	2
 1189              	.L80:
 1190 06b8 00100240 		.word	1073876992
 1191              		.cfi_endproc
 1192              	.LFE36:
 1194              		.section	.text.HAL_RCC_ClockConfig,"ax",%progbits
 1195              		.align	1
 1196              		.global	HAL_RCC_ClockConfig
 1197              		.syntax unified
 1198              		.code	16
 1199              		.thumb_func
 1200              		.fpu softvfp
 1202              	HAL_RCC_ClockConfig:
 1203              	.LFB37:
 703:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
 704:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** /**
 705:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @brief  Initializes the CPU, AHB and APB buses clocks according to the specified 
 706:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *         parameters in the RCC_ClkInitStruct.
 707:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @param  RCC_ClkInitStruct pointer to an RCC_OscInitTypeDef structure that
 708:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *         contains the configuration information for the RCC peripheral.
 709:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @param  FLatency FLASH Latency                   
 710:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *          The value of this parameter depend on device used within the same series
 711:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
 712:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *         and updated by @ref HAL_RCC_GetHCLKFreq() function called within this function
 713:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *
 714:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @note   The HSI is used (enabled by hardware) as system clock source after
 715:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *         start-up from Reset, wake-up from STOP and STANDBY mode, or in case
 716:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *         of failure of the HSE used directly or indirectly as system clock
 717:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *         (if the Clock Security System CSS is enabled).
 718:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *           
 719:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @note   A switch from one clock source to another occurs only if the target
 720:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *         clock source is ready (clock stable after start-up delay or PLL locked). 
ARM GAS  /tmp/ccWvJRjM.s 			page 35


 721:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *         If a clock source which is not yet ready is selected, the switch will
 722:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *         occur when the clock source will be ready. 
 723:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
 724:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *         currently used as system clock source.
 725:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @retval HAL status
 726:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   */
 727:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
 728:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** {
 1204              		.loc 1 728 0
 1205              		.cfi_startproc
 1206 0000 80B5     		push	{r7, lr}
 1207              	.LCFI5:
 1208              		.cfi_def_cfa_offset 8
 1209              		.cfi_offset 7, -8
 1210              		.cfi_offset 14, -4
 1211 0002 84B0     		sub	sp, sp, #16
 1212              	.LCFI6:
 1213              		.cfi_def_cfa_offset 24
 1214 0004 00AF     		add	r7, sp, #0
 1215              	.LCFI7:
 1216              		.cfi_def_cfa_register 7
 1217 0006 7860     		str	r0, [r7, #4]
 1218 0008 3960     		str	r1, [r7]
 729:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   uint32_t tickstart = 0;
 1219              		.loc 1 729 0
 1220 000a 0023     		movs	r3, #0
 1221 000c FB60     		str	r3, [r7, #12]
 730:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   
 731:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   /* Check the parameters */
 732:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   assert_param(RCC_ClkInitStruct != NULL);
 733:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 734:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   assert_param(IS_FLASH_LATENCY(FLatency));
 735:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
 736:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
 737:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   must be correctly programmed according to the frequency of the CPU clock 
 738:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     (HCLK) of the device. */
 739:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
 740:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   /* Increasing the number of wait states because of higher CPU frequency */
 741:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 1222              		.loc 1 741 0
 1223 000e 7A4B     		ldr	r3, .L104
 1224 0010 1B68     		ldr	r3, [r3]
 1225 0012 0122     		movs	r2, #1
 1226 0014 1A40     		ands	r2, r3
 1227 0016 3B68     		ldr	r3, [r7]
 1228 0018 9A42     		cmp	r2, r3
 1229 001a 11D2     		bcs	.L83
 742:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   {    
 743:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
 744:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     __HAL_FLASH_SET_LATENCY(FLatency);
 1230              		.loc 1 744 0
 1231 001c 764B     		ldr	r3, .L104
 1232 001e 764A     		ldr	r2, .L104
 1233 0020 1268     		ldr	r2, [r2]
 1234 0022 0121     		movs	r1, #1
 1235 0024 8A43     		bics	r2, r1
 1236 0026 1100     		movs	r1, r2
ARM GAS  /tmp/ccWvJRjM.s 			page 36


 1237 0028 3A68     		ldr	r2, [r7]
 1238 002a 0A43     		orrs	r2, r1
 1239 002c 1A60     		str	r2, [r3]
 745:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     
 746:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     /* Check that the new number of wait states is taken into account to access the Flash
 747:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     memory by reading the FLASH_ACR register */
 748:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 1240              		.loc 1 748 0
 1241 002e 724B     		ldr	r3, .L104
 1242 0030 1B68     		ldr	r3, [r3]
 1243 0032 0122     		movs	r2, #1
 1244 0034 1A40     		ands	r2, r3
 1245 0036 3B68     		ldr	r3, [r7]
 1246 0038 9A42     		cmp	r2, r3
 1247 003a 01D0     		beq	.L83
 749:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     {
 750:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       return HAL_ERROR;
 1248              		.loc 1 750 0
 1249 003c 0123     		movs	r3, #1
 1250 003e D7E0     		b	.L84
 1251              	.L83:
 751:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     }
 752:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   }
 753:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
 754:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   /*-------------------------- HCLK Configuration --------------------------*/
 755:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 1252              		.loc 1 755 0
 1253 0040 7B68     		ldr	r3, [r7, #4]
 1254 0042 1B68     		ldr	r3, [r3]
 1255 0044 0222     		movs	r2, #2
 1256 0046 1340     		ands	r3, r2
 1257 0048 09D0     		beq	.L85
 756:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   {
 757:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 758:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 1258              		.loc 1 758 0
 1259 004a 6C4A     		ldr	r2, .L104+4
 1260 004c 6B4B     		ldr	r3, .L104+4
 1261 004e 5B68     		ldr	r3, [r3, #4]
 1262 0050 F021     		movs	r1, #240
 1263 0052 8B43     		bics	r3, r1
 1264 0054 1900     		movs	r1, r3
 1265 0056 7B68     		ldr	r3, [r7, #4]
 1266 0058 9B68     		ldr	r3, [r3, #8]
 1267 005a 0B43     		orrs	r3, r1
 1268 005c 5360     		str	r3, [r2, #4]
 1269              	.L85:
 759:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   }
 760:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
 761:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   /*------------------------- SYSCLK Configuration ---------------------------*/ 
 762:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 1270              		.loc 1 762 0
 1271 005e 7B68     		ldr	r3, [r7, #4]
 1272 0060 1B68     		ldr	r3, [r3]
 1273 0062 0122     		movs	r2, #1
 1274 0064 1340     		ands	r3, r2
 1275 0066 00D1     		bne	.LCB1201
ARM GAS  /tmp/ccWvJRjM.s 			page 37


 1276 0068 89E0     		b	.L86	@long jump
 1277              	.LCB1201:
 763:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   {    
 764:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 765:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     
 766:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     /* HSE is selected as System Clock Source */
 767:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 1278              		.loc 1 767 0
 1279 006a 7B68     		ldr	r3, [r7, #4]
 1280 006c 5B68     		ldr	r3, [r3, #4]
 1281 006e 012B     		cmp	r3, #1
 1282 0070 07D1     		bne	.L87
 768:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     {
 769:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       /* Check the HSE ready flag */  
 770:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 1283              		.loc 1 770 0
 1284 0072 624B     		ldr	r3, .L104+4
 1285 0074 1A68     		ldr	r2, [r3]
 1286 0076 8023     		movs	r3, #128
 1287 0078 9B02     		lsls	r3, r3, #10
 1288 007a 1340     		ands	r3, r2
 1289 007c 20D1     		bne	.L88
 771:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       {
 772:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         return HAL_ERROR;
 1290              		.loc 1 772 0
 1291 007e 0123     		movs	r3, #1
 1292 0080 B6E0     		b	.L84
 1293              	.L87:
 773:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       }
 774:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     }
 775:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     /* PLL is selected as System Clock Source */
 776:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 1294              		.loc 1 776 0
 1295 0082 7B68     		ldr	r3, [r7, #4]
 1296 0084 5B68     		ldr	r3, [r3, #4]
 1297 0086 022B     		cmp	r3, #2
 1298 0088 07D1     		bne	.L89
 777:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     {
 778:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       /* Check the PLL ready flag */  
 779:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 1299              		.loc 1 779 0
 1300 008a 5C4B     		ldr	r3, .L104+4
 1301 008c 1A68     		ldr	r2, [r3]
 1302 008e 8023     		movs	r3, #128
 1303 0090 9B04     		lsls	r3, r3, #18
 1304 0092 1340     		ands	r3, r2
 1305 0094 14D1     		bne	.L88
 780:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       {
 781:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         return HAL_ERROR;
 1306              		.loc 1 781 0
 1307 0096 0123     		movs	r3, #1
 1308 0098 AAE0     		b	.L84
 1309              	.L89:
 782:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       }
 783:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     }
 784:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** #if defined(RCC_CFGR_SWS_HSI48)
 785:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     /* HSI48 is selected as System Clock Source */
ARM GAS  /tmp/ccWvJRjM.s 			page 38


 786:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 1310              		.loc 1 786 0
 1311 009a 7B68     		ldr	r3, [r7, #4]
 1312 009c 5B68     		ldr	r3, [r3, #4]
 1313 009e 032B     		cmp	r3, #3
 1314 00a0 07D1     		bne	.L90
 787:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     {
 788:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       /* Check the HSI48 ready flag */
 789:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 1315              		.loc 1 789 0
 1316 00a2 564B     		ldr	r3, .L104+4
 1317 00a4 5A6B     		ldr	r2, [r3, #52]
 1318 00a6 8023     		movs	r3, #128
 1319 00a8 5B02     		lsls	r3, r3, #9
 1320 00aa 1340     		ands	r3, r2
 1321 00ac 08D1     		bne	.L88
 790:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       {
 791:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         return HAL_ERROR;
 1322              		.loc 1 791 0
 1323 00ae 0123     		movs	r3, #1
 1324 00b0 9EE0     		b	.L84
 1325              	.L90:
 792:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       }
 793:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     }
 794:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** #endif /* RCC_CFGR_SWS_HSI48 */
 795:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     /* HSI is selected as System Clock Source */
 796:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     else
 797:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     {
 798:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       /* Check the HSI ready flag */  
 799:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 1326              		.loc 1 799 0
 1327 00b2 524B     		ldr	r3, .L104+4
 1328 00b4 1B68     		ldr	r3, [r3]
 1329 00b6 0222     		movs	r2, #2
 1330 00b8 1340     		ands	r3, r2
 1331 00ba 01D1     		bne	.L88
 800:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       {
 801:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         return HAL_ERROR;
 1332              		.loc 1 801 0
 1333 00bc 0123     		movs	r3, #1
 1334 00be 97E0     		b	.L84
 1335              	.L88:
 802:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       }
 803:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     }
 804:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 1336              		.loc 1 804 0
 1337 00c0 4E4A     		ldr	r2, .L104+4
 1338 00c2 4E4B     		ldr	r3, .L104+4
 1339 00c4 5B68     		ldr	r3, [r3, #4]
 1340 00c6 0321     		movs	r1, #3
 1341 00c8 8B43     		bics	r3, r1
 1342 00ca 1900     		movs	r1, r3
 1343 00cc 7B68     		ldr	r3, [r7, #4]
 1344 00ce 5B68     		ldr	r3, [r3, #4]
 1345 00d0 0B43     		orrs	r3, r1
 1346 00d2 5360     		str	r3, [r2, #4]
 805:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
ARM GAS  /tmp/ccWvJRjM.s 			page 39


 806:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     /* Get Start Tick */
 807:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     tickstart = HAL_GetTick();
 1347              		.loc 1 807 0
 1348 00d4 FFF7FEFF 		bl	HAL_GetTick
 1349 00d8 0300     		movs	r3, r0
 1350 00da FB60     		str	r3, [r7, #12]
 808:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     
 809:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 1351              		.loc 1 809 0
 1352 00dc 7B68     		ldr	r3, [r7, #4]
 1353 00de 5B68     		ldr	r3, [r3, #4]
 1354 00e0 012B     		cmp	r3, #1
 1355 00e2 11D1     		bne	.L91
 810:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     {
 811:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 1356              		.loc 1 811 0
 1357 00e4 09E0     		b	.L92
 1358              	.L93:
 812:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       {
 813:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 1359              		.loc 1 813 0
 1360 00e6 FFF7FEFF 		bl	HAL_GetTick
 1361 00ea 0200     		movs	r2, r0
 1362 00ec FB68     		ldr	r3, [r7, #12]
 1363 00ee D31A     		subs	r3, r2, r3
 1364 00f0 434A     		ldr	r2, .L104+8
 1365 00f2 9342     		cmp	r3, r2
 1366 00f4 01D9     		bls	.L92
 814:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         {
 815:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           return HAL_TIMEOUT;
 1367              		.loc 1 815 0
 1368 00f6 0323     		movs	r3, #3
 1369 00f8 7AE0     		b	.L84
 1370              	.L92:
 811:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       {
 1371              		.loc 1 811 0
 1372 00fa 404B     		ldr	r3, .L104+4
 1373 00fc 5B68     		ldr	r3, [r3, #4]
 1374 00fe 0C22     		movs	r2, #12
 1375 0100 1340     		ands	r3, r2
 1376 0102 042B     		cmp	r3, #4
 1377 0104 EFD1     		bne	.L93
 1378 0106 3AE0     		b	.L86
 1379              	.L91:
 816:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         }
 817:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       }
 818:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     }
 819:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 1380              		.loc 1 819 0
 1381 0108 7B68     		ldr	r3, [r7, #4]
 1382 010a 5B68     		ldr	r3, [r3, #4]
 1383 010c 022B     		cmp	r3, #2
 1384 010e 11D1     		bne	.L94
 820:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     {
 821:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 1385              		.loc 1 821 0
 1386 0110 09E0     		b	.L95
ARM GAS  /tmp/ccWvJRjM.s 			page 40


 1387              	.L96:
 822:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       {
 823:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 1388              		.loc 1 823 0
 1389 0112 FFF7FEFF 		bl	HAL_GetTick
 1390 0116 0200     		movs	r2, r0
 1391 0118 FB68     		ldr	r3, [r7, #12]
 1392 011a D31A     		subs	r3, r2, r3
 1393 011c 384A     		ldr	r2, .L104+8
 1394 011e 9342     		cmp	r3, r2
 1395 0120 01D9     		bls	.L95
 824:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         {
 825:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           return HAL_TIMEOUT;
 1396              		.loc 1 825 0
 1397 0122 0323     		movs	r3, #3
 1398 0124 64E0     		b	.L84
 1399              	.L95:
 821:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       {
 1400              		.loc 1 821 0
 1401 0126 354B     		ldr	r3, .L104+4
 1402 0128 5B68     		ldr	r3, [r3, #4]
 1403 012a 0C22     		movs	r2, #12
 1404 012c 1340     		ands	r3, r2
 1405 012e 082B     		cmp	r3, #8
 1406 0130 EFD1     		bne	.L96
 1407 0132 24E0     		b	.L86
 1408              	.L94:
 826:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         }
 827:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       }
 828:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     }
 829:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** #if defined(RCC_CFGR_SWS_HSI48)
 830:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 1409              		.loc 1 830 0
 1410 0134 7B68     		ldr	r3, [r7, #4]
 1411 0136 5B68     		ldr	r3, [r3, #4]
 1412 0138 032B     		cmp	r3, #3
 1413 013a 1BD1     		bne	.L100
 831:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     {
 832:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 1414              		.loc 1 832 0
 1415 013c 09E0     		b	.L98
 1416              	.L99:
 833:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       {
 834:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 1417              		.loc 1 834 0
 1418 013e FFF7FEFF 		bl	HAL_GetTick
 1419 0142 0200     		movs	r2, r0
 1420 0144 FB68     		ldr	r3, [r7, #12]
 1421 0146 D31A     		subs	r3, r2, r3
 1422 0148 2D4A     		ldr	r2, .L104+8
 1423 014a 9342     		cmp	r3, r2
 1424 014c 01D9     		bls	.L98
 835:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         {
 836:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           return HAL_TIMEOUT;
 1425              		.loc 1 836 0
 1426 014e 0323     		movs	r3, #3
 1427 0150 4EE0     		b	.L84
ARM GAS  /tmp/ccWvJRjM.s 			page 41


 1428              	.L98:
 832:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       {
 1429              		.loc 1 832 0
 1430 0152 2A4B     		ldr	r3, .L104+4
 1431 0154 5B68     		ldr	r3, [r3, #4]
 1432 0156 0C22     		movs	r2, #12
 1433 0158 1340     		ands	r3, r2
 1434 015a 0C2B     		cmp	r3, #12
 1435 015c EFD1     		bne	.L99
 1436 015e 0EE0     		b	.L86
 1437              	.L101:
 837:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         }
 838:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       }
 839:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     }
 840:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** #endif /* RCC_CFGR_SWS_HSI48 */
 841:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     else
 842:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     {
 843:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 844:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       {
 845:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 1438              		.loc 1 845 0
 1439 0160 FFF7FEFF 		bl	HAL_GetTick
 1440 0164 0200     		movs	r2, r0
 1441 0166 FB68     		ldr	r3, [r7, #12]
 1442 0168 D31A     		subs	r3, r2, r3
 1443 016a 254A     		ldr	r2, .L104+8
 1444 016c 9342     		cmp	r3, r2
 1445 016e 01D9     		bls	.L100
 846:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         {
 847:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****           return HAL_TIMEOUT;
 1446              		.loc 1 847 0
 1447 0170 0323     		movs	r3, #3
 1448 0172 3DE0     		b	.L84
 1449              	.L100:
 843:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       {
 1450              		.loc 1 843 0
 1451 0174 214B     		ldr	r3, .L104+4
 1452 0176 5B68     		ldr	r3, [r3, #4]
 1453 0178 0C22     		movs	r2, #12
 1454 017a 1340     		ands	r3, r2
 1455 017c F0D1     		bne	.L101
 1456              	.L86:
 848:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         }
 849:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       }
 850:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     }      
 851:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   }    
 852:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   /* Decreasing the number of wait states because of lower CPU frequency */
 853:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 1457              		.loc 1 853 0
 1458 017e 1E4B     		ldr	r3, .L104
 1459 0180 1B68     		ldr	r3, [r3]
 1460 0182 0122     		movs	r2, #1
 1461 0184 1A40     		ands	r2, r3
 1462 0186 3B68     		ldr	r3, [r7]
 1463 0188 9A42     		cmp	r2, r3
 1464 018a 11D9     		bls	.L102
 854:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   {    
ARM GAS  /tmp/ccWvJRjM.s 			page 42


 855:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
 856:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     __HAL_FLASH_SET_LATENCY(FLatency);
 1465              		.loc 1 856 0
 1466 018c 1A4B     		ldr	r3, .L104
 1467 018e 1A4A     		ldr	r2, .L104
 1468 0190 1268     		ldr	r2, [r2]
 1469 0192 0121     		movs	r1, #1
 1470 0194 8A43     		bics	r2, r1
 1471 0196 1100     		movs	r1, r2
 1472 0198 3A68     		ldr	r2, [r7]
 1473 019a 0A43     		orrs	r2, r1
 1474 019c 1A60     		str	r2, [r3]
 857:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     
 858:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     /* Check that the new number of wait states is taken into account to access the Flash
 859:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     memory by reading the FLASH_ACR register */
 860:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 1475              		.loc 1 860 0
 1476 019e 164B     		ldr	r3, .L104
 1477 01a0 1B68     		ldr	r3, [r3]
 1478 01a2 0122     		movs	r2, #1
 1479 01a4 1A40     		ands	r2, r3
 1480 01a6 3B68     		ldr	r3, [r7]
 1481 01a8 9A42     		cmp	r2, r3
 1482 01aa 01D0     		beq	.L102
 861:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     {
 862:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       return HAL_ERROR;
 1483              		.loc 1 862 0
 1484 01ac 0123     		movs	r3, #1
 1485 01ae 1FE0     		b	.L84
 1486              	.L102:
 863:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     }
 864:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   }    
 865:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
 866:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   /*-------------------------- PCLK1 Configuration ---------------------------*/ 
 867:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 1487              		.loc 1 867 0
 1488 01b0 7B68     		ldr	r3, [r7, #4]
 1489 01b2 1B68     		ldr	r3, [r3]
 1490 01b4 0422     		movs	r2, #4
 1491 01b6 1340     		ands	r3, r2
 1492 01b8 08D0     		beq	.L103
 868:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   {
 869:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 870:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 1493              		.loc 1 870 0
 1494 01ba 104A     		ldr	r2, .L104+4
 1495 01bc 0F4B     		ldr	r3, .L104+4
 1496 01be 5B68     		ldr	r3, [r3, #4]
 1497 01c0 1049     		ldr	r1, .L104+12
 1498 01c2 1940     		ands	r1, r3
 1499 01c4 7B68     		ldr	r3, [r7, #4]
 1500 01c6 DB68     		ldr	r3, [r3, #12]
 1501 01c8 0B43     		orrs	r3, r1
 1502 01ca 5360     		str	r3, [r2, #4]
 1503              	.L103:
 871:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   }
 872:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   
ARM GAS  /tmp/ccWvJRjM.s 			page 43


 873:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   /* Update the SystemCoreClock global variable */
 874:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CF
 1504              		.loc 1 874 0
 1505 01cc FFF7FEFF 		bl	HAL_RCC_GetSysClockFreq
 1506 01d0 0100     		movs	r1, r0
 1507 01d2 0A4B     		ldr	r3, .L104+4
 1508 01d4 5B68     		ldr	r3, [r3, #4]
 1509 01d6 1B09     		lsrs	r3, r3, #4
 1510 01d8 0F22     		movs	r2, #15
 1511 01da 1340     		ands	r3, r2
 1512 01dc 0A4A     		ldr	r2, .L104+16
 1513 01de D35C     		ldrb	r3, [r2, r3]
 1514 01e0 0A00     		movs	r2, r1
 1515 01e2 DA40     		lsrs	r2, r2, r3
 1516 01e4 094B     		ldr	r3, .L104+20
 1517 01e6 1A60     		str	r2, [r3]
 875:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
 876:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   /* Configure the source of time base considering new system clocks settings*/
 877:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   HAL_InitTick (TICK_INT_PRIORITY);
 1518              		.loc 1 877 0
 1519 01e8 0020     		movs	r0, #0
 1520 01ea FFF7FEFF 		bl	HAL_InitTick
 878:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   
 879:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   return HAL_OK;
 1521              		.loc 1 879 0
 1522 01ee 0023     		movs	r3, #0
 1523              	.L84:
 880:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** }
 1524              		.loc 1 880 0
 1525 01f0 1800     		movs	r0, r3
 1526 01f2 BD46     		mov	sp, r7
 1527 01f4 04B0     		add	sp, sp, #16
 1528              		@ sp needed
 1529 01f6 80BD     		pop	{r7, pc}
 1530              	.L105:
 1531              		.align	2
 1532              	.L104:
 1533 01f8 00200240 		.word	1073881088
 1534 01fc 00100240 		.word	1073876992
 1535 0200 88130000 		.word	5000
 1536 0204 FFF8FFFF 		.word	-1793
 1537 0208 00000000 		.word	AHBPrescTable
 1538 020c 00000000 		.word	SystemCoreClock
 1539              		.cfi_endproc
 1540              	.LFE37:
 1542              		.section	.text.HAL_RCC_MCOConfig,"ax",%progbits
 1543              		.align	1
 1544              		.global	HAL_RCC_MCOConfig
 1545              		.syntax unified
 1546              		.code	16
 1547              		.thumb_func
 1548              		.fpu softvfp
 1550              	HAL_RCC_MCOConfig:
 1551              	.LFB38:
 881:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
 882:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** /**
 883:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @}
ARM GAS  /tmp/ccWvJRjM.s 			page 44


 884:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   */
 885:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
 886:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** /** @defgroup RCC_Exported_Functions_Group2 Peripheral Control functions
 887:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *  @brief   RCC clocks control functions
 888:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *
 889:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   @verbatim   
 890:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   ===============================================================================
 891:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****                   ##### Peripheral Control functions #####
 892:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   ===============================================================================  
 893:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     [..]
 894:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     This subsection provides a set of functions allowing to control the RCC Clocks 
 895:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     frequencies.
 896:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
 897:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   @endverbatim
 898:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @{
 899:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   */
 900:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
 901:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** #if defined(RCC_CFGR_MCOPRE)
 902:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** /**
 903:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @brief  Selects the clock source to output on MCO pin.
 904:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @note   MCO pin should be configured in alternate function mode.
 905:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @param  RCC_MCOx specifies the output direction for the clock source.
 906:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *          This parameter can be one of the following values:
 907:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1 Clock source to output on MCO1 pin(PA8).
 908:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @param  RCC_MCOSource specifies the clock source to output.
 909:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *          This parameter can be one of the following values:
 910:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_NOCLOCK     No clock selected
 911:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_SYSCLK      System Clock selected as MCO clock
 912:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_HSI         HSI selected as MCO clock
 913:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_HSE         HSE selected as MCO clock
 914:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_LSI         LSI selected as MCO clock
 915:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_LSE         LSE selected as MCO clock
 916:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_HSI14       HSI14 selected as MCO clock
 917:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   @if STM32F042x6
 918:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_HSI48       HSI48 selected as MCO clock
 919:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLLCLK      PLLCLK selected as MCO clock
 920:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   @elseif STM32F048xx
 921:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_HSI48       HSI48 selected as MCO clock
 922:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLLCLK      PLLCLK selected as MCO clock
 923:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   @elseif STM32F071xB
 924:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_HSI48       HSI48 selected as MCO clock
 925:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLLCLK      PLLCLK selected as MCO clock
 926:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   @elseif STM32F072xB
 927:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_HSI48       HSI48 selected as MCO clock
 928:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLLCLK      PLLCLK selected as MCO clock
 929:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   @elseif STM32F078xx
 930:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_HSI48       HSI48 selected as MCO clock
 931:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLLCLK      PLLCLK selected as MCO clock
 932:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   @elseif STM32F091xC
 933:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_HSI48       HSI48 selected as MCO clock
 934:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLLCLK      PLLCLK selected as MCO clock
 935:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   @elseif STM32F098xx
 936:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_HSI48       HSI48 selected as MCO clock
 937:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLLCLK      PLLCLK selected as MCO clock
 938:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   @elif STM32F030x6
 939:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLLCLK      PLLCLK selected as MCO clock
 940:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   @elif STM32F030xC
ARM GAS  /tmp/ccWvJRjM.s 			page 45


 941:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLLCLK      PLLCLK selected as MCO clock
 942:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   @elif STM32F031x6
 943:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLLCLK      PLLCLK selected as MCO clock
 944:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   @elif STM32F038xx
 945:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLLCLK      PLLCLK selected as MCO clock
 946:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   @elif STM32F070x6
 947:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLLCLK      PLLCLK selected as MCO clock
 948:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   @elif STM32F070xB
 949:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLLCLK      PLLCLK selected as MCO clock
 950:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   @endif
 951:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLLCLK_DIV2 PLLCLK Divided by 2 selected as MCO clock
 952:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @param  RCC_MCODiv specifies the MCO DIV.
 953:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *          This parameter can be one of the following values:
 954:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *            @arg @ref RCC_MCODIV_1   no division applied to MCO clock
 955:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *            @arg @ref RCC_MCODIV_2   division by 2 applied to MCO clock
 956:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *            @arg @ref RCC_MCODIV_4   division by 4 applied to MCO clock
 957:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *            @arg @ref RCC_MCODIV_8   division by 8 applied to MCO clock
 958:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
 959:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *            @arg @ref RCC_MCODIV_32  division by 32 applied to MCO clock
 960:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *            @arg @ref RCC_MCODIV_64  division by 64 applied to MCO clock
 961:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *            @arg @ref RCC_MCODIV_128 division by 128 applied to MCO clock
 962:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @retval None
 963:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   */
 964:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** #else
 965:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** /**
 966:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @brief  Selects the clock source to output on MCO pin.
 967:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @note   MCO pin should be configured in alternate function mode.
 968:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @param  RCC_MCOx specifies the output direction for the clock source.
 969:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *          This parameter can be one of the following values:
 970:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1 Clock source to output on MCO1 pin(PA8).
 971:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @param  RCC_MCOSource specifies the clock source to output.
 972:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *          This parameter can be one of the following values:
 973:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_NOCLOCK     No clock selected as MCO clock
 974:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_SYSCLK      System clock selected as MCO clock
 975:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_HSI         HSI selected as MCO clock
 976:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_HSE         HSE selected as MCO clock
 977:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_LSI         LSI selected as MCO clock
 978:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_LSE         LSE selected as MCO clock
 979:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_HSI14       HSI14 selected as MCO clock
 980:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLLCLK_DIV2 PLLCLK Divided by 2 selected as MCO clock
 981:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @param  RCC_MCODiv specifies the MCO DIV.
 982:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *          This parameter can be one of the following values:
 983:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
 984:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @retval None
 985:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   */
 986:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** #endif
 987:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
 988:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** {
 1552              		.loc 1 988 0
 1553              		.cfi_startproc
 1554 0000 80B5     		push	{r7, lr}
 1555              	.LCFI8:
 1556              		.cfi_def_cfa_offset 8
 1557              		.cfi_offset 7, -8
 1558              		.cfi_offset 14, -4
 1559 0002 8AB0     		sub	sp, sp, #40
 1560              	.LCFI9:
ARM GAS  /tmp/ccWvJRjM.s 			page 46


 1561              		.cfi_def_cfa_offset 48
 1562 0004 00AF     		add	r7, sp, #0
 1563              	.LCFI10:
 1564              		.cfi_def_cfa_register 7
 1565 0006 F860     		str	r0, [r7, #12]
 1566 0008 B960     		str	r1, [r7, #8]
 1567 000a 7A60     		str	r2, [r7, #4]
 989:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   GPIO_InitTypeDef gpio = {0};
 1568              		.loc 1 989 0
 1569 000c 1423     		movs	r3, #20
 1570 000e FB18     		adds	r3, r7, r3
 1571 0010 1800     		movs	r0, r3
 1572 0012 1423     		movs	r3, #20
 1573 0014 1A00     		movs	r2, r3
 1574 0016 0021     		movs	r1, #0
 1575 0018 FFF7FEFF 		bl	memset
 990:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
 991:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   /* Check the parameters */
 992:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   assert_param(IS_RCC_MCO(RCC_MCOx));
 993:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   assert_param(IS_RCC_MCODIV(RCC_MCODiv));
 994:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
 995:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   
 996:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   /* Configure the MCO1 pin in alternate function mode */
 997:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   gpio.Mode      = GPIO_MODE_AF_PP;
 1576              		.loc 1 997 0
 1577 001c 1423     		movs	r3, #20
 1578 001e FB18     		adds	r3, r7, r3
 1579 0020 0222     		movs	r2, #2
 1580 0022 5A60     		str	r2, [r3, #4]
 998:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 1581              		.loc 1 998 0
 1582 0024 1423     		movs	r3, #20
 1583 0026 FB18     		adds	r3, r7, r3
 1584 0028 0322     		movs	r2, #3
 1585 002a DA60     		str	r2, [r3, #12]
 999:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   gpio.Pull      = GPIO_NOPULL;
 1586              		.loc 1 999 0
 1587 002c 1423     		movs	r3, #20
 1588 002e FB18     		adds	r3, r7, r3
 1589 0030 0022     		movs	r2, #0
 1590 0032 9A60     		str	r2, [r3, #8]
1000:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   gpio.Pin       = MCO1_PIN;
 1591              		.loc 1 1000 0
 1592 0034 1423     		movs	r3, #20
 1593 0036 FB18     		adds	r3, r7, r3
 1594 0038 8022     		movs	r2, #128
 1595 003a 5200     		lsls	r2, r2, #1
 1596 003c 1A60     		str	r2, [r3]
1001:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   gpio.Alternate = GPIO_AF0_MCO;
 1597              		.loc 1 1001 0
 1598 003e 1423     		movs	r3, #20
 1599 0040 FB18     		adds	r3, r7, r3
 1600 0042 0022     		movs	r2, #0
 1601 0044 1A61     		str	r2, [r3, #16]
 1602              	.LBB4:
1002:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
1003:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   /* MCO1 Clock Enable */
ARM GAS  /tmp/ccWvJRjM.s 			page 47


1004:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   MCO1_CLK_ENABLE();
 1603              		.loc 1 1004 0
 1604 0046 124B     		ldr	r3, .L107
 1605 0048 114A     		ldr	r2, .L107
 1606 004a 5269     		ldr	r2, [r2, #20]
 1607 004c 8021     		movs	r1, #128
 1608 004e 8902     		lsls	r1, r1, #10
 1609 0050 0A43     		orrs	r2, r1
 1610 0052 5A61     		str	r2, [r3, #20]
 1611 0054 0E4B     		ldr	r3, .L107
 1612 0056 5A69     		ldr	r2, [r3, #20]
 1613 0058 8023     		movs	r3, #128
 1614 005a 9B02     		lsls	r3, r3, #10
 1615 005c 1340     		ands	r3, r2
 1616 005e 3B61     		str	r3, [r7, #16]
 1617 0060 3B69     		ldr	r3, [r7, #16]
 1618              	.LBE4:
1005:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   
1006:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 1619              		.loc 1 1006 0
 1620 0062 1423     		movs	r3, #20
 1621 0064 FA18     		adds	r2, r7, r3
 1622 0066 9023     		movs	r3, #144
 1623 0068 DB05     		lsls	r3, r3, #23
 1624 006a 1100     		movs	r1, r2
 1625 006c 1800     		movs	r0, r3
 1626 006e FFF7FEFF 		bl	HAL_GPIO_Init
1007:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   
1008:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   /* Configure the MCO clock source */
1009:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 1627              		.loc 1 1009 0
 1628 0072 074B     		ldr	r3, .L107
 1629 0074 064A     		ldr	r2, .L107
 1630 0076 5268     		ldr	r2, [r2, #4]
 1631 0078 0649     		ldr	r1, .L107+4
 1632 007a 1140     		ands	r1, r2
 1633 007c B868     		ldr	r0, [r7, #8]
 1634 007e 7A68     		ldr	r2, [r7, #4]
 1635 0080 0243     		orrs	r2, r0
 1636 0082 0A43     		orrs	r2, r1
 1637 0084 5A60     		str	r2, [r3, #4]
1010:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** }
 1638              		.loc 1 1010 0
 1639 0086 C046     		nop
 1640 0088 BD46     		mov	sp, r7
 1641 008a 0AB0     		add	sp, sp, #40
 1642              		@ sp needed
 1643 008c 80BD     		pop	{r7, pc}
 1644              	.L108:
 1645 008e C046     		.align	2
 1646              	.L107:
 1647 0090 00100240 		.word	1073876992
 1648 0094 FFFFFF80 		.word	-2130706433
 1649              		.cfi_endproc
 1650              	.LFE38:
 1652              		.section	.text.HAL_RCC_EnableCSS,"ax",%progbits
 1653              		.align	1
ARM GAS  /tmp/ccWvJRjM.s 			page 48


 1654              		.global	HAL_RCC_EnableCSS
 1655              		.syntax unified
 1656              		.code	16
 1657              		.thumb_func
 1658              		.fpu softvfp
 1660              	HAL_RCC_EnableCSS:
 1661              	.LFB39:
1011:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
1012:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** /**
1013:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @brief  Enables the Clock Security System.
1014:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @note   If a failure is detected on the HSE oscillator clock, this oscillator
1015:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *         is automatically disabled and an interrupt is generated to inform the
1016:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *         software about the failure (Clock Security System Interrupt, CSSI),
1017:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *         allowing the MCU to perform rescue operations. The CSSI is linked to 
1018:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *         the Cortex-M0 NMI (Non-Maskable Interrupt) exception vector.  
1019:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @retval None
1020:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   */
1021:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** void HAL_RCC_EnableCSS(void)
1022:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** {
 1662              		.loc 1 1022 0
 1663              		.cfi_startproc
 1664 0000 80B5     		push	{r7, lr}
 1665              	.LCFI11:
 1666              		.cfi_def_cfa_offset 8
 1667              		.cfi_offset 7, -8
 1668              		.cfi_offset 14, -4
 1669 0002 00AF     		add	r7, sp, #0
 1670              	.LCFI12:
 1671              		.cfi_def_cfa_register 7
1023:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 1672              		.loc 1 1023 0
 1673 0004 044B     		ldr	r3, .L110
 1674 0006 044A     		ldr	r2, .L110
 1675 0008 1268     		ldr	r2, [r2]
 1676 000a 8021     		movs	r1, #128
 1677 000c 0903     		lsls	r1, r1, #12
 1678 000e 0A43     		orrs	r2, r1
 1679 0010 1A60     		str	r2, [r3]
1024:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** }
 1680              		.loc 1 1024 0
 1681 0012 C046     		nop
 1682 0014 BD46     		mov	sp, r7
 1683              		@ sp needed
 1684 0016 80BD     		pop	{r7, pc}
 1685              	.L111:
 1686              		.align	2
 1687              	.L110:
 1688 0018 00100240 		.word	1073876992
 1689              		.cfi_endproc
 1690              	.LFE39:
 1692              		.section	.text.HAL_RCC_DisableCSS,"ax",%progbits
 1693              		.align	1
 1694              		.global	HAL_RCC_DisableCSS
 1695              		.syntax unified
 1696              		.code	16
 1697              		.thumb_func
 1698              		.fpu softvfp
ARM GAS  /tmp/ccWvJRjM.s 			page 49


 1700              	HAL_RCC_DisableCSS:
 1701              	.LFB40:
1025:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
1026:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** /**
1027:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @brief  Disables the Clock Security System.
1028:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @retval None
1029:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   */
1030:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** void HAL_RCC_DisableCSS(void)
1031:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** {
 1702              		.loc 1 1031 0
 1703              		.cfi_startproc
 1704 0000 80B5     		push	{r7, lr}
 1705              	.LCFI13:
 1706              		.cfi_def_cfa_offset 8
 1707              		.cfi_offset 7, -8
 1708              		.cfi_offset 14, -4
 1709 0002 00AF     		add	r7, sp, #0
 1710              	.LCFI14:
 1711              		.cfi_def_cfa_register 7
1032:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   CLEAR_BIT(RCC->CR, RCC_CR_CSSON) ;
 1712              		.loc 1 1032 0
 1713 0004 044B     		ldr	r3, .L113
 1714 0006 044A     		ldr	r2, .L113
 1715 0008 1268     		ldr	r2, [r2]
 1716 000a 0449     		ldr	r1, .L113+4
 1717 000c 0A40     		ands	r2, r1
 1718 000e 1A60     		str	r2, [r3]
1033:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** }
 1719              		.loc 1 1033 0
 1720 0010 C046     		nop
 1721 0012 BD46     		mov	sp, r7
 1722              		@ sp needed
 1723 0014 80BD     		pop	{r7, pc}
 1724              	.L114:
 1725 0016 C046     		.align	2
 1726              	.L113:
 1727 0018 00100240 		.word	1073876992
 1728 001c FFFFF7FF 		.word	-524289
 1729              		.cfi_endproc
 1730              	.LFE40:
 1732              		.global	__aeabi_uidiv
 1733              		.section	.rodata
 1734              		.align	2
 1735              	.LC0:
 1736 0000 02       		.byte	2
 1737 0001 03       		.byte	3
 1738 0002 04       		.byte	4
 1739 0003 05       		.byte	5
 1740 0004 06       		.byte	6
 1741 0005 07       		.byte	7
 1742 0006 08       		.byte	8
 1743 0007 09       		.byte	9
 1744 0008 0A       		.byte	10
 1745 0009 0B       		.byte	11
 1746 000a 0C       		.byte	12
 1747 000b 0D       		.byte	13
 1748 000c 0E       		.byte	14
ARM GAS  /tmp/ccWvJRjM.s 			page 50


 1749 000d 0F       		.byte	15
 1750 000e 10       		.byte	16
 1751 000f 10       		.byte	16
 1752              		.align	2
 1753              	.LC1:
 1754 0010 01       		.byte	1
 1755 0011 02       		.byte	2
 1756 0012 03       		.byte	3
 1757 0013 04       		.byte	4
 1758 0014 05       		.byte	5
 1759 0015 06       		.byte	6
 1760 0016 07       		.byte	7
 1761 0017 08       		.byte	8
 1762 0018 09       		.byte	9
 1763 0019 0A       		.byte	10
 1764 001a 0B       		.byte	11
 1765 001b 0C       		.byte	12
 1766 001c 0D       		.byte	13
 1767 001d 0E       		.byte	14
 1768 001e 0F       		.byte	15
 1769 001f 10       		.byte	16
 1770              		.section	.text.HAL_RCC_GetSysClockFreq,"ax",%progbits
 1771              		.align	1
 1772              		.global	HAL_RCC_GetSysClockFreq
 1773              		.syntax unified
 1774              		.code	16
 1775              		.thumb_func
 1776              		.fpu softvfp
 1778              	HAL_RCC_GetSysClockFreq:
 1779              	.LFB41:
1034:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
1035:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** /**
1036:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @brief  Returns the SYSCLK frequency     
1037:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @note   The system frequency computed by this function is not the real 
1038:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *         frequency in the chip. It is calculated based on the predefined 
1039:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *         constant and the selected clock source:
1040:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @note     If SYSCLK source is HSI, function returns values based on HSI_VALUE(*)
1041:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @note     If SYSCLK source is HSE, function returns a value based on HSE_VALUE
1042:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *           divided by PREDIV factor(**)
1043:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @note     If SYSCLK source is PLL, function returns a value based on HSE_VALUE
1044:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *           divided by PREDIV factor(**) or depending on STM32F0xxxx devices either a value based
1045:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *           on HSI_VALUE divided by 2 or HSI_VALUE divided by PREDIV factor(*) multiplied by the 
1046:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *           PLL factor.
1047:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @note     (*) HSI_VALUE is a constant defined in stm32f0xx_hal_conf.h file (default value
1048:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *               8 MHz) but the real value may vary depending on the variations
1049:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *               in voltage and temperature.
1050:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @note     (**) HSE_VALUE is a constant defined in stm32f0xx_hal_conf.h file (default value
1051:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *                8 MHz), user has to ensure that HSE_VALUE is same as the real
1052:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *                frequency of the crystal used. Otherwise, this function may
1053:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *                have wrong result.
1054:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *                  
1055:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @note   The result of this function could be not correct when using fractional
1056:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *         value for HSE crystal.
1057:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *           
1058:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @note   This function can be used by the user application to compute the 
1059:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *         baud-rate for the communication peripherals or configure other parameters.
1060:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *           
ARM GAS  /tmp/ccWvJRjM.s 			page 51


1061:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @note   Each time SYSCLK changes, this function must be called to update the
1062:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *         right SYSCLK value. Otherwise, any configuration based on this function will be incorre
1063:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *         
1064:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @retval SYSCLK frequency
1065:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   */
1066:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** uint32_t HAL_RCC_GetSysClockFreq(void)
1067:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** {
 1780              		.loc 1 1067 0
 1781              		.cfi_startproc
 1782 0000 80B5     		push	{r7, lr}
 1783              	.LCFI15:
 1784              		.cfi_def_cfa_offset 8
 1785              		.cfi_offset 7, -8
 1786              		.cfi_offset 14, -4
 1787 0002 8EB0     		sub	sp, sp, #56
 1788              	.LCFI16:
 1789              		.cfi_def_cfa_offset 64
 1790 0004 00AF     		add	r7, sp, #0
 1791              	.LCFI17:
 1792              		.cfi_def_cfa_register 7
1068:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 1793              		.loc 1 1068 0
 1794 0006 1423     		movs	r3, #20
 1795 0008 FA18     		adds	r2, r7, r3
 1796 000a 394B     		ldr	r3, .L126
 1797 000c 1000     		movs	r0, r2
 1798 000e 1900     		movs	r1, r3
 1799 0010 1023     		movs	r3, #16
 1800 0012 1A00     		movs	r2, r3
 1801 0014 FFF7FEFF 		bl	memcpy
1069:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****                                          10, 11, 12, 13, 14, 15, 16, 16};
1070:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 1802              		.loc 1 1070 0
 1803 0018 3A1D     		adds	r2, r7, #4
 1804 001a 364B     		ldr	r3, .L126+4
 1805 001c 1000     		movs	r0, r2
 1806 001e 1900     		movs	r1, r3
 1807 0020 1023     		movs	r3, #16
 1808 0022 1A00     		movs	r2, r3
 1809 0024 FFF7FEFF 		bl	memcpy
1071:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****                                            9,10, 11, 12, 13, 14, 15, 16};
1072:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
1073:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
 1810              		.loc 1 1073 0
 1811 0028 0023     		movs	r3, #0
 1812 002a FB62     		str	r3, [r7, #44]
 1813 002c 0023     		movs	r3, #0
 1814 002e BB62     		str	r3, [r7, #40]
 1815 0030 0023     		movs	r3, #0
 1816 0032 7B63     		str	r3, [r7, #52]
 1817 0034 0023     		movs	r3, #0
 1818 0036 7B62     		str	r3, [r7, #36]
1074:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   uint32_t sysclockfreq = 0;
 1819              		.loc 1 1074 0
 1820 0038 0023     		movs	r3, #0
 1821 003a 3B63     		str	r3, [r7, #48]
1075:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   
ARM GAS  /tmp/ccWvJRjM.s 			page 52


1076:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   tmpreg = RCC->CFGR;
 1822              		.loc 1 1076 0
 1823 003c 2E4B     		ldr	r3, .L126+8
 1824 003e 5B68     		ldr	r3, [r3, #4]
 1825 0040 FB62     		str	r3, [r7, #44]
1077:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   
1078:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   /* Get SYSCLK source -------------------------------------------------------*/
1079:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   switch (tmpreg & RCC_CFGR_SWS)
 1826              		.loc 1 1079 0
 1827 0042 FB6A     		ldr	r3, [r7, #44]
 1828 0044 0C22     		movs	r2, #12
 1829 0046 1340     		ands	r3, r2
 1830 0048 082B     		cmp	r3, #8
 1831 004a 06D0     		beq	.L117
 1832 004c 0C2B     		cmp	r3, #12
 1833 004e 43D0     		beq	.L118
 1834 0050 042B     		cmp	r3, #4
 1835 0052 44D1     		bne	.L125
1080:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   {
1081:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
1082:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     {
1083:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       sysclockfreq = HSE_VALUE;
 1836              		.loc 1 1083 0
 1837 0054 294B     		ldr	r3, .L126+12
 1838 0056 3B63     		str	r3, [r7, #48]
1084:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       break;
 1839              		.loc 1 1084 0
 1840 0058 44E0     		b	.L120
 1841              	.L117:
1085:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     }
1086:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
1087:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     {
1088:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER
 1842              		.loc 1 1088 0
 1843 005a FB6A     		ldr	r3, [r7, #44]
 1844 005c 9B0C     		lsrs	r3, r3, #18
 1845 005e 0F22     		movs	r2, #15
 1846 0060 1340     		ands	r3, r2
 1847 0062 1422     		movs	r2, #20
 1848 0064 BA18     		adds	r2, r7, r2
 1849 0066 D35C     		ldrb	r3, [r2, r3]
 1850 0068 7B62     		str	r3, [r7, #36]
1089:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BIT
 1851              		.loc 1 1089 0
 1852 006a 234B     		ldr	r3, .L126+8
 1853 006c DB6A     		ldr	r3, [r3, #44]
 1854 006e 0F22     		movs	r2, #15
 1855 0070 1340     		ands	r3, r2
 1856 0072 3A1D     		adds	r2, r7, #4
 1857 0074 D35C     		ldrb	r3, [r2, r3]
 1858 0076 BB62     		str	r3, [r7, #40]
1090:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 1859              		.loc 1 1090 0
 1860 0078 FA6A     		ldr	r2, [r7, #44]
 1861 007a C023     		movs	r3, #192
 1862 007c 5B02     		lsls	r3, r3, #9
 1863 007e 1A40     		ands	r2, r3
ARM GAS  /tmp/ccWvJRjM.s 			page 53


 1864 0080 8023     		movs	r3, #128
 1865 0082 5B02     		lsls	r3, r3, #9
 1866 0084 9A42     		cmp	r2, r3
 1867 0086 09D1     		bne	.L121
1091:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       {
1092:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
1093:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         pllclk = (HSE_VALUE / prediv) * pllmul;
 1868              		.loc 1 1093 0
 1869 0088 B96A     		ldr	r1, [r7, #40]
 1870 008a 1C48     		ldr	r0, .L126+12
 1871 008c FFF7FEFF 		bl	__aeabi_uidiv
 1872              	.LVL0:
 1873 0090 0300     		movs	r3, r0
 1874 0092 1A00     		movs	r2, r3
 1875 0094 7B6A     		ldr	r3, [r7, #36]
 1876 0096 5343     		muls	r3, r2
 1877 0098 7B63     		str	r3, [r7, #52]
 1878 009a 1AE0     		b	.L122
 1879              	.L121:
1094:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       }
1095:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** #if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
1096:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 1880              		.loc 1 1096 0
 1881 009c FA6A     		ldr	r2, [r7, #44]
 1882 009e C023     		movs	r3, #192
 1883 00a0 5B02     		lsls	r3, r3, #9
 1884 00a2 1A40     		ands	r2, r3
 1885 00a4 C023     		movs	r3, #192
 1886 00a6 5B02     		lsls	r3, r3, #9
 1887 00a8 9A42     		cmp	r2, r3
 1888 00aa 09D1     		bne	.L123
1097:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       {
1098:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
1099:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         pllclk = (HSI48_VALUE / prediv) * pllmul;
 1889              		.loc 1 1099 0
 1890 00ac B96A     		ldr	r1, [r7, #40]
 1891 00ae 1448     		ldr	r0, .L126+16
 1892 00b0 FFF7FEFF 		bl	__aeabi_uidiv
 1893              	.LVL1:
 1894 00b4 0300     		movs	r3, r0
 1895 00b6 1A00     		movs	r2, r3
 1896 00b8 7B6A     		ldr	r3, [r7, #36]
 1897 00ba 5343     		muls	r3, r2
 1898 00bc 7B63     		str	r3, [r7, #52]
 1899 00be 08E0     		b	.L122
 1900              	.L123:
1100:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       }
1101:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** #endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
1102:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       else
1103:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       {
1104:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** #if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) 
1105:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
1106:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         pllclk = (HSI_VALUE / prediv) * pllmul;
 1901              		.loc 1 1106 0
 1902 00c0 B96A     		ldr	r1, [r7, #40]
 1903 00c2 0E48     		ldr	r0, .L126+12
 1904 00c4 FFF7FEFF 		bl	__aeabi_uidiv
ARM GAS  /tmp/ccWvJRjM.s 			page 54


 1905              	.LVL2:
 1906 00c8 0300     		movs	r3, r0
 1907 00ca 1A00     		movs	r2, r3
 1908 00cc 7B6A     		ldr	r3, [r7, #36]
 1909 00ce 5343     		muls	r3, r2
 1910 00d0 7B63     		str	r3, [r7, #52]
 1911              	.L122:
1107:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** #else
1108:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
1109:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****         pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
1110:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** #endif
1111:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       }
1112:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       sysclockfreq = pllclk;
 1912              		.loc 1 1112 0
 1913 00d2 7B6B     		ldr	r3, [r7, #52]
 1914 00d4 3B63     		str	r3, [r7, #48]
1113:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       break;
 1915              		.loc 1 1113 0
 1916 00d6 05E0     		b	.L120
 1917              	.L118:
1114:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     }
1115:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** #if defined(RCC_CFGR_SWS_HSI48)
1116:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
1117:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     {
1118:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       sysclockfreq = HSI48_VALUE;
 1918              		.loc 1 1118 0
 1919 00d8 094B     		ldr	r3, .L126+16
 1920 00da 3B63     		str	r3, [r7, #48]
1119:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       break;
 1921              		.loc 1 1119 0
 1922 00dc 02E0     		b	.L120
 1923              	.L125:
1120:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     }
1121:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** #endif /* RCC_CFGR_SWS_HSI48 */
1122:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
1123:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     default: /* HSI used as system clock */
1124:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     {
1125:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       sysclockfreq = HSI_VALUE;
 1924              		.loc 1 1125 0
 1925 00de 074B     		ldr	r3, .L126+12
 1926 00e0 3B63     		str	r3, [r7, #48]
1126:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****       break;
 1927              		.loc 1 1126 0
 1928 00e2 C046     		nop
 1929              	.L120:
1127:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     }
1128:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   }
1129:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   return sysclockfreq;
 1930              		.loc 1 1129 0
 1931 00e4 3B6B     		ldr	r3, [r7, #48]
1130:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** }
 1932              		.loc 1 1130 0
 1933 00e6 1800     		movs	r0, r3
 1934 00e8 BD46     		mov	sp, r7
 1935 00ea 0EB0     		add	sp, sp, #56
 1936              		@ sp needed
 1937 00ec 80BD     		pop	{r7, pc}
ARM GAS  /tmp/ccWvJRjM.s 			page 55


 1938              	.L127:
 1939 00ee C046     		.align	2
 1940              	.L126:
 1941 00f0 00000000 		.word	.LC0
 1942 00f4 10000000 		.word	.LC1
 1943 00f8 00100240 		.word	1073876992
 1944 00fc 00127A00 		.word	8000000
 1945 0100 006CDC02 		.word	48000000
 1946              		.cfi_endproc
 1947              	.LFE41:
 1949              		.section	.text.HAL_RCC_GetHCLKFreq,"ax",%progbits
 1950              		.align	1
 1951              		.global	HAL_RCC_GetHCLKFreq
 1952              		.syntax unified
 1953              		.code	16
 1954              		.thumb_func
 1955              		.fpu softvfp
 1957              	HAL_RCC_GetHCLKFreq:
 1958              	.LFB42:
1131:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
1132:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** /**
1133:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @brief  Returns the HCLK frequency     
1134:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @note   Each time HCLK changes, this function must be called to update the
1135:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *         right HCLK value. Otherwise, any configuration based on this function will be incorrect
1136:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * 
1137:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
1138:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *         and updated within this function
1139:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @retval HCLK frequency
1140:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   */
1141:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** uint32_t HAL_RCC_GetHCLKFreq(void)
1142:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** {
 1959              		.loc 1 1142 0
 1960              		.cfi_startproc
 1961 0000 80B5     		push	{r7, lr}
 1962              	.LCFI18:
 1963              		.cfi_def_cfa_offset 8
 1964              		.cfi_offset 7, -8
 1965              		.cfi_offset 14, -4
 1966 0002 00AF     		add	r7, sp, #0
 1967              	.LCFI19:
 1968              		.cfi_def_cfa_register 7
1143:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   return SystemCoreClock;
 1969              		.loc 1 1143 0
 1970 0004 024B     		ldr	r3, .L130
 1971 0006 1B68     		ldr	r3, [r3]
1144:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** }
 1972              		.loc 1 1144 0
 1973 0008 1800     		movs	r0, r3
 1974 000a BD46     		mov	sp, r7
 1975              		@ sp needed
 1976 000c 80BD     		pop	{r7, pc}
 1977              	.L131:
 1978 000e C046     		.align	2
 1979              	.L130:
 1980 0010 00000000 		.word	SystemCoreClock
 1981              		.cfi_endproc
 1982              	.LFE42:
ARM GAS  /tmp/ccWvJRjM.s 			page 56


 1984              		.section	.text.HAL_RCC_GetPCLK1Freq,"ax",%progbits
 1985              		.align	1
 1986              		.global	HAL_RCC_GetPCLK1Freq
 1987              		.syntax unified
 1988              		.code	16
 1989              		.thumb_func
 1990              		.fpu softvfp
 1992              	HAL_RCC_GetPCLK1Freq:
 1993              	.LFB43:
1145:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
1146:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** /**
1147:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @brief  Returns the PCLK1 frequency     
1148:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @note   Each time PCLK1 changes, this function must be called to update the
1149:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrec
1150:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @retval PCLK1 frequency
1151:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   */
1152:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** uint32_t HAL_RCC_GetPCLK1Freq(void)
1153:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** {
 1994              		.loc 1 1153 0
 1995              		.cfi_startproc
 1996 0000 80B5     		push	{r7, lr}
 1997              	.LCFI20:
 1998              		.cfi_def_cfa_offset 8
 1999              		.cfi_offset 7, -8
 2000              		.cfi_offset 14, -4
 2001 0002 00AF     		add	r7, sp, #0
 2002              	.LCFI21:
 2003              		.cfi_def_cfa_register 7
1154:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
1155:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNU
 2004              		.loc 1 1155 0
 2005 0004 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 2006 0008 0100     		movs	r1, r0
 2007 000a 064B     		ldr	r3, .L134
 2008 000c 5B68     		ldr	r3, [r3, #4]
 2009 000e 1B0A     		lsrs	r3, r3, #8
 2010 0010 0722     		movs	r2, #7
 2011 0012 1340     		ands	r3, r2
 2012 0014 044A     		ldr	r2, .L134+4
 2013 0016 D35C     		ldrb	r3, [r2, r3]
 2014 0018 D940     		lsrs	r1, r1, r3
 2015 001a 0B00     		movs	r3, r1
1156:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** }    
 2016              		.loc 1 1156 0
 2017 001c 1800     		movs	r0, r3
 2018 001e BD46     		mov	sp, r7
 2019              		@ sp needed
 2020 0020 80BD     		pop	{r7, pc}
 2021              	.L135:
 2022 0022 C046     		.align	2
 2023              	.L134:
 2024 0024 00100240 		.word	1073876992
 2025 0028 00000000 		.word	APBPrescTable
 2026              		.cfi_endproc
 2027              	.LFE43:
 2029              		.section	.text.HAL_RCC_GetOscConfig,"ax",%progbits
 2030              		.align	1
ARM GAS  /tmp/ccWvJRjM.s 			page 57


 2031              		.global	HAL_RCC_GetOscConfig
 2032              		.syntax unified
 2033              		.code	16
 2034              		.thumb_func
 2035              		.fpu softvfp
 2037              	HAL_RCC_GetOscConfig:
 2038              	.LFB44:
1157:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
1158:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** /**
1159:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @brief  Configures the RCC_OscInitStruct according to the internal 
1160:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * RCC configuration registers.
1161:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that 
1162:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * will be configured.
1163:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @retval None
1164:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   */
1165:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
1166:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** {
 2039              		.loc 1 1166 0
 2040              		.cfi_startproc
 2041 0000 80B5     		push	{r7, lr}
 2042              	.LCFI22:
 2043              		.cfi_def_cfa_offset 8
 2044              		.cfi_offset 7, -8
 2045              		.cfi_offset 14, -4
 2046 0002 82B0     		sub	sp, sp, #8
 2047              	.LCFI23:
 2048              		.cfi_def_cfa_offset 16
 2049 0004 00AF     		add	r7, sp, #0
 2050              	.LCFI24:
 2051              		.cfi_def_cfa_register 7
 2052 0006 7860     		str	r0, [r7, #4]
1167:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   /* Check the parameters */
1168:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   assert_param(RCC_OscInitStruct != NULL);
1169:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
1170:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   /* Set all possible values for the Oscillator type parameter ---------------*/
1171:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI  \
 2053              		.loc 1 1171 0
 2054 0008 7B68     		ldr	r3, [r7, #4]
 2055 000a 1F22     		movs	r2, #31
 2056 000c 1A60     		str	r2, [r3]
1172:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****                   | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSI14;
1173:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** #if defined(RCC_HSI48_SUPPORT)
1174:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   RCC_OscInitStruct->OscillatorType |= RCC_OSCILLATORTYPE_HSI48;
 2057              		.loc 1 1174 0
 2058 000e 7B68     		ldr	r3, [r7, #4]
 2059 0010 1B68     		ldr	r3, [r3]
 2060 0012 2022     		movs	r2, #32
 2061 0014 1A43     		orrs	r2, r3
 2062 0016 7B68     		ldr	r3, [r7, #4]
 2063 0018 1A60     		str	r2, [r3]
1175:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** #endif /* RCC_HSI48_SUPPORT */
1176:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
1177:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
1178:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   /* Get the HSE configuration -----------------------------------------------*/
1179:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 2064              		.loc 1 1179 0
 2065 001a 4E4B     		ldr	r3, .L151
ARM GAS  /tmp/ccWvJRjM.s 			page 58


 2066 001c 1A68     		ldr	r2, [r3]
 2067 001e 8023     		movs	r3, #128
 2068 0020 DB02     		lsls	r3, r3, #11
 2069 0022 1A40     		ands	r2, r3
 2070 0024 8023     		movs	r3, #128
 2071 0026 DB02     		lsls	r3, r3, #11
 2072 0028 9A42     		cmp	r2, r3
 2073 002a 03D1     		bne	.L137
1180:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   {
1181:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 2074              		.loc 1 1181 0
 2075 002c 7B68     		ldr	r3, [r7, #4]
 2076 002e 0522     		movs	r2, #5
 2077 0030 5A60     		str	r2, [r3, #4]
 2078 0032 0FE0     		b	.L138
 2079              	.L137:
1182:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   }
1183:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 2080              		.loc 1 1183 0
 2081 0034 474B     		ldr	r3, .L151
 2082 0036 1A68     		ldr	r2, [r3]
 2083 0038 8023     		movs	r3, #128
 2084 003a 5B02     		lsls	r3, r3, #9
 2085 003c 1A40     		ands	r2, r3
 2086 003e 8023     		movs	r3, #128
 2087 0040 5B02     		lsls	r3, r3, #9
 2088 0042 9A42     		cmp	r2, r3
 2089 0044 03D1     		bne	.L139
1184:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   {
1185:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 2090              		.loc 1 1185 0
 2091 0046 7B68     		ldr	r3, [r7, #4]
 2092 0048 0122     		movs	r2, #1
 2093 004a 5A60     		str	r2, [r3, #4]
 2094 004c 02E0     		b	.L138
 2095              	.L139:
1186:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   }
1187:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   else
1188:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   {
1189:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 2096              		.loc 1 1189 0
 2097 004e 7B68     		ldr	r3, [r7, #4]
 2098 0050 0022     		movs	r2, #0
 2099 0052 5A60     		str	r2, [r3, #4]
 2100              	.L138:
1190:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   }
1191:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
1192:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   /* Get the HSI configuration -----------------------------------------------*/
1193:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 2101              		.loc 1 1193 0
 2102 0054 3F4B     		ldr	r3, .L151
 2103 0056 1B68     		ldr	r3, [r3]
 2104 0058 0122     		movs	r2, #1
 2105 005a 1340     		ands	r3, r2
 2106 005c 012B     		cmp	r3, #1
 2107 005e 03D1     		bne	.L140
1194:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   {
ARM GAS  /tmp/ccWvJRjM.s 			page 59


1195:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 2108              		.loc 1 1195 0
 2109 0060 7B68     		ldr	r3, [r7, #4]
 2110 0062 0122     		movs	r2, #1
 2111 0064 DA60     		str	r2, [r3, #12]
 2112 0066 02E0     		b	.L141
 2113              	.L140:
1196:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   }
1197:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   else
1198:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   {
1199:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 2114              		.loc 1 1199 0
 2115 0068 7B68     		ldr	r3, [r7, #4]
 2116 006a 0022     		movs	r2, #0
 2117 006c DA60     		str	r2, [r3, #12]
 2118              	.L141:
1200:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   }
1201:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   
1202:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_B
 2119              		.loc 1 1202 0
 2120 006e 394B     		ldr	r3, .L151
 2121 0070 1B68     		ldr	r3, [r3]
 2122 0072 DB08     		lsrs	r3, r3, #3
 2123 0074 1F22     		movs	r2, #31
 2124 0076 1A40     		ands	r2, r3
 2125 0078 7B68     		ldr	r3, [r7, #4]
 2126 007a 1A61     		str	r2, [r3, #16]
1203:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   
1204:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   /* Get the LSE configuration -----------------------------------------------*/
1205:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 2127              		.loc 1 1205 0
 2128 007c 354B     		ldr	r3, .L151
 2129 007e 1B6A     		ldr	r3, [r3, #32]
 2130 0080 0422     		movs	r2, #4
 2131 0082 1340     		ands	r3, r2
 2132 0084 042B     		cmp	r3, #4
 2133 0086 03D1     		bne	.L142
1206:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   {
1207:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 2134              		.loc 1 1207 0
 2135 0088 7B68     		ldr	r3, [r7, #4]
 2136 008a 0522     		movs	r2, #5
 2137 008c 9A60     		str	r2, [r3, #8]
 2138 008e 0CE0     		b	.L143
 2139              	.L142:
1208:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   }
1209:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 2140              		.loc 1 1209 0
 2141 0090 304B     		ldr	r3, .L151
 2142 0092 1B6A     		ldr	r3, [r3, #32]
 2143 0094 0122     		movs	r2, #1
 2144 0096 1340     		ands	r3, r2
 2145 0098 012B     		cmp	r3, #1
 2146 009a 03D1     		bne	.L144
1210:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   {
1211:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 2147              		.loc 1 1211 0
ARM GAS  /tmp/ccWvJRjM.s 			page 60


 2148 009c 7B68     		ldr	r3, [r7, #4]
 2149 009e 0122     		movs	r2, #1
 2150 00a0 9A60     		str	r2, [r3, #8]
 2151 00a2 02E0     		b	.L143
 2152              	.L144:
1212:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   }
1213:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   else
1214:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   {
1215:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 2153              		.loc 1 1215 0
 2154 00a4 7B68     		ldr	r3, [r7, #4]
 2155 00a6 0022     		movs	r2, #0
 2156 00a8 9A60     		str	r2, [r3, #8]
 2157              	.L143:
1216:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   }
1217:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   
1218:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   /* Get the LSI configuration -----------------------------------------------*/
1219:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 2158              		.loc 1 1219 0
 2159 00aa 2A4B     		ldr	r3, .L151
 2160 00ac 5B6A     		ldr	r3, [r3, #36]
 2161 00ae 0122     		movs	r2, #1
 2162 00b0 1340     		ands	r3, r2
 2163 00b2 012B     		cmp	r3, #1
 2164 00b4 03D1     		bne	.L145
1220:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   {
1221:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 2165              		.loc 1 1221 0
 2166 00b6 7B68     		ldr	r3, [r7, #4]
 2167 00b8 0122     		movs	r2, #1
 2168 00ba DA61     		str	r2, [r3, #28]
 2169 00bc 02E0     		b	.L146
 2170              	.L145:
1222:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   }
1223:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   else
1224:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   {
1225:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 2171              		.loc 1 1225 0
 2172 00be 7B68     		ldr	r3, [r7, #4]
 2173 00c0 0022     		movs	r2, #0
 2174 00c2 DA61     		str	r2, [r3, #28]
 2175              	.L146:
1226:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   }
1227:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   
1228:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   /* Get the HSI14 configuration -----------------------------------------------*/
1229:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   if((RCC->CR2 & RCC_CR2_HSI14ON) == RCC_CR2_HSI14ON)
 2176              		.loc 1 1229 0
 2177 00c4 234B     		ldr	r3, .L151
 2178 00c6 5B6B     		ldr	r3, [r3, #52]
 2179 00c8 0122     		movs	r2, #1
 2180 00ca 1340     		ands	r3, r2
 2181 00cc 012B     		cmp	r3, #1
 2182 00ce 03D1     		bne	.L147
1230:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   {
1231:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     RCC_OscInitStruct->HSI14State = RCC_HSI_ON;
 2183              		.loc 1 1231 0
 2184 00d0 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccWvJRjM.s 			page 61


 2185 00d2 0122     		movs	r2, #1
 2186 00d4 5A61     		str	r2, [r3, #20]
 2187 00d6 02E0     		b	.L148
 2188              	.L147:
1232:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   }
1233:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   else
1234:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   {
1235:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     RCC_OscInitStruct->HSI14State = RCC_HSI_OFF;
 2189              		.loc 1 1235 0
 2190 00d8 7B68     		ldr	r3, [r7, #4]
 2191 00da 0022     		movs	r2, #0
 2192 00dc 5A61     		str	r2, [r3, #20]
 2193              	.L148:
1236:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   }
1237:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
1238:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   RCC_OscInitStruct->HSI14CalibrationValue = (uint32_t)((RCC->CR2 & RCC_CR2_HSI14TRIM) >> RCC_HSI14
 2194              		.loc 1 1238 0
 2195 00de 1D4B     		ldr	r3, .L151
 2196 00e0 5B6B     		ldr	r3, [r3, #52]
 2197 00e2 DB08     		lsrs	r3, r3, #3
 2198 00e4 1F22     		movs	r2, #31
 2199 00e6 1A40     		ands	r2, r3
 2200 00e8 7B68     		ldr	r3, [r7, #4]
 2201 00ea 9A61     		str	r2, [r3, #24]
1239:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   
1240:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** #if defined(RCC_HSI48_SUPPORT)
1241:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   /* Get the HSI48 configuration if any-----------------------------------------*/
1242:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   RCC_OscInitStruct->HSI48State = __HAL_RCC_GET_HSI48_STATE();
 2202              		.loc 1 1242 0
 2203 00ec 194B     		ldr	r3, .L151
 2204 00ee 5A6B     		ldr	r2, [r3, #52]
 2205 00f0 8023     		movs	r3, #128
 2206 00f2 5B02     		lsls	r3, r3, #9
 2207 00f4 1340     		ands	r3, r2
 2208 00f6 5A1E     		subs	r2, r3, #1
 2209 00f8 9341     		sbcs	r3, r3, r2
 2210 00fa DBB2     		uxtb	r3, r3
 2211 00fc 1A00     		movs	r2, r3
 2212 00fe 7B68     		ldr	r3, [r7, #4]
 2213 0100 1A62     		str	r2, [r3, #32]
1243:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** #endif /* RCC_HSI48_SUPPORT */
1244:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
1245:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   /* Get the PLL configuration -----------------------------------------------*/
1246:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 2214              		.loc 1 1246 0
 2215 0102 144B     		ldr	r3, .L151
 2216 0104 1A68     		ldr	r2, [r3]
 2217 0106 8023     		movs	r3, #128
 2218 0108 5B04     		lsls	r3, r3, #17
 2219 010a 1A40     		ands	r2, r3
 2220 010c 8023     		movs	r3, #128
 2221 010e 5B04     		lsls	r3, r3, #17
 2222 0110 9A42     		cmp	r2, r3
 2223 0112 03D1     		bne	.L149
1247:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   {
1248:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 2224              		.loc 1 1248 0
ARM GAS  /tmp/ccWvJRjM.s 			page 62


 2225 0114 7B68     		ldr	r3, [r7, #4]
 2226 0116 0222     		movs	r2, #2
 2227 0118 5A62     		str	r2, [r3, #36]
 2228 011a 02E0     		b	.L150
 2229              	.L149:
1249:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   }
1250:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   else
1251:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   {
1252:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 2230              		.loc 1 1252 0
 2231 011c 7B68     		ldr	r3, [r7, #4]
 2232 011e 0122     		movs	r2, #1
 2233 0120 5A62     		str	r2, [r3, #36]
 2234              	.L150:
1253:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   }
1254:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLSRC);
 2235              		.loc 1 1254 0
 2236 0122 0C4B     		ldr	r3, .L151
 2237 0124 5A68     		ldr	r2, [r3, #4]
 2238 0126 C023     		movs	r3, #192
 2239 0128 5B02     		lsls	r3, r3, #9
 2240 012a 1A40     		ands	r2, r3
 2241 012c 7B68     		ldr	r3, [r7, #4]
 2242 012e 9A62     		str	r2, [r3, #40]
1255:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLMUL = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLMUL);
 2243              		.loc 1 1255 0
 2244 0130 084B     		ldr	r3, .L151
 2245 0132 5A68     		ldr	r2, [r3, #4]
 2246 0134 F023     		movs	r3, #240
 2247 0136 9B03     		lsls	r3, r3, #14
 2248 0138 1A40     		ands	r2, r3
 2249 013a 7B68     		ldr	r3, [r7, #4]
 2250 013c DA62     		str	r2, [r3, #44]
1256:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PREDIV = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV);
 2251              		.loc 1 1256 0
 2252 013e 054B     		ldr	r3, .L151
 2253 0140 DB6A     		ldr	r3, [r3, #44]
 2254 0142 0F22     		movs	r2, #15
 2255 0144 1A40     		ands	r2, r3
 2256 0146 7B68     		ldr	r3, [r7, #4]
 2257 0148 1A63     		str	r2, [r3, #48]
1257:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** }
 2258              		.loc 1 1257 0
 2259 014a C046     		nop
 2260 014c BD46     		mov	sp, r7
 2261 014e 02B0     		add	sp, sp, #8
 2262              		@ sp needed
 2263 0150 80BD     		pop	{r7, pc}
 2264              	.L152:
 2265 0152 C046     		.align	2
 2266              	.L151:
 2267 0154 00100240 		.word	1073876992
 2268              		.cfi_endproc
 2269              	.LFE44:
 2271              		.section	.text.HAL_RCC_GetClockConfig,"ax",%progbits
 2272              		.align	1
 2273              		.global	HAL_RCC_GetClockConfig
ARM GAS  /tmp/ccWvJRjM.s 			page 63


 2274              		.syntax unified
 2275              		.code	16
 2276              		.thumb_func
 2277              		.fpu softvfp
 2279              	HAL_RCC_GetClockConfig:
 2280              	.LFB45:
1258:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
1259:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** /**
1260:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @brief  Get the RCC_ClkInitStruct according to the internal 
1261:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * RCC configuration registers.
1262:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @param  RCC_ClkInitStruct pointer to an RCC_ClkInitTypeDef structure that 
1263:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * contains the current clock configuration.
1264:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @param  pFLatency Pointer on the Flash Latency.
1265:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @retval None
1266:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   */
1267:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
1268:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** {
 2281              		.loc 1 1268 0
 2282              		.cfi_startproc
 2283 0000 80B5     		push	{r7, lr}
 2284              	.LCFI25:
 2285              		.cfi_def_cfa_offset 8
 2286              		.cfi_offset 7, -8
 2287              		.cfi_offset 14, -4
 2288 0002 82B0     		sub	sp, sp, #8
 2289              	.LCFI26:
 2290              		.cfi_def_cfa_offset 16
 2291 0004 00AF     		add	r7, sp, #0
 2292              	.LCFI27:
 2293              		.cfi_def_cfa_register 7
 2294 0006 7860     		str	r0, [r7, #4]
 2295 0008 3960     		str	r1, [r7]
1269:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   /* Check the parameters */
1270:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   assert_param(RCC_ClkInitStruct != NULL);
1271:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   assert_param(pFLatency != NULL);
1272:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
1273:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   /* Set all possible values for the Clock type parameter --------------------*/
1274:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 2296              		.loc 1 1274 0
 2297 000a 7B68     		ldr	r3, [r7, #4]
 2298 000c 0722     		movs	r2, #7
 2299 000e 1A60     		str	r2, [r3]
1275:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   
1276:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   /* Get the SYSCLK configuration --------------------------------------------*/ 
1277:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 2300              		.loc 1 1277 0
 2301 0010 0E4B     		ldr	r3, .L154
 2302 0012 5B68     		ldr	r3, [r3, #4]
 2303 0014 0322     		movs	r2, #3
 2304 0016 1A40     		ands	r2, r3
 2305 0018 7B68     		ldr	r3, [r7, #4]
 2306 001a 5A60     		str	r2, [r3, #4]
1278:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   
1279:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   /* Get the HCLK configuration ----------------------------------------------*/ 
1280:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 2307              		.loc 1 1280 0
 2308 001c 0B4B     		ldr	r3, .L154
ARM GAS  /tmp/ccWvJRjM.s 			page 64


 2309 001e 5B68     		ldr	r3, [r3, #4]
 2310 0020 F022     		movs	r2, #240
 2311 0022 1A40     		ands	r2, r3
 2312 0024 7B68     		ldr	r3, [r7, #4]
 2313 0026 9A60     		str	r2, [r3, #8]
1281:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   
1282:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   /* Get the APB1 configuration ----------------------------------------------*/ 
1283:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 2314              		.loc 1 1283 0
 2315 0028 084B     		ldr	r3, .L154
 2316 002a 5A68     		ldr	r2, [r3, #4]
 2317 002c E023     		movs	r3, #224
 2318 002e DB00     		lsls	r3, r3, #3
 2319 0030 1A40     		ands	r2, r3
 2320 0032 7B68     		ldr	r3, [r7, #4]
 2321 0034 DA60     		str	r2, [r3, #12]
1284:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   /* Get the Flash Wait State (Latency) configuration ------------------------*/   
1285:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 2322              		.loc 1 1285 0
 2323 0036 064B     		ldr	r3, .L154+4
 2324 0038 1B68     		ldr	r3, [r3]
 2325 003a 0122     		movs	r2, #1
 2326 003c 1A40     		ands	r2, r3
 2327 003e 3B68     		ldr	r3, [r7]
 2328 0040 1A60     		str	r2, [r3]
1286:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** }
 2329              		.loc 1 1286 0
 2330 0042 C046     		nop
 2331 0044 BD46     		mov	sp, r7
 2332 0046 02B0     		add	sp, sp, #8
 2333              		@ sp needed
 2334 0048 80BD     		pop	{r7, pc}
 2335              	.L155:
 2336 004a C046     		.align	2
 2337              	.L154:
 2338 004c 00100240 		.word	1073876992
 2339 0050 00200240 		.word	1073881088
 2340              		.cfi_endproc
 2341              	.LFE45:
 2343              		.section	.text.HAL_RCC_NMI_IRQHandler,"ax",%progbits
 2344              		.align	1
 2345              		.global	HAL_RCC_NMI_IRQHandler
 2346              		.syntax unified
 2347              		.code	16
 2348              		.thumb_func
 2349              		.fpu softvfp
 2351              	HAL_RCC_NMI_IRQHandler:
 2352              	.LFB46:
1287:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
1288:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** /**
1289:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @brief This function handles the RCC CSS interrupt request.
1290:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @note This API should be called under the NMI_Handler().
1291:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @retval None
1292:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   */
1293:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** void HAL_RCC_NMI_IRQHandler(void)
1294:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** {
 2353              		.loc 1 1294 0
ARM GAS  /tmp/ccWvJRjM.s 			page 65


 2354              		.cfi_startproc
 2355 0000 80B5     		push	{r7, lr}
 2356              	.LCFI28:
 2357              		.cfi_def_cfa_offset 8
 2358              		.cfi_offset 7, -8
 2359              		.cfi_offset 14, -4
 2360 0002 00AF     		add	r7, sp, #0
 2361              	.LCFI29:
 2362              		.cfi_def_cfa_register 7
1295:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   /* Check RCC CSSF flag  */
1296:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 2363              		.loc 1 1296 0
 2364 0004 064B     		ldr	r3, .L159
 2365 0006 9B68     		ldr	r3, [r3, #8]
 2366 0008 8022     		movs	r2, #128
 2367 000a 1340     		ands	r3, r2
 2368 000c 802B     		cmp	r3, #128
 2369 000e 04D1     		bne	.L158
1297:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   {
1298:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     /* RCC Clock Security System interrupt user callback */
1299:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     HAL_RCC_CSSCallback();
 2370              		.loc 1 1299 0
 2371 0010 FFF7FEFF 		bl	HAL_RCC_CSSCallback
1300:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     
1301:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     /* Clear RCC CSS pending bit */
1302:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 2372              		.loc 1 1302 0
 2373 0014 034B     		ldr	r3, .L159+4
 2374 0016 8022     		movs	r2, #128
 2375 0018 1A70     		strb	r2, [r3]
 2376              	.L158:
1303:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   }
1304:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** }
 2377              		.loc 1 1304 0
 2378 001a C046     		nop
 2379 001c BD46     		mov	sp, r7
 2380              		@ sp needed
 2381 001e 80BD     		pop	{r7, pc}
 2382              	.L160:
 2383              		.align	2
 2384              	.L159:
 2385 0020 00100240 		.word	1073876992
 2386 0024 0A100240 		.word	1073877002
 2387              		.cfi_endproc
 2388              	.LFE46:
 2390              		.section	.text.HAL_RCC_CSSCallback,"ax",%progbits
 2391              		.align	1
 2392              		.weak	HAL_RCC_CSSCallback
 2393              		.syntax unified
 2394              		.code	16
 2395              		.thumb_func
 2396              		.fpu softvfp
 2398              	HAL_RCC_CSSCallback:
 2399              	.LFB47:
1305:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** 
1306:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** /**
1307:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @brief  RCC Clock Security System interrupt callback
ARM GAS  /tmp/ccWvJRjM.s 			page 66


1308:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   * @retval none
1309:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   */
1310:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** __weak void HAL_RCC_CSSCallback(void)
1311:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** {
 2400              		.loc 1 1311 0
 2401              		.cfi_startproc
 2402 0000 80B5     		push	{r7, lr}
 2403              	.LCFI30:
 2404              		.cfi_def_cfa_offset 8
 2405              		.cfi_offset 7, -8
 2406              		.cfi_offset 14, -4
 2407 0002 00AF     		add	r7, sp, #0
 2408              	.LCFI31:
 2409              		.cfi_def_cfa_register 7
1312:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1313:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     the HAL_RCC_CSSCallback could be implemented in the user file
1314:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c ****     */ 
1315:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_rcc.c **** }
 2410              		.loc 1 1315 0
 2411 0004 C046     		nop
 2412 0006 BD46     		mov	sp, r7
 2413              		@ sp needed
 2414 0008 80BD     		pop	{r7, pc}
 2415              		.cfi_endproc
 2416              	.LFE47:
 2418              		.text
 2419              	.Letext0:
 2420              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 2421              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 2422              		.file 4 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/system_stm32f0xx.h"
 2423              		.file 5 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 2424              		.file 6 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f0xx.h"
 2425              		.file 7 "/usr/arm-none-eabi/include/sys/lock.h"
 2426              		.file 8 "/usr/arm-none-eabi/include/sys/_types.h"
 2427              		.file 9 "/usr/lib/gcc/arm-none-eabi/6.2.0/include/stddef.h"
 2428              		.file 10 "/usr/arm-none-eabi/include/sys/reent.h"
 2429              		.file 11 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 2430              		.file 12 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 2431              		.file 13 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
ARM GAS  /tmp/ccWvJRjM.s 			page 67


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f0xx_hal_rcc.c
     /tmp/ccWvJRjM.s:16     .text.HAL_RCC_DeInit:0000000000000000 $t
     /tmp/ccWvJRjM.s:23     .text.HAL_RCC_DeInit:0000000000000000 HAL_RCC_DeInit
     /tmp/ccWvJRjM.s:92     .text.HAL_RCC_DeInit:0000000000000058 $d
     /tmp/ccWvJRjM.s:102    .text.HAL_RCC_OscConfig:0000000000000000 $t
     /tmp/ccWvJRjM.s:109    .text.HAL_RCC_OscConfig:0000000000000000 HAL_RCC_OscConfig
     /tmp/ccWvJRjM.s:635    .text.HAL_RCC_OscConfig:0000000000000330 $d
     /tmp/ccWvJRjM.s:641    .text.HAL_RCC_OscConfig:0000000000000340 $t
     /tmp/ccWvJRjM.s:1147   .text.HAL_RCC_OscConfig:0000000000000670 $d
     /tmp/ccWvJRjM.s:1155   .text.HAL_RCC_OscConfig:0000000000000688 $t
     /tmp/ccWvJRjM.s:1190   .text.HAL_RCC_OscConfig:00000000000006b8 $d
     /tmp/ccWvJRjM.s:1195   .text.HAL_RCC_ClockConfig:0000000000000000 $t
     /tmp/ccWvJRjM.s:1202   .text.HAL_RCC_ClockConfig:0000000000000000 HAL_RCC_ClockConfig
     /tmp/ccWvJRjM.s:1778   .text.HAL_RCC_GetSysClockFreq:0000000000000000 HAL_RCC_GetSysClockFreq
     /tmp/ccWvJRjM.s:1533   .text.HAL_RCC_ClockConfig:00000000000001f8 $d
     /tmp/ccWvJRjM.s:1543   .text.HAL_RCC_MCOConfig:0000000000000000 $t
     /tmp/ccWvJRjM.s:1550   .text.HAL_RCC_MCOConfig:0000000000000000 HAL_RCC_MCOConfig
     /tmp/ccWvJRjM.s:1647   .text.HAL_RCC_MCOConfig:0000000000000090 $d
     /tmp/ccWvJRjM.s:1653   .text.HAL_RCC_EnableCSS:0000000000000000 $t
     /tmp/ccWvJRjM.s:1660   .text.HAL_RCC_EnableCSS:0000000000000000 HAL_RCC_EnableCSS
     /tmp/ccWvJRjM.s:1688   .text.HAL_RCC_EnableCSS:0000000000000018 $d
     /tmp/ccWvJRjM.s:1693   .text.HAL_RCC_DisableCSS:0000000000000000 $t
     /tmp/ccWvJRjM.s:1700   .text.HAL_RCC_DisableCSS:0000000000000000 HAL_RCC_DisableCSS
     /tmp/ccWvJRjM.s:1727   .text.HAL_RCC_DisableCSS:0000000000000018 $d
     /tmp/ccWvJRjM.s:1734   .rodata:0000000000000000 $d
     /tmp/ccWvJRjM.s:1771   .text.HAL_RCC_GetSysClockFreq:0000000000000000 $t
     /tmp/ccWvJRjM.s:1941   .text.HAL_RCC_GetSysClockFreq:00000000000000f0 $d
     /tmp/ccWvJRjM.s:1950   .text.HAL_RCC_GetHCLKFreq:0000000000000000 $t
     /tmp/ccWvJRjM.s:1957   .text.HAL_RCC_GetHCLKFreq:0000000000000000 HAL_RCC_GetHCLKFreq
     /tmp/ccWvJRjM.s:1980   .text.HAL_RCC_GetHCLKFreq:0000000000000010 $d
     /tmp/ccWvJRjM.s:1985   .text.HAL_RCC_GetPCLK1Freq:0000000000000000 $t
     /tmp/ccWvJRjM.s:1992   .text.HAL_RCC_GetPCLK1Freq:0000000000000000 HAL_RCC_GetPCLK1Freq
     /tmp/ccWvJRjM.s:2024   .text.HAL_RCC_GetPCLK1Freq:0000000000000024 $d
     /tmp/ccWvJRjM.s:2030   .text.HAL_RCC_GetOscConfig:0000000000000000 $t
     /tmp/ccWvJRjM.s:2037   .text.HAL_RCC_GetOscConfig:0000000000000000 HAL_RCC_GetOscConfig
     /tmp/ccWvJRjM.s:2267   .text.HAL_RCC_GetOscConfig:0000000000000154 $d
     /tmp/ccWvJRjM.s:2272   .text.HAL_RCC_GetClockConfig:0000000000000000 $t
     /tmp/ccWvJRjM.s:2279   .text.HAL_RCC_GetClockConfig:0000000000000000 HAL_RCC_GetClockConfig
     /tmp/ccWvJRjM.s:2338   .text.HAL_RCC_GetClockConfig:000000000000004c $d
     /tmp/ccWvJRjM.s:2344   .text.HAL_RCC_NMI_IRQHandler:0000000000000000 $t
     /tmp/ccWvJRjM.s:2351   .text.HAL_RCC_NMI_IRQHandler:0000000000000000 HAL_RCC_NMI_IRQHandler
     /tmp/ccWvJRjM.s:2398   .text.HAL_RCC_CSSCallback:0000000000000000 HAL_RCC_CSSCallback
     /tmp/ccWvJRjM.s:2385   .text.HAL_RCC_NMI_IRQHandler:0000000000000020 $d
     /tmp/ccWvJRjM.s:2391   .text.HAL_RCC_CSSCallback:0000000000000000 $t
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
SystemCoreClock
HAL_GetTick
HAL_InitTick
AHBPrescTable
memset
HAL_GPIO_Init
__aeabi_uidiv
memcpy
APBPrescTable
ARM GAS  /tmp/ccWvJRjM.s 			page 68


