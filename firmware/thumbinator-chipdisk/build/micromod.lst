ARM GAS  /tmp/ccaMRnUL.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"micromod.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.rodata.fine_tuning,"a",%progbits
  16              		.align	2
  19              	fine_tuning:
  20 0000 F410     		.short	4340
  21 0002 D410     		.short	4308
  22 0004 B510     		.short	4277
  23 0006 9710     		.short	4247
  24 0008 7810     		.short	4216
  25 000a 5A10     		.short	4186
  26 000c 3C10     		.short	4156
  27 000e 1E10     		.short	4126
  28 0010 0010     		.short	4096
  29 0012 E30F     		.short	4067
  30 0014 C50F     		.short	4037
  31 0016 A80F     		.short	4008
  32 0018 8B0F     		.short	3979
  33 001a 6F0F     		.short	3951
  34 001c 520F     		.short	3922
  35 001e 360F     		.short	3894
  36              		.section	.rodata.arp_tuning,"a",%progbits
  37              		.align	2
  40              	arp_tuning:
  41 0000 0010     		.short	4096
  42 0002 1A0F     		.short	3866
  43 0004 410E     		.short	3649
  44 0006 740D     		.short	3444
  45 0008 B30C     		.short	3251
  46 000a FD0B     		.short	3069
  47 000c 500B     		.short	2896
  48 000e AE0A     		.short	2734
  49 0010 140A     		.short	2580
  50 0012 8309     		.short	2435
  51 0014 FB08     		.short	2299
  52 0016 7A08     		.short	2170
  53 0018 0008     		.short	2048
  54 001a 8D07     		.short	1933
  55 001c 2107     		.short	1825
  56 001e BA06     		.short	1722
  57              		.section	.rodata.sine_table,"a",%progbits
  58              		.align	2
  61              	sine_table:
  62 0000 00       		.byte	0
  63 0001 18       		.byte	24
ARM GAS  /tmp/ccaMRnUL.s 			page 2


  64 0002 31       		.byte	49
  65 0003 4A       		.byte	74
  66 0004 61       		.byte	97
  67 0005 78       		.byte	120
  68 0006 8D       		.byte	-115
  69 0007 A1       		.byte	-95
  70 0008 B4       		.byte	-76
  71 0009 C5       		.byte	-59
  72 000a D4       		.byte	-44
  73 000b E0       		.byte	-32
  74 000c EB       		.byte	-21
  75 000d F4       		.byte	-12
  76 000e FA       		.byte	-6
  77 000f FD       		.byte	-3
  78 0010 FF       		.byte	-1
  79 0011 FD       		.byte	-3
  80 0012 FA       		.byte	-6
  81 0013 F4       		.byte	-12
  82 0014 EB       		.byte	-21
  83 0015 E0       		.byte	-32
  84 0016 D4       		.byte	-44
  85 0017 C5       		.byte	-59
  86 0018 B4       		.byte	-76
  87 0019 A1       		.byte	-95
  88 001a 8D       		.byte	-115
  89 001b 78       		.byte	120
  90 001c 61       		.byte	97
  91 001d 4A       		.byte	74
  92 001e 31       		.byte	49
  93 001f 18       		.byte	24
  94              		.section	.bss.module_data,"aw",%nobits
  95              		.align	2
  98              	module_data:
  99 0000 00000000 		.space	4
 100              		.section	.bss.pattern_data,"aw",%nobits
 101              		.align	2
 104              	pattern_data:
 105 0000 00000000 		.space	4
 106              		.section	.bss.sequence,"aw",%nobits
 107              		.align	2
 110              	sequence:
 111 0000 00000000 		.space	4
 112              		.section	.bss.song_length,"aw",%nobits
 113              		.align	2
 116              	song_length:
 117 0000 00000000 		.space	4
 118              		.section	.bss.restart,"aw",%nobits
 119              		.align	2
 122              	restart:
 123 0000 00000000 		.space	4
 124              		.section	.bss.num_patterns,"aw",%nobits
 125              		.align	2
 128              	num_patterns:
 129 0000 00000000 		.space	4
 130              		.section	.bss.num_channels,"aw",%nobits
 131              		.align	2
 134              	num_channels:
ARM GAS  /tmp/ccaMRnUL.s 			page 3


 135 0000 00000000 		.space	4
 136              		.section	.bss.instruments,"aw",%nobits
 137              		.align	2
 140              	instruments:
 141 0000 00000000 		.space	512
 141      00000000 
 141      00000000 
 141      00000000 
 141      00000000 
 142              		.section	.bss.sample_rate,"aw",%nobits
 143              		.align	2
 146              	sample_rate:
 147 0000 00000000 		.space	4
 148              		.section	.bss.c2_rate,"aw",%nobits
 149              		.align	2
 152              	c2_rate:
 153 0000 00000000 		.space	4
 154              		.section	.bss.gain,"aw",%nobits
 155              		.align	2
 158              	gain:
 159 0000 00000000 		.space	4
 160              		.section	.bss.tick_len,"aw",%nobits
 161              		.align	2
 164              	tick_len:
 165 0000 00000000 		.space	4
 166              		.section	.bss.tick_offset,"aw",%nobits
 167              		.align	2
 170              	tick_offset:
 171 0000 00000000 		.space	4
 172              		.section	.bss.pattern,"aw",%nobits
 173              		.align	2
 176              	pattern:
 177 0000 00000000 		.space	4
 178              		.section	.bss.break_pattern,"aw",%nobits
 179              		.align	2
 182              	break_pattern:
 183 0000 00000000 		.space	4
 184              		.section	.bss.row,"aw",%nobits
 185              		.align	2
 188              	row:
 189 0000 00000000 		.space	4
 190              		.section	.bss.next_row,"aw",%nobits
 191              		.align	2
 194              	next_row:
 195 0000 00000000 		.space	4
 196              		.section	.bss.tick,"aw",%nobits
 197              		.align	2
 200              	tick:
 201 0000 00000000 		.space	4
 202              		.section	.bss.speed,"aw",%nobits
 203              		.align	2
 206              	speed:
 207 0000 00000000 		.space	4
 208              		.section	.bss.pl_count,"aw",%nobits
 209              		.align	2
 212              	pl_count:
 213 0000 00000000 		.space	4
ARM GAS  /tmp/ccaMRnUL.s 			page 4


 214              		.section	.bss.pl_channel,"aw",%nobits
 215              		.align	2
 218              	pl_channel:
 219 0000 00000000 		.space	4
 220              		.section	.bss.random_seed,"aw",%nobits
 221              		.align	2
 224              	random_seed:
 225 0000 00000000 		.space	4
 226              		.section	.bss.channels,"aw",%nobits
 227              		.align	2
 230              	channels:
 231 0000 00000000 		.space	768
 231      00000000 
 231      00000000 
 231      00000000 
 231      00000000 
 232              		.section	.text.calculate_num_patterns,"ax",%progbits
 233              		.align	1
 234              		.syntax unified
 235              		.code	16
 236              		.thumb_func
 237              		.fpu softvfp
 239              	calculate_num_patterns:
 240              	.LFB0:
 241              		.file 1 "Src/micromod.c"
   1:Src/micromod.c **** #include "micromod.h"
   2:Src/micromod.c **** 
   3:Src/micromod.c **** /* fast protracker replay version 20150922 (c)2015 mumart@gmail.com */
   4:Src/micromod.c **** 
   5:Src/micromod.c **** #define MAX_CHANNELS 16
   6:Src/micromod.c **** #define FP_SHIFT 14
   7:Src/micromod.c **** #define FP_ONE   16384
   8:Src/micromod.c **** #define FP_MASK  16383
   9:Src/micromod.c **** 
  10:Src/micromod.c **** struct note {
  11:Src/micromod.c **** 	unsigned short key;
  12:Src/micromod.c **** 	unsigned char instrument, effect, param;
  13:Src/micromod.c **** };
  14:Src/micromod.c **** 
  15:Src/micromod.c **** struct instrument {
  16:Src/micromod.c **** 	unsigned char volume, fine_tune;
  17:Src/micromod.c **** 	unsigned long loop_start, loop_length;
  18:Src/micromod.c **** 	signed char *sample_data;
  19:Src/micromod.c **** };
  20:Src/micromod.c **** 
  21:Src/micromod.c **** struct channel {
  22:Src/micromod.c **** 	struct note note;
  23:Src/micromod.c **** 	unsigned short period, porta_period;
  24:Src/micromod.c **** 	unsigned long sample_offset, sample_idx, step;
  25:Src/micromod.c **** 	unsigned char volume, panning, fine_tune, ampl;
  26:Src/micromod.c **** 	unsigned char id, instrument, assigned, porta_speed, pl_row, fx_count;
  27:Src/micromod.c **** 	unsigned char vibrato_type, vibrato_phase, vibrato_speed, vibrato_depth;
  28:Src/micromod.c **** 	unsigned char tremolo_type, tremolo_phase, tremolo_speed, tremolo_depth;
  29:Src/micromod.c **** 	signed char tremolo_add, vibrato_add, arpeggio_add;
  30:Src/micromod.c **** };
  31:Src/micromod.c **** 
  32:Src/micromod.c **** static const unsigned short fine_tuning[] = {
ARM GAS  /tmp/ccaMRnUL.s 			page 5


  33:Src/micromod.c **** 	4340, 4308, 4277, 4247, 4216, 4186, 4156, 4126,
  34:Src/micromod.c **** 	4096, 4067, 4037, 4008, 3979, 3951, 3922, 3894
  35:Src/micromod.c **** };
  36:Src/micromod.c **** 
  37:Src/micromod.c **** static const unsigned short arp_tuning[] = {
  38:Src/micromod.c **** 	4096, 3866, 3649, 3444, 3251, 3069, 2896, 2734,
  39:Src/micromod.c **** 	2580, 2435, 2299, 2170, 2048, 1933, 1825, 1722
  40:Src/micromod.c **** };
  41:Src/micromod.c **** 
  42:Src/micromod.c **** static const unsigned char sine_table[] = {
  43:Src/micromod.c **** 	  0,  24,  49,  74,  97, 120, 141, 161, 180, 197, 212, 224, 235, 244, 250, 253,
  44:Src/micromod.c **** 	255, 253, 250, 244, 235, 224, 212, 197, 180, 161, 141, 120,  97,  74,  49,  24
  45:Src/micromod.c **** };
  46:Src/micromod.c **** 
  47:Src/micromod.c **** static signed char *module_data;
  48:Src/micromod.c **** static unsigned char *pattern_data, *sequence;
  49:Src/micromod.c **** static long song_length, restart, num_patterns, num_channels;
  50:Src/micromod.c **** static struct instrument instruments[ 32 ];
  51:Src/micromod.c **** 
  52:Src/micromod.c **** static long sample_rate, c2_rate, gain, tick_len, tick_offset;
  53:Src/micromod.c **** static long pattern, break_pattern, row, next_row, tick;
  54:Src/micromod.c **** static long speed, pl_count, pl_channel, random_seed;
  55:Src/micromod.c **** 
  56:Src/micromod.c **** static struct channel channels[ MAX_CHANNELS ];
  57:Src/micromod.c **** 
  58:Src/micromod.c **** static long calculate_num_patterns( signed char *module_header ) {
 242              		.loc 1 58 0
 243              		.cfi_startproc
 244 0000 80B5     		push	{r7, lr}
 245              	.LCFI0:
 246              		.cfi_def_cfa_offset 8
 247              		.cfi_offset 7, -8
 248              		.cfi_offset 14, -4
 249 0002 86B0     		sub	sp, sp, #24
 250              	.LCFI1:
 251              		.cfi_def_cfa_offset 32
 252 0004 00AF     		add	r7, sp, #0
 253              	.LCFI2:
 254              		.cfi_def_cfa_register 7
 255 0006 7860     		str	r0, [r7, #4]
  59:Src/micromod.c **** 	long num_patterns, order_entry, pattern;
  60:Src/micromod.c **** 	num_patterns = 0;
 256              		.loc 1 60 0
 257 0008 0023     		movs	r3, #0
 258 000a 7B61     		str	r3, [r7, #20]
  61:Src/micromod.c **** 	for( pattern = 0; pattern < 128; pattern++ ) {
 259              		.loc 1 61 0
 260 000c 0023     		movs	r3, #0
 261 000e 3B61     		str	r3, [r7, #16]
 262 0010 18E0     		b	.L2
 263              	.L4:
  62:Src/micromod.c **** 		order_entry = module_header[ 952 + pattern ] & 0x7F;
 264              		.loc 1 62 0
 265 0012 3B69     		ldr	r3, [r7, #16]
 266 0014 EE22     		movs	r2, #238
 267 0016 9200     		lsls	r2, r2, #2
 268 0018 9446     		mov	ip, r2
ARM GAS  /tmp/ccaMRnUL.s 			page 6


 269 001a 6344     		add	r3, r3, ip
 270 001c 1A00     		movs	r2, r3
 271 001e 7B68     		ldr	r3, [r7, #4]
 272 0020 9B18     		adds	r3, r3, r2
 273 0022 1B78     		ldrb	r3, [r3]
 274 0024 5BB2     		sxtb	r3, r3
 275 0026 DBB2     		uxtb	r3, r3
 276 0028 1A00     		movs	r2, r3
 277 002a 7F23     		movs	r3, #127
 278 002c 1340     		ands	r3, r2
 279 002e FB60     		str	r3, [r7, #12]
  63:Src/micromod.c **** 		if( order_entry >= num_patterns ) num_patterns = order_entry + 1;
 280              		.loc 1 63 0
 281 0030 FA68     		ldr	r2, [r7, #12]
 282 0032 7B69     		ldr	r3, [r7, #20]
 283 0034 9A42     		cmp	r2, r3
 284 0036 02DB     		blt	.L3
 285              		.loc 1 63 0 is_stmt 0 discriminator 1
 286 0038 FB68     		ldr	r3, [r7, #12]
 287 003a 0133     		adds	r3, r3, #1
 288 003c 7B61     		str	r3, [r7, #20]
 289              	.L3:
  61:Src/micromod.c **** 	for( pattern = 0; pattern < 128; pattern++ ) {
 290              		.loc 1 61 0 is_stmt 1 discriminator 2
 291 003e 3B69     		ldr	r3, [r7, #16]
 292 0040 0133     		adds	r3, r3, #1
 293 0042 3B61     		str	r3, [r7, #16]
 294              	.L2:
  61:Src/micromod.c **** 	for( pattern = 0; pattern < 128; pattern++ ) {
 295              		.loc 1 61 0 is_stmt 0 discriminator 1
 296 0044 3B69     		ldr	r3, [r7, #16]
 297 0046 7F2B     		cmp	r3, #127
 298 0048 E3DD     		ble	.L4
  64:Src/micromod.c **** 	}
  65:Src/micromod.c **** 	return num_patterns;
 299              		.loc 1 65 0 is_stmt 1
 300 004a 7B69     		ldr	r3, [r7, #20]
  66:Src/micromod.c **** }
 301              		.loc 1 66 0
 302 004c 1800     		movs	r0, r3
 303 004e BD46     		mov	sp, r7
 304 0050 06B0     		add	sp, sp, #24
 305              		@ sp needed
 306 0052 80BD     		pop	{r7, pc}
 307              		.cfi_endproc
 308              	.LFE0:
 310              		.section	.text.calculate_num_channels,"ax",%progbits
 311              		.align	1
 312              		.syntax unified
 313              		.code	16
 314              		.thumb_func
 315              		.fpu softvfp
 317              	calculate_num_channels:
 318              	.LFB1:
  67:Src/micromod.c **** 
  68:Src/micromod.c **** static long calculate_num_channels( signed char *module_header ) {
 319              		.loc 1 68 0
ARM GAS  /tmp/ccaMRnUL.s 			page 7


 320              		.cfi_startproc
 321 0000 80B5     		push	{r7, lr}
 322              	.LCFI3:
 323              		.cfi_def_cfa_offset 8
 324              		.cfi_offset 7, -8
 325              		.cfi_offset 14, -4
 326 0002 84B0     		sub	sp, sp, #16
 327              	.LCFI4:
 328              		.cfi_def_cfa_offset 24
 329 0004 00AF     		add	r7, sp, #0
 330              	.LCFI5:
 331              		.cfi_def_cfa_register 7
 332 0006 7860     		str	r0, [r7, #4]
  69:Src/micromod.c **** 	long numchan;
  70:Src/micromod.c **** 	switch( ( module_header[ 1082 ] << 8 ) | module_header[ 1083 ] ) {
 333              		.loc 1 70 0
 334 0008 7B68     		ldr	r3, [r7, #4]
 335 000a 2A4A     		ldr	r2, .L15
 336 000c 9446     		mov	ip, r2
 337 000e 6344     		add	r3, r3, ip
 338 0010 1B78     		ldrb	r3, [r3]
 339 0012 5BB2     		sxtb	r3, r3
 340 0014 1B02     		lsls	r3, r3, #8
 341 0016 7A68     		ldr	r2, [r7, #4]
 342 0018 2749     		ldr	r1, .L15+4
 343 001a 8C46     		mov	ip, r1
 344 001c 6244     		add	r2, r2, ip
 345 001e 1278     		ldrb	r2, [r2]
 346 0020 52B2     		sxtb	r2, r2
 347 0022 1343     		orrs	r3, r2
 348 0024 254A     		ldr	r2, .L15+8
 349 0026 9342     		cmp	r3, r2
 350 0028 12D0     		beq	.L8
 351 002a 244A     		ldr	r2, .L15+8
 352 002c 9342     		cmp	r3, r2
 353 002e 06DC     		bgt	.L9
 354 0030 234A     		ldr	r2, .L15+12
 355 0032 9342     		cmp	r3, r2
 356 0034 19D0     		beq	.L10
 357 0036 234A     		ldr	r2, .L15+16
 358 0038 9342     		cmp	r3, r2
 359 003a 0CD0     		beq	.L11
 360 003c 2DE0     		b	.L7
 361              	.L9:
 362 003e 224A     		ldr	r2, .L15+20
 363 0040 9342     		cmp	r3, r2
 364 0042 05D0     		beq	.L8
 365 0044 214A     		ldr	r2, .L15+24
 366 0046 9342     		cmp	r3, r2
 367 0048 02D0     		beq	.L8
 368 004a 214A     		ldr	r2, .L15+28
 369 004c 9342     		cmp	r3, r2
 370 004e 24D1     		bne	.L7
 371              	.L8:
  71:Src/micromod.c **** 		case 0x4b2e: /* M.K. */
  72:Src/micromod.c **** 		case 0x4b21: /* M!K! */
  73:Src/micromod.c **** 		case 0x542e: /* N.T. */
ARM GAS  /tmp/ccaMRnUL.s 			page 8


  74:Src/micromod.c **** 		case 0x5434: /* FLT4 */
  75:Src/micromod.c **** 			numchan = 4;
 372              		.loc 1 75 0
 373 0050 0423     		movs	r3, #4
 374 0052 FB60     		str	r3, [r7, #12]
  76:Src/micromod.c **** 			break;
 375              		.loc 1 76 0
 376 0054 24E0     		b	.L12
 377              	.L11:
  77:Src/micromod.c **** 		case 0x484e: /* xCHN */
  78:Src/micromod.c **** 			numchan = module_header[ 1080 ] - 48;
 378              		.loc 1 78 0
 379 0056 7B68     		ldr	r3, [r7, #4]
 380 0058 8722     		movs	r2, #135
 381 005a D200     		lsls	r2, r2, #3
 382 005c 9446     		mov	ip, r2
 383 005e 6344     		add	r3, r3, ip
 384 0060 1B78     		ldrb	r3, [r3]
 385 0062 5BB2     		sxtb	r3, r3
 386 0064 303B     		subs	r3, r3, #48
 387 0066 FB60     		str	r3, [r7, #12]
  79:Src/micromod.c **** 			break;
 388              		.loc 1 79 0
 389 0068 1AE0     		b	.L12
 390              	.L10:
  80:Src/micromod.c **** 		case 0x4348: /* xxCH */
  81:Src/micromod.c **** 			numchan = ( ( module_header[ 1080 ] - 48 ) * 10 ) + ( module_header[ 1081 ] - 48 );
 391              		.loc 1 81 0
 392 006a 7B68     		ldr	r3, [r7, #4]
 393 006c 8722     		movs	r2, #135
 394 006e D200     		lsls	r2, r2, #3
 395 0070 9446     		mov	ip, r2
 396 0072 6344     		add	r3, r3, ip
 397 0074 1B78     		ldrb	r3, [r3]
 398 0076 5BB2     		sxtb	r3, r3
 399 0078 303B     		subs	r3, r3, #48
 400 007a 1A00     		movs	r2, r3
 401 007c 1300     		movs	r3, r2
 402 007e 9B00     		lsls	r3, r3, #2
 403 0080 9B18     		adds	r3, r3, r2
 404 0082 5B00     		lsls	r3, r3, #1
 405 0084 1A00     		movs	r2, r3
 406 0086 7B68     		ldr	r3, [r7, #4]
 407 0088 1249     		ldr	r1, .L15+32
 408 008a 8C46     		mov	ip, r1
 409 008c 6344     		add	r3, r3, ip
 410 008e 1B78     		ldrb	r3, [r3]
 411 0090 5BB2     		sxtb	r3, r3
 412 0092 303B     		subs	r3, r3, #48
 413 0094 D318     		adds	r3, r2, r3
 414 0096 FB60     		str	r3, [r7, #12]
  82:Src/micromod.c **** 			break;
 415              		.loc 1 82 0
 416 0098 02E0     		b	.L12
 417              	.L7:
  83:Src/micromod.c **** 		default: /* Not recognised. */
  84:Src/micromod.c **** 			numchan = 0;
ARM GAS  /tmp/ccaMRnUL.s 			page 9


 418              		.loc 1 84 0
 419 009a 0023     		movs	r3, #0
 420 009c FB60     		str	r3, [r7, #12]
  85:Src/micromod.c **** 			break;
 421              		.loc 1 85 0
 422 009e C046     		nop
 423              	.L12:
  86:Src/micromod.c **** 	}
  87:Src/micromod.c **** 	if( numchan > MAX_CHANNELS ) numchan = 0;
 424              		.loc 1 87 0
 425 00a0 FB68     		ldr	r3, [r7, #12]
 426 00a2 102B     		cmp	r3, #16
 427 00a4 01DD     		ble	.L13
 428              		.loc 1 87 0 is_stmt 0 discriminator 1
 429 00a6 0023     		movs	r3, #0
 430 00a8 FB60     		str	r3, [r7, #12]
 431              	.L13:
  88:Src/micromod.c **** 	return numchan;
 432              		.loc 1 88 0 is_stmt 1
 433 00aa FB68     		ldr	r3, [r7, #12]
  89:Src/micromod.c **** }
 434              		.loc 1 89 0
 435 00ac 1800     		movs	r0, r3
 436 00ae BD46     		mov	sp, r7
 437 00b0 04B0     		add	sp, sp, #16
 438              		@ sp needed
 439 00b2 80BD     		pop	{r7, pc}
 440              	.L16:
 441              		.align	2
 442              	.L15:
 443 00b4 3A040000 		.word	1082
 444 00b8 3B040000 		.word	1083
 445 00bc 214B0000 		.word	19233
 446 00c0 48430000 		.word	17224
 447 00c4 4E480000 		.word	18510
 448 00c8 2E540000 		.word	21550
 449 00cc 34540000 		.word	21556
 450 00d0 2E4B0000 		.word	19246
 451 00d4 39040000 		.word	1081
 452              		.cfi_endproc
 453              	.LFE1:
 455              		.section	.text.unsigned_short_big_endian,"ax",%progbits
 456              		.align	1
 457              		.syntax unified
 458              		.code	16
 459              		.thumb_func
 460              		.fpu softvfp
 462              	unsigned_short_big_endian:
 463              	.LFB2:
  90:Src/micromod.c **** 
  91:Src/micromod.c **** static long unsigned_short_big_endian( signed char *buf, long offset ) {
 464              		.loc 1 91 0
 465              		.cfi_startproc
 466 0000 80B5     		push	{r7, lr}
 467              	.LCFI6:
 468              		.cfi_def_cfa_offset 8
 469              		.cfi_offset 7, -8
ARM GAS  /tmp/ccaMRnUL.s 			page 10


 470              		.cfi_offset 14, -4
 471 0002 82B0     		sub	sp, sp, #8
 472              	.LCFI7:
 473              		.cfi_def_cfa_offset 16
 474 0004 00AF     		add	r7, sp, #0
 475              	.LCFI8:
 476              		.cfi_def_cfa_register 7
 477 0006 7860     		str	r0, [r7, #4]
 478 0008 3960     		str	r1, [r7]
  92:Src/micromod.c **** 	return ( ( buf[ offset ] & 0xFF ) << 8 ) | ( buf[ offset + 1 ] & 0xFF );
 479              		.loc 1 92 0
 480 000a 3B68     		ldr	r3, [r7]
 481 000c 7A68     		ldr	r2, [r7, #4]
 482 000e D318     		adds	r3, r2, r3
 483 0010 1B78     		ldrb	r3, [r3]
 484 0012 5BB2     		sxtb	r3, r3
 485 0014 1B02     		lsls	r3, r3, #8
 486 0016 1B04     		lsls	r3, r3, #16
 487 0018 1A0C     		lsrs	r2, r3, #16
 488 001a 3B68     		ldr	r3, [r7]
 489 001c 0133     		adds	r3, r3, #1
 490 001e 7968     		ldr	r1, [r7, #4]
 491 0020 CB18     		adds	r3, r1, r3
 492 0022 1B78     		ldrb	r3, [r3]
 493 0024 5BB2     		sxtb	r3, r3
 494 0026 1900     		movs	r1, r3
 495 0028 FF23     		movs	r3, #255
 496 002a 0B40     		ands	r3, r1
 497 002c 1343     		orrs	r3, r2
  93:Src/micromod.c **** }
 498              		.loc 1 93 0
 499 002e 1800     		movs	r0, r3
 500 0030 BD46     		mov	sp, r7
 501 0032 02B0     		add	sp, sp, #8
 502              		@ sp needed
 503 0034 80BD     		pop	{r7, pc}
 504              		.cfi_endproc
 505              	.LFE2:
 507              		.global	__aeabi_idiv
 508              		.section	.text.set_tempo,"ax",%progbits
 509              		.align	1
 510              		.syntax unified
 511              		.code	16
 512              		.thumb_func
 513              		.fpu softvfp
 515              	set_tempo:
 516              	.LFB3:
  94:Src/micromod.c **** 
  95:Src/micromod.c **** static void set_tempo( long tempo ) {
 517              		.loc 1 95 0
 518              		.cfi_startproc
 519 0000 80B5     		push	{r7, lr}
 520              	.LCFI9:
 521              		.cfi_def_cfa_offset 8
 522              		.cfi_offset 7, -8
 523              		.cfi_offset 14, -4
 524 0002 82B0     		sub	sp, sp, #8
ARM GAS  /tmp/ccaMRnUL.s 			page 11


 525              	.LCFI10:
 526              		.cfi_def_cfa_offset 16
 527 0004 00AF     		add	r7, sp, #0
 528              	.LCFI11:
 529              		.cfi_def_cfa_register 7
 530 0006 7860     		str	r0, [r7, #4]
  96:Src/micromod.c **** 	tick_len = ( ( sample_rate << 1 ) + ( sample_rate >> 1 ) ) / tempo;
 531              		.loc 1 96 0
 532 0008 094B     		ldr	r3, .L20
 533 000a 1B68     		ldr	r3, [r3]
 534 000c 5A00     		lsls	r2, r3, #1
 535 000e 084B     		ldr	r3, .L20
 536 0010 1B68     		ldr	r3, [r3]
 537 0012 5B10     		asrs	r3, r3, #1
 538 0014 D318     		adds	r3, r2, r3
 539 0016 7968     		ldr	r1, [r7, #4]
 540 0018 1800     		movs	r0, r3
 541 001a FFF7FEFF 		bl	__aeabi_idiv
 542              	.LVL0:
 543 001e 0300     		movs	r3, r0
 544 0020 1A00     		movs	r2, r3
 545 0022 044B     		ldr	r3, .L20+4
 546 0024 1A60     		str	r2, [r3]
  97:Src/micromod.c **** }
 547              		.loc 1 97 0
 548 0026 C046     		nop
 549 0028 BD46     		mov	sp, r7
 550 002a 02B0     		add	sp, sp, #8
 551              		@ sp needed
 552 002c 80BD     		pop	{r7, pc}
 553              	.L21:
 554 002e C046     		.align	2
 555              	.L20:
 556 0030 00000000 		.word	sample_rate
 557 0034 00000000 		.word	tick_len
 558              		.cfi_endproc
 559              	.LFE3:
 561              		.global	__aeabi_uidiv
 562              		.section	.text.update_frequency,"ax",%progbits
 563              		.align	1
 564              		.syntax unified
 565              		.code	16
 566              		.thumb_func
 567              		.fpu softvfp
 569              	update_frequency:
 570              	.LFB4:
  98:Src/micromod.c **** 
  99:Src/micromod.c **** static void update_frequency( struct channel *chan ) {
 571              		.loc 1 99 0
 572              		.cfi_startproc
 573 0000 80B5     		push	{r7, lr}
 574              	.LCFI12:
 575              		.cfi_def_cfa_offset 8
 576              		.cfi_offset 7, -8
 577              		.cfi_offset 14, -4
 578 0002 86B0     		sub	sp, sp, #24
 579              	.LCFI13:
ARM GAS  /tmp/ccaMRnUL.s 			page 12


 580              		.cfi_def_cfa_offset 32
 581 0004 00AF     		add	r7, sp, #0
 582              	.LCFI14:
 583              		.cfi_def_cfa_register 7
 584 0006 7860     		str	r0, [r7, #4]
 100:Src/micromod.c **** 	long period, volume;
 101:Src/micromod.c **** 	unsigned long freq;
 102:Src/micromod.c **** 	period = chan->period + chan->vibrato_add;
 585              		.loc 1 102 0
 586 0008 7B68     		ldr	r3, [r7, #4]
 587 000a DB88     		ldrh	r3, [r3, #6]
 588 000c 1900     		movs	r1, r3
 589 000e 7B68     		ldr	r3, [r7, #4]
 590 0010 2B22     		movs	r2, #43
 591 0012 9B56     		ldrsb	r3, [r3, r2]
 592 0014 CB18     		adds	r3, r1, r3
 593 0016 7B61     		str	r3, [r7, #20]
 103:Src/micromod.c **** 	period = period * arp_tuning[ chan->arpeggio_add ] >> 11;
 594              		.loc 1 103 0
 595 0018 7B68     		ldr	r3, [r7, #4]
 596 001a 2C22     		movs	r2, #44
 597 001c 9B56     		ldrsb	r3, [r3, r2]
 598 001e 1A00     		movs	r2, r3
 599 0020 254B     		ldr	r3, .L26
 600 0022 5200     		lsls	r2, r2, #1
 601 0024 D35A     		ldrh	r3, [r2, r3]
 602 0026 1A00     		movs	r2, r3
 603 0028 7B69     		ldr	r3, [r7, #20]
 604 002a 5343     		muls	r3, r2
 605 002c DB12     		asrs	r3, r3, #11
 606 002e 7B61     		str	r3, [r7, #20]
 104:Src/micromod.c **** 	period = ( period >> 1 ) + ( period & 1 );
 607              		.loc 1 104 0
 608 0030 7B69     		ldr	r3, [r7, #20]
 609 0032 5A10     		asrs	r2, r3, #1
 610 0034 7B69     		ldr	r3, [r7, #20]
 611 0036 0121     		movs	r1, #1
 612 0038 0B40     		ands	r3, r1
 613 003a D318     		adds	r3, r2, r3
 614 003c 7B61     		str	r3, [r7, #20]
 105:Src/micromod.c **** 	if( period < 14 ) period = 6848;
 615              		.loc 1 105 0
 616 003e 7B69     		ldr	r3, [r7, #20]
 617 0040 0D2B     		cmp	r3, #13
 618 0042 02DC     		bgt	.L23
 619              		.loc 1 105 0 is_stmt 0 discriminator 1
 620 0044 D623     		movs	r3, #214
 621 0046 5B01     		lsls	r3, r3, #5
 622 0048 7B61     		str	r3, [r7, #20]
 623              	.L23:
 106:Src/micromod.c **** 	freq = c2_rate * 428 / period;
 624              		.loc 1 106 0 is_stmt 1
 625 004a 1C4B     		ldr	r3, .L26+4
 626 004c 1B68     		ldr	r3, [r3]
 627 004e D622     		movs	r2, #214
 628 0050 5200     		lsls	r2, r2, #1
 629 0052 5343     		muls	r3, r2
ARM GAS  /tmp/ccaMRnUL.s 			page 13


 630 0054 7969     		ldr	r1, [r7, #20]
 631 0056 1800     		movs	r0, r3
 632 0058 FFF7FEFF 		bl	__aeabi_idiv
 633              	.LVL1:
 634 005c 0300     		movs	r3, r0
 635 005e FB60     		str	r3, [r7, #12]
 107:Src/micromod.c **** 	chan->step = ( freq << FP_SHIFT ) / sample_rate;
 636              		.loc 1 107 0
 637 0060 FB68     		ldr	r3, [r7, #12]
 638 0062 9A03     		lsls	r2, r3, #14
 639 0064 164B     		ldr	r3, .L26+8
 640 0066 1B68     		ldr	r3, [r3]
 641 0068 1900     		movs	r1, r3
 642 006a 1000     		movs	r0, r2
 643 006c FFF7FEFF 		bl	__aeabi_uidiv
 644              	.LVL2:
 645 0070 0300     		movs	r3, r0
 646 0072 1A00     		movs	r2, r3
 647 0074 7B68     		ldr	r3, [r7, #4]
 648 0076 5A61     		str	r2, [r3, #20]
 108:Src/micromod.c **** 	volume = chan->volume + chan->tremolo_add;
 649              		.loc 1 108 0
 650 0078 7B68     		ldr	r3, [r7, #4]
 651 007a 1B7E     		ldrb	r3, [r3, #24]
 652 007c 1900     		movs	r1, r3
 653 007e 7B68     		ldr	r3, [r7, #4]
 654 0080 2A22     		movs	r2, #42
 655 0082 9B56     		ldrsb	r3, [r3, r2]
 656 0084 CB18     		adds	r3, r1, r3
 657 0086 3B61     		str	r3, [r7, #16]
 109:Src/micromod.c **** 	if( volume > 64 ) volume = 64;
 658              		.loc 1 109 0
 659 0088 3B69     		ldr	r3, [r7, #16]
 660 008a 402B     		cmp	r3, #64
 661 008c 01DD     		ble	.L24
 662              		.loc 1 109 0 is_stmt 0 discriminator 1
 663 008e 4023     		movs	r3, #64
 664 0090 3B61     		str	r3, [r7, #16]
 665              	.L24:
 110:Src/micromod.c **** 	if( volume < 0 ) volume = 0;
 666              		.loc 1 110 0 is_stmt 1
 667 0092 3B69     		ldr	r3, [r7, #16]
 668 0094 002B     		cmp	r3, #0
 669 0096 01DA     		bge	.L25
 670              		.loc 1 110 0 is_stmt 0 discriminator 1
 671 0098 0023     		movs	r3, #0
 672 009a 3B61     		str	r3, [r7, #16]
 673              	.L25:
 111:Src/micromod.c **** 	chan->ampl = volume * gain;
 674              		.loc 1 111 0 is_stmt 1
 675 009c 3B69     		ldr	r3, [r7, #16]
 676 009e DAB2     		uxtb	r2, r3
 677 00a0 084B     		ldr	r3, .L26+12
 678 00a2 1B68     		ldr	r3, [r3]
 679 00a4 DBB2     		uxtb	r3, r3
 680 00a6 5343     		muls	r3, r2
 681 00a8 DAB2     		uxtb	r2, r3
ARM GAS  /tmp/ccaMRnUL.s 			page 14


 682 00aa 7B68     		ldr	r3, [r7, #4]
 683 00ac DA76     		strb	r2, [r3, #27]
 112:Src/micromod.c **** }
 684              		.loc 1 112 0
 685 00ae C046     		nop
 686 00b0 BD46     		mov	sp, r7
 687 00b2 06B0     		add	sp, sp, #24
 688              		@ sp needed
 689 00b4 80BD     		pop	{r7, pc}
 690              	.L27:
 691 00b6 C046     		.align	2
 692              	.L26:
 693 00b8 00000000 		.word	arp_tuning
 694 00bc 00000000 		.word	c2_rate
 695 00c0 00000000 		.word	sample_rate
 696 00c4 00000000 		.word	gain
 697              		.cfi_endproc
 698              	.LFE4:
 700              		.section	.text.tone_portamento,"ax",%progbits
 701              		.align	1
 702              		.syntax unified
 703              		.code	16
 704              		.thumb_func
 705              		.fpu softvfp
 707              	tone_portamento:
 708              	.LFB5:
 113:Src/micromod.c **** 
 114:Src/micromod.c **** static void tone_portamento( struct channel *chan ) {
 709              		.loc 1 114 0
 710              		.cfi_startproc
 711 0000 80B5     		push	{r7, lr}
 712              	.LCFI15:
 713              		.cfi_def_cfa_offset 8
 714              		.cfi_offset 7, -8
 715              		.cfi_offset 14, -4
 716 0002 84B0     		sub	sp, sp, #16
 717              	.LCFI16:
 718              		.cfi_def_cfa_offset 24
 719 0004 00AF     		add	r7, sp, #0
 720              	.LCFI17:
 721              		.cfi_def_cfa_register 7
 722 0006 7860     		str	r0, [r7, #4]
 115:Src/micromod.c **** 	long source, dest;
 116:Src/micromod.c **** 	source = chan->period;
 723              		.loc 1 116 0
 724 0008 7B68     		ldr	r3, [r7, #4]
 725 000a DB88     		ldrh	r3, [r3, #6]
 726 000c FB60     		str	r3, [r7, #12]
 117:Src/micromod.c **** 	dest = chan->porta_period;
 727              		.loc 1 117 0
 728 000e 7B68     		ldr	r3, [r7, #4]
 729 0010 1B89     		ldrh	r3, [r3, #8]
 730 0012 BB60     		str	r3, [r7, #8]
 118:Src/micromod.c **** 	if( source < dest ) {
 731              		.loc 1 118 0
 732 0014 FA68     		ldr	r2, [r7, #12]
 733 0016 BB68     		ldr	r3, [r7, #8]
ARM GAS  /tmp/ccaMRnUL.s 			page 15


 734 0018 9A42     		cmp	r2, r3
 735 001a 0CDA     		bge	.L29
 119:Src/micromod.c **** 		source += chan->porta_speed;
 736              		.loc 1 119 0
 737 001c 7B68     		ldr	r3, [r7, #4]
 738 001e DB7F     		ldrb	r3, [r3, #31]
 739 0020 1A00     		movs	r2, r3
 740 0022 FB68     		ldr	r3, [r7, #12]
 741 0024 9B18     		adds	r3, r3, r2
 742 0026 FB60     		str	r3, [r7, #12]
 120:Src/micromod.c **** 		if( source > dest ) source = dest;
 743              		.loc 1 120 0
 744 0028 FA68     		ldr	r2, [r7, #12]
 745 002a BB68     		ldr	r3, [r7, #8]
 746 002c 9A42     		cmp	r2, r3
 747 002e 12DD     		ble	.L31
 748              		.loc 1 120 0 is_stmt 0 discriminator 1
 749 0030 BB68     		ldr	r3, [r7, #8]
 750 0032 FB60     		str	r3, [r7, #12]
 751 0034 0FE0     		b	.L31
 752              	.L29:
 121:Src/micromod.c **** 	} else if( source > dest ) {
 753              		.loc 1 121 0 is_stmt 1
 754 0036 FA68     		ldr	r2, [r7, #12]
 755 0038 BB68     		ldr	r3, [r7, #8]
 756 003a 9A42     		cmp	r2, r3
 757 003c 0BDD     		ble	.L31
 122:Src/micromod.c **** 		source -= chan->porta_speed;
 758              		.loc 1 122 0
 759 003e 7B68     		ldr	r3, [r7, #4]
 760 0040 DB7F     		ldrb	r3, [r3, #31]
 761 0042 1A00     		movs	r2, r3
 762 0044 FB68     		ldr	r3, [r7, #12]
 763 0046 9B1A     		subs	r3, r3, r2
 764 0048 FB60     		str	r3, [r7, #12]
 123:Src/micromod.c **** 		if( source < dest ) source = dest;
 765              		.loc 1 123 0
 766 004a FA68     		ldr	r2, [r7, #12]
 767 004c BB68     		ldr	r3, [r7, #8]
 768 004e 9A42     		cmp	r2, r3
 769 0050 01DA     		bge	.L31
 770              		.loc 1 123 0 is_stmt 0 discriminator 1
 771 0052 BB68     		ldr	r3, [r7, #8]
 772 0054 FB60     		str	r3, [r7, #12]
 773              	.L31:
 124:Src/micromod.c **** 	}
 125:Src/micromod.c **** 	chan->period = source;
 774              		.loc 1 125 0 is_stmt 1
 775 0056 FB68     		ldr	r3, [r7, #12]
 776 0058 9AB2     		uxth	r2, r3
 777 005a 7B68     		ldr	r3, [r7, #4]
 778 005c DA80     		strh	r2, [r3, #6]
 126:Src/micromod.c **** }
 779              		.loc 1 126 0
 780 005e C046     		nop
 781 0060 BD46     		mov	sp, r7
 782 0062 04B0     		add	sp, sp, #16
ARM GAS  /tmp/ccaMRnUL.s 			page 16


 783              		@ sp needed
 784 0064 80BD     		pop	{r7, pc}
 785              		.cfi_endproc
 786              	.LFE5:
 788              		.section	.text.volume_slide,"ax",%progbits
 789              		.align	1
 790              		.syntax unified
 791              		.code	16
 792              		.thumb_func
 793              		.fpu softvfp
 795              	volume_slide:
 796              	.LFB6:
 127:Src/micromod.c **** 
 128:Src/micromod.c **** static void volume_slide( struct channel *chan, long param ) {
 797              		.loc 1 128 0
 798              		.cfi_startproc
 799 0000 80B5     		push	{r7, lr}
 800              	.LCFI18:
 801              		.cfi_def_cfa_offset 8
 802              		.cfi_offset 7, -8
 803              		.cfi_offset 14, -4
 804 0002 84B0     		sub	sp, sp, #16
 805              	.LCFI19:
 806              		.cfi_def_cfa_offset 24
 807 0004 00AF     		add	r7, sp, #0
 808              	.LCFI20:
 809              		.cfi_def_cfa_register 7
 810 0006 7860     		str	r0, [r7, #4]
 811 0008 3960     		str	r1, [r7]
 129:Src/micromod.c **** 	long volume;
 130:Src/micromod.c **** 	volume = chan->volume + ( param >> 4 ) - ( param & 0xF );
 812              		.loc 1 130 0
 813 000a 7B68     		ldr	r3, [r7, #4]
 814 000c 1B7E     		ldrb	r3, [r3, #24]
 815 000e 1A00     		movs	r2, r3
 816 0010 3B68     		ldr	r3, [r7]
 817 0012 1B11     		asrs	r3, r3, #4
 818 0014 D218     		adds	r2, r2, r3
 819 0016 3B68     		ldr	r3, [r7]
 820 0018 0F21     		movs	r1, #15
 821 001a 0B40     		ands	r3, r1
 822 001c D31A     		subs	r3, r2, r3
 823 001e FB60     		str	r3, [r7, #12]
 131:Src/micromod.c **** 	if( volume < 0 ) volume = 0;
 824              		.loc 1 131 0
 825 0020 FB68     		ldr	r3, [r7, #12]
 826 0022 002B     		cmp	r3, #0
 827 0024 01DA     		bge	.L33
 828              		.loc 1 131 0 is_stmt 0 discriminator 1
 829 0026 0023     		movs	r3, #0
 830 0028 FB60     		str	r3, [r7, #12]
 831              	.L33:
 132:Src/micromod.c **** 	if( volume > 64 ) volume = 64;
 832              		.loc 1 132 0 is_stmt 1
 833 002a FB68     		ldr	r3, [r7, #12]
 834 002c 402B     		cmp	r3, #64
 835 002e 01DD     		ble	.L34
ARM GAS  /tmp/ccaMRnUL.s 			page 17


 836              		.loc 1 132 0 is_stmt 0 discriminator 1
 837 0030 4023     		movs	r3, #64
 838 0032 FB60     		str	r3, [r7, #12]
 839              	.L34:
 133:Src/micromod.c **** 	chan->volume = volume;
 840              		.loc 1 133 0 is_stmt 1
 841 0034 FB68     		ldr	r3, [r7, #12]
 842 0036 DAB2     		uxtb	r2, r3
 843 0038 7B68     		ldr	r3, [r7, #4]
 844 003a 1A76     		strb	r2, [r3, #24]
 134:Src/micromod.c **** }
 845              		.loc 1 134 0
 846 003c C046     		nop
 847 003e BD46     		mov	sp, r7
 848 0040 04B0     		add	sp, sp, #16
 849              		@ sp needed
 850 0042 80BD     		pop	{r7, pc}
 851              		.cfi_endproc
 852              	.LFE6:
 854              		.section	.text.waveform,"ax",%progbits
 855              		.align	1
 856              		.syntax unified
 857              		.code	16
 858              		.thumb_func
 859              		.fpu softvfp
 861              	waveform:
 862              	.LFB7:
 135:Src/micromod.c **** 
 136:Src/micromod.c **** static long waveform( long phase, long type ) {
 863              		.loc 1 136 0
 864              		.cfi_startproc
 865 0000 80B5     		push	{r7, lr}
 866              	.LCFI21:
 867              		.cfi_def_cfa_offset 8
 868              		.cfi_offset 7, -8
 869              		.cfi_offset 14, -4
 870 0002 84B0     		sub	sp, sp, #16
 871              	.LCFI22:
 872              		.cfi_def_cfa_offset 24
 873 0004 00AF     		add	r7, sp, #0
 874              	.LCFI23:
 875              		.cfi_def_cfa_register 7
 876 0006 7860     		str	r0, [r7, #4]
 877 0008 3960     		str	r1, [r7]
 137:Src/micromod.c **** 	long amplitude = 0;
 878              		.loc 1 137 0
 879 000a 0023     		movs	r3, #0
 880 000c FB60     		str	r3, [r7, #12]
 138:Src/micromod.c **** 	switch( type & 0x3 ) {
 881              		.loc 1 138 0
 882 000e 3B68     		ldr	r3, [r7]
 883 0010 0322     		movs	r2, #3
 884 0012 1340     		ands	r3, r2
 885 0014 012B     		cmp	r3, #1
 886 0016 17D0     		beq	.L37
 887 0018 02DC     		bgt	.L38
 888 001a 002B     		cmp	r3, #0
ARM GAS  /tmp/ccaMRnUL.s 			page 18


 889 001c 05D0     		beq	.L39
 890 001e 37E0     		b	.L36
 891              	.L38:
 892 0020 022B     		cmp	r3, #2
 893 0022 1BD0     		beq	.L40
 894 0024 032B     		cmp	r3, #3
 895 0026 22D0     		beq	.L41
 896 0028 32E0     		b	.L36
 897              	.L39:
 139:Src/micromod.c **** 		case 0: /* Sine. */
 140:Src/micromod.c **** 			amplitude = sine_table[ phase & 0x1F ];
 898              		.loc 1 140 0
 899 002a 7B68     		ldr	r3, [r7, #4]
 900 002c 1F22     		movs	r2, #31
 901 002e 1340     		ands	r3, r2
 902 0030 1A4A     		ldr	r2, .L45
 903 0032 D35C     		ldrb	r3, [r2, r3]
 904 0034 FB60     		str	r3, [r7, #12]
 141:Src/micromod.c **** 			if( ( phase & 0x20 ) > 0 ) amplitude = -amplitude;
 905              		.loc 1 141 0
 906 0036 7B68     		ldr	r3, [r7, #4]
 907 0038 2022     		movs	r2, #32
 908 003a 1340     		ands	r3, r2
 909 003c 002B     		cmp	r3, #0
 910 003e 26DD     		ble	.L44
 911              		.loc 1 141 0 is_stmt 0 discriminator 1
 912 0040 FB68     		ldr	r3, [r7, #12]
 913 0042 5B42     		rsbs	r3, r3, #0
 914 0044 FB60     		str	r3, [r7, #12]
 142:Src/micromod.c **** 			break;
 915              		.loc 1 142 0 is_stmt 1 discriminator 1
 916 0046 22E0     		b	.L44
 917              	.L37:
 143:Src/micromod.c **** 		case 1: /* Saw Down. */
 144:Src/micromod.c **** 			amplitude = 255 - ( ( ( phase + 0x20 ) & 0x3F ) << 3 );
 918              		.loc 1 144 0
 919 0048 7B68     		ldr	r3, [r7, #4]
 920 004a 2033     		adds	r3, r3, #32
 921 004c DA00     		lsls	r2, r3, #3
 922 004e FC23     		movs	r3, #252
 923 0050 5B00     		lsls	r3, r3, #1
 924 0052 1340     		ands	r3, r2
 925 0054 FF22     		movs	r2, #255
 926 0056 D31A     		subs	r3, r2, r3
 927 0058 FB60     		str	r3, [r7, #12]
 145:Src/micromod.c **** 			break;
 928              		.loc 1 145 0
 929 005a 19E0     		b	.L36
 930              	.L40:
 146:Src/micromod.c **** 		case 2: /* Square. */
 147:Src/micromod.c **** 			amplitude = 255 - ( ( phase & 0x20 ) << 4 );
 931              		.loc 1 147 0
 932 005c 7B68     		ldr	r3, [r7, #4]
 933 005e 1A01     		lsls	r2, r3, #4
 934 0060 8023     		movs	r3, #128
 935 0062 9B00     		lsls	r3, r3, #2
 936 0064 1340     		ands	r3, r2
ARM GAS  /tmp/ccaMRnUL.s 			page 19


 937 0066 FF22     		movs	r2, #255
 938 0068 D31A     		subs	r3, r2, r3
 939 006a FB60     		str	r3, [r7, #12]
 148:Src/micromod.c **** 			break;
 940              		.loc 1 148 0
 941 006c 10E0     		b	.L36
 942              	.L41:
 149:Src/micromod.c **** 		case 3: /* Random. */
 150:Src/micromod.c **** 			amplitude = ( random_seed >> 20 ) - 255;
 943              		.loc 1 150 0
 944 006e 0C4B     		ldr	r3, .L45+4
 945 0070 1B68     		ldr	r3, [r3]
 946 0072 1B15     		asrs	r3, r3, #20
 947 0074 FF3B     		subs	r3, r3, #255
 948 0076 FB60     		str	r3, [r7, #12]
 151:Src/micromod.c **** 			random_seed = ( random_seed * 65 + 17 ) & 0x1FFFFFFF;
 949              		.loc 1 151 0
 950 0078 094B     		ldr	r3, .L45+4
 951 007a 1A68     		ldr	r2, [r3]
 952 007c 1300     		movs	r3, r2
 953 007e 9B01     		lsls	r3, r3, #6
 954 0080 9B18     		adds	r3, r3, r2
 955 0082 1133     		adds	r3, r3, #17
 956 0084 DB00     		lsls	r3, r3, #3
 957 0086 DA08     		lsrs	r2, r3, #3
 958 0088 054B     		ldr	r3, .L45+4
 959 008a 1A60     		str	r2, [r3]
 152:Src/micromod.c **** 			break;
 960              		.loc 1 152 0
 961 008c 00E0     		b	.L36
 962              	.L44:
 142:Src/micromod.c **** 		case 1: /* Saw Down. */
 963              		.loc 1 142 0
 964 008e C046     		nop
 965              	.L36:
 153:Src/micromod.c **** 	}
 154:Src/micromod.c **** 	return amplitude;
 966              		.loc 1 154 0
 967 0090 FB68     		ldr	r3, [r7, #12]
 155:Src/micromod.c **** }
 968              		.loc 1 155 0
 969 0092 1800     		movs	r0, r3
 970 0094 BD46     		mov	sp, r7
 971 0096 04B0     		add	sp, sp, #16
 972              		@ sp needed
 973 0098 80BD     		pop	{r7, pc}
 974              	.L46:
 975 009a C046     		.align	2
 976              	.L45:
 977 009c 00000000 		.word	sine_table
 978 00a0 00000000 		.word	random_seed
 979              		.cfi_endproc
 980              	.LFE7:
 982              		.section	.text.vibrato,"ax",%progbits
 983              		.align	1
 984              		.syntax unified
 985              		.code	16
ARM GAS  /tmp/ccaMRnUL.s 			page 20


 986              		.thumb_func
 987              		.fpu softvfp
 989              	vibrato:
 990              	.LFB8:
 156:Src/micromod.c **** 
 157:Src/micromod.c **** static void vibrato( struct channel *chan ) {
 991              		.loc 1 157 0
 992              		.cfi_startproc
 993 0000 80B5     		push	{r7, lr}
 994              	.LCFI24:
 995              		.cfi_def_cfa_offset 8
 996              		.cfi_offset 7, -8
 997              		.cfi_offset 14, -4
 998 0002 82B0     		sub	sp, sp, #8
 999              	.LCFI25:
 1000              		.cfi_def_cfa_offset 16
 1001 0004 00AF     		add	r7, sp, #0
 1002              	.LCFI26:
 1003              		.cfi_def_cfa_register 7
 1004 0006 7860     		str	r0, [r7, #4]
 158:Src/micromod.c **** 	chan->vibrato_add = waveform( chan->vibrato_phase, chan->vibrato_type ) * chan->vibrato_depth >> 7
 1005              		.loc 1 158 0
 1006 0008 7B68     		ldr	r3, [r7, #4]
 1007 000a 2322     		movs	r2, #35
 1008 000c 9B5C     		ldrb	r3, [r3, r2]
 1009 000e 1800     		movs	r0, r3
 1010 0010 7B68     		ldr	r3, [r7, #4]
 1011 0012 2222     		movs	r2, #34
 1012 0014 9B5C     		ldrb	r3, [r3, r2]
 1013 0016 1900     		movs	r1, r3
 1014 0018 FFF7FEFF 		bl	waveform
 1015 001c 0100     		movs	r1, r0
 1016 001e 7B68     		ldr	r3, [r7, #4]
 1017 0020 2522     		movs	r2, #37
 1018 0022 9B5C     		ldrb	r3, [r3, r2]
 1019 0024 4B43     		muls	r3, r1
 1020 0026 DB11     		asrs	r3, r3, #7
 1021 0028 59B2     		sxtb	r1, r3
 1022 002a 7B68     		ldr	r3, [r7, #4]
 1023 002c 2B22     		movs	r2, #43
 1024 002e 9954     		strb	r1, [r3, r2]
 159:Src/micromod.c **** }
 1025              		.loc 1 159 0
 1026 0030 C046     		nop
 1027 0032 BD46     		mov	sp, r7
 1028 0034 02B0     		add	sp, sp, #8
 1029              		@ sp needed
 1030 0036 80BD     		pop	{r7, pc}
 1031              		.cfi_endproc
 1032              	.LFE8:
 1034              		.section	.text.tremolo,"ax",%progbits
 1035              		.align	1
 1036              		.syntax unified
 1037              		.code	16
 1038              		.thumb_func
 1039              		.fpu softvfp
 1041              	tremolo:
ARM GAS  /tmp/ccaMRnUL.s 			page 21


 1042              	.LFB9:
 160:Src/micromod.c **** 
 161:Src/micromod.c **** static void tremolo( struct channel *chan ) {
 1043              		.loc 1 161 0
 1044              		.cfi_startproc
 1045 0000 80B5     		push	{r7, lr}
 1046              	.LCFI27:
 1047              		.cfi_def_cfa_offset 8
 1048              		.cfi_offset 7, -8
 1049              		.cfi_offset 14, -4
 1050 0002 82B0     		sub	sp, sp, #8
 1051              	.LCFI28:
 1052              		.cfi_def_cfa_offset 16
 1053 0004 00AF     		add	r7, sp, #0
 1054              	.LCFI29:
 1055              		.cfi_def_cfa_register 7
 1056 0006 7860     		str	r0, [r7, #4]
 162:Src/micromod.c **** 	chan->tremolo_add = waveform( chan->tremolo_phase, chan->tremolo_type ) * chan->tremolo_depth >> 6
 1057              		.loc 1 162 0
 1058 0008 7B68     		ldr	r3, [r7, #4]
 1059 000a 2722     		movs	r2, #39
 1060 000c 9B5C     		ldrb	r3, [r3, r2]
 1061 000e 1800     		movs	r0, r3
 1062 0010 7B68     		ldr	r3, [r7, #4]
 1063 0012 2622     		movs	r2, #38
 1064 0014 9B5C     		ldrb	r3, [r3, r2]
 1065 0016 1900     		movs	r1, r3
 1066 0018 FFF7FEFF 		bl	waveform
 1067 001c 0100     		movs	r1, r0
 1068 001e 7B68     		ldr	r3, [r7, #4]
 1069 0020 2922     		movs	r2, #41
 1070 0022 9B5C     		ldrb	r3, [r3, r2]
 1071 0024 4B43     		muls	r3, r1
 1072 0026 9B11     		asrs	r3, r3, #6
 1073 0028 59B2     		sxtb	r1, r3
 1074 002a 7B68     		ldr	r3, [r7, #4]
 1075 002c 2A22     		movs	r2, #42
 1076 002e 9954     		strb	r1, [r3, r2]
 163:Src/micromod.c **** }
 1077              		.loc 1 163 0
 1078 0030 C046     		nop
 1079 0032 BD46     		mov	sp, r7
 1080 0034 02B0     		add	sp, sp, #8
 1081              		@ sp needed
 1082 0036 80BD     		pop	{r7, pc}
 1083              		.cfi_endproc
 1084              	.LFE9:
 1086              		.section	.text.trigger,"ax",%progbits
 1087              		.align	1
 1088              		.syntax unified
 1089              		.code	16
 1090              		.thumb_func
 1091              		.fpu softvfp
 1093              	trigger:
 1094              	.LFB10:
 164:Src/micromod.c **** 
 165:Src/micromod.c **** static void trigger( struct channel *channel ) {
ARM GAS  /tmp/ccaMRnUL.s 			page 22


 1095              		.loc 1 165 0
 1096              		.cfi_startproc
 1097 0000 80B5     		push	{r7, lr}
 1098              	.LCFI30:
 1099              		.cfi_def_cfa_offset 8
 1100              		.cfi_offset 7, -8
 1101              		.cfi_offset 14, -4
 1102 0002 84B0     		sub	sp, sp, #16
 1103              	.LCFI31:
 1104              		.cfi_def_cfa_offset 24
 1105 0004 00AF     		add	r7, sp, #0
 1106              	.LCFI32:
 1107              		.cfi_def_cfa_register 7
 1108 0006 7860     		str	r0, [r7, #4]
 166:Src/micromod.c **** 	long period, ins;
 167:Src/micromod.c **** 	ins = channel->note.instrument;
 1109              		.loc 1 167 0
 1110 0008 7B68     		ldr	r3, [r7, #4]
 1111 000a 9B78     		ldrb	r3, [r3, #2]
 1112 000c FB60     		str	r3, [r7, #12]
 168:Src/micromod.c **** 	if( ins > 0 && ins < 32 ) {
 1113              		.loc 1 168 0
 1114 000e FB68     		ldr	r3, [r7, #12]
 1115 0010 002B     		cmp	r3, #0
 1116 0012 27DD     		ble	.L50
 1117              		.loc 1 168 0 is_stmt 0 discriminator 1
 1118 0014 FB68     		ldr	r3, [r7, #12]
 1119 0016 1F2B     		cmp	r3, #31
 1120 0018 24DC     		bgt	.L50
 169:Src/micromod.c **** 		channel->assigned = ins;
 1121              		.loc 1 169 0 is_stmt 1
 1122 001a FB68     		ldr	r3, [r7, #12]
 1123 001c DAB2     		uxtb	r2, r3
 1124 001e 7B68     		ldr	r3, [r7, #4]
 1125 0020 9A77     		strb	r2, [r3, #30]
 170:Src/micromod.c **** 		channel->sample_offset = 0;
 1126              		.loc 1 170 0
 1127 0022 7B68     		ldr	r3, [r7, #4]
 1128 0024 0022     		movs	r2, #0
 1129 0026 DA60     		str	r2, [r3, #12]
 171:Src/micromod.c **** 		channel->fine_tune = instruments[ ins ].fine_tune;
 1130              		.loc 1 171 0
 1131 0028 3C4A     		ldr	r2, .L56
 1132 002a FB68     		ldr	r3, [r7, #12]
 1133 002c 1B01     		lsls	r3, r3, #4
 1134 002e D318     		adds	r3, r2, r3
 1135 0030 0133     		adds	r3, r3, #1
 1136 0032 1A78     		ldrb	r2, [r3]
 1137 0034 7B68     		ldr	r3, [r7, #4]
 1138 0036 9A76     		strb	r2, [r3, #26]
 172:Src/micromod.c **** 		channel->volume = instruments[ ins ].volume;
 1139              		.loc 1 172 0
 1140 0038 384B     		ldr	r3, .L56
 1141 003a FA68     		ldr	r2, [r7, #12]
 1142 003c 1201     		lsls	r2, r2, #4
 1143 003e D25C     		ldrb	r2, [r2, r3]
 1144 0040 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccaMRnUL.s 			page 23


 1145 0042 1A76     		strb	r2, [r3, #24]
 173:Src/micromod.c **** 		if( instruments[ ins ].loop_length > 0 && channel->instrument > 0 )
 1146              		.loc 1 173 0
 1147 0044 354A     		ldr	r2, .L56
 1148 0046 FB68     		ldr	r3, [r7, #12]
 1149 0048 1B01     		lsls	r3, r3, #4
 1150 004a D318     		adds	r3, r2, r3
 1151 004c 0833     		adds	r3, r3, #8
 1152 004e 1B68     		ldr	r3, [r3]
 1153 0050 002B     		cmp	r3, #0
 1154 0052 07D0     		beq	.L50
 1155              		.loc 1 173 0 is_stmt 0 discriminator 1
 1156 0054 7B68     		ldr	r3, [r7, #4]
 1157 0056 5B7F     		ldrb	r3, [r3, #29]
 1158 0058 002B     		cmp	r3, #0
 1159 005a 03D0     		beq	.L50
 174:Src/micromod.c **** 			channel->instrument = ins;
 1160              		.loc 1 174 0 is_stmt 1
 1161 005c FB68     		ldr	r3, [r7, #12]
 1162 005e DAB2     		uxtb	r2, r3
 1163 0060 7B68     		ldr	r3, [r7, #4]
 1164 0062 5A77     		strb	r2, [r3, #29]
 1165              	.L50:
 175:Src/micromod.c **** 	}
 176:Src/micromod.c **** 	if( channel->note.effect == 0x09 ) {
 1166              		.loc 1 176 0
 1167 0064 7B68     		ldr	r3, [r7, #4]
 1168 0066 DB78     		ldrb	r3, [r3, #3]
 1169 0068 092B     		cmp	r3, #9
 1170 006a 06D1     		bne	.L51
 177:Src/micromod.c **** 		channel->sample_offset = ( channel->note.param & 0xFF ) << 8;
 1171              		.loc 1 177 0
 1172 006c 7B68     		ldr	r3, [r7, #4]
 1173 006e 1B79     		ldrb	r3, [r3, #4]
 1174 0070 1B02     		lsls	r3, r3, #8
 1175 0072 1A00     		movs	r2, r3
 1176 0074 7B68     		ldr	r3, [r7, #4]
 1177 0076 DA60     		str	r2, [r3, #12]
 1178 0078 07E0     		b	.L52
 1179              	.L51:
 178:Src/micromod.c **** 	} else if( channel->note.effect == 0x15 ) {
 1180              		.loc 1 178 0
 1181 007a 7B68     		ldr	r3, [r7, #4]
 1182 007c DB78     		ldrb	r3, [r3, #3]
 1183 007e 152B     		cmp	r3, #21
 1184 0080 03D1     		bne	.L52
 179:Src/micromod.c **** 		channel->fine_tune = channel->note.param;
 1185              		.loc 1 179 0
 1186 0082 7B68     		ldr	r3, [r7, #4]
 1187 0084 1A79     		ldrb	r2, [r3, #4]
 1188 0086 7B68     		ldr	r3, [r7, #4]
 1189 0088 9A76     		strb	r2, [r3, #26]
 1190              	.L52:
 180:Src/micromod.c **** 	}
 181:Src/micromod.c **** 	if( channel->note.key > 0 ) {
 1191              		.loc 1 181 0
 1192 008a 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccaMRnUL.s 			page 24


 1193 008c 1B88     		ldrh	r3, [r3]
 1194 008e 002B     		cmp	r3, #0
 1195 0090 40D0     		beq	.L55
 182:Src/micromod.c **** 		period = ( channel->note.key * fine_tuning[ channel->fine_tune & 0xF ] ) >> 11;
 1196              		.loc 1 182 0
 1197 0092 7B68     		ldr	r3, [r7, #4]
 1198 0094 1B88     		ldrh	r3, [r3]
 1199 0096 1900     		movs	r1, r3
 1200 0098 7B68     		ldr	r3, [r7, #4]
 1201 009a 9B7E     		ldrb	r3, [r3, #26]
 1202 009c 1A00     		movs	r2, r3
 1203 009e 0F23     		movs	r3, #15
 1204 00a0 1A40     		ands	r2, r3
 1205 00a2 1F4B     		ldr	r3, .L56+4
 1206 00a4 5200     		lsls	r2, r2, #1
 1207 00a6 D35A     		ldrh	r3, [r2, r3]
 1208 00a8 4B43     		muls	r3, r1
 1209 00aa DB12     		asrs	r3, r3, #11
 1210 00ac BB60     		str	r3, [r7, #8]
 183:Src/micromod.c **** 		channel->porta_period = ( period >> 1 ) + ( period & 1 );
 1211              		.loc 1 183 0
 1212 00ae BB68     		ldr	r3, [r7, #8]
 1213 00b0 5B10     		asrs	r3, r3, #1
 1214 00b2 9AB2     		uxth	r2, r3
 1215 00b4 BB68     		ldr	r3, [r7, #8]
 1216 00b6 9BB2     		uxth	r3, r3
 1217 00b8 0121     		movs	r1, #1
 1218 00ba 0B40     		ands	r3, r1
 1219 00bc 9BB2     		uxth	r3, r3
 1220 00be D318     		adds	r3, r2, r3
 1221 00c0 9AB2     		uxth	r2, r3
 1222 00c2 7B68     		ldr	r3, [r7, #4]
 1223 00c4 1A81     		strh	r2, [r3, #8]
 184:Src/micromod.c **** 		if( channel->note.effect != 0x3 && channel->note.effect != 0x5 ) {
 1224              		.loc 1 184 0
 1225 00c6 7B68     		ldr	r3, [r7, #4]
 1226 00c8 DB78     		ldrb	r3, [r3, #3]
 1227 00ca 032B     		cmp	r3, #3
 1228 00cc 22D0     		beq	.L55
 1229              		.loc 1 184 0 is_stmt 0 discriminator 1
 1230 00ce 7B68     		ldr	r3, [r7, #4]
 1231 00d0 DB78     		ldrb	r3, [r3, #3]
 1232 00d2 052B     		cmp	r3, #5
 1233 00d4 1ED0     		beq	.L55
 185:Src/micromod.c **** 			channel->instrument = channel->assigned;
 1234              		.loc 1 185 0 is_stmt 1
 1235 00d6 7B68     		ldr	r3, [r7, #4]
 1236 00d8 9A7F     		ldrb	r2, [r3, #30]
 1237 00da 7B68     		ldr	r3, [r7, #4]
 1238 00dc 5A77     		strb	r2, [r3, #29]
 186:Src/micromod.c **** 			channel->period = channel->porta_period;
 1239              		.loc 1 186 0
 1240 00de 7B68     		ldr	r3, [r7, #4]
 1241 00e0 1A89     		ldrh	r2, [r3, #8]
 1242 00e2 7B68     		ldr	r3, [r7, #4]
 1243 00e4 DA80     		strh	r2, [r3, #6]
 187:Src/micromod.c **** 			channel->sample_idx = ( channel->sample_offset << FP_SHIFT );
ARM GAS  /tmp/ccaMRnUL.s 			page 25


 1244              		.loc 1 187 0
 1245 00e6 7B68     		ldr	r3, [r7, #4]
 1246 00e8 DB68     		ldr	r3, [r3, #12]
 1247 00ea 9A03     		lsls	r2, r3, #14
 1248 00ec 7B68     		ldr	r3, [r7, #4]
 1249 00ee 1A61     		str	r2, [r3, #16]
 188:Src/micromod.c **** 			if( channel->vibrato_type < 4 ) channel->vibrato_phase = 0;
 1250              		.loc 1 188 0
 1251 00f0 7B68     		ldr	r3, [r7, #4]
 1252 00f2 2222     		movs	r2, #34
 1253 00f4 9B5C     		ldrb	r3, [r3, r2]
 1254 00f6 032B     		cmp	r3, #3
 1255 00f8 03D8     		bhi	.L54
 1256              		.loc 1 188 0 is_stmt 0 discriminator 1
 1257 00fa 7B68     		ldr	r3, [r7, #4]
 1258 00fc 2322     		movs	r2, #35
 1259 00fe 0021     		movs	r1, #0
 1260 0100 9954     		strb	r1, [r3, r2]
 1261              	.L54:
 189:Src/micromod.c **** 			if( channel->tremolo_type < 4 ) channel->tremolo_phase = 0;
 1262              		.loc 1 189 0 is_stmt 1
 1263 0102 7B68     		ldr	r3, [r7, #4]
 1264 0104 2622     		movs	r2, #38
 1265 0106 9B5C     		ldrb	r3, [r3, r2]
 1266 0108 032B     		cmp	r3, #3
 1267 010a 03D8     		bhi	.L55
 1268              		.loc 1 189 0 is_stmt 0 discriminator 1
 1269 010c 7B68     		ldr	r3, [r7, #4]
 1270 010e 2722     		movs	r2, #39
 1271 0110 0021     		movs	r1, #0
 1272 0112 9954     		strb	r1, [r3, r2]
 1273              	.L55:
 190:Src/micromod.c **** 		}
 191:Src/micromod.c **** 	}
 192:Src/micromod.c **** }
 1274              		.loc 1 192 0 is_stmt 1
 1275 0114 C046     		nop
 1276 0116 BD46     		mov	sp, r7
 1277 0118 04B0     		add	sp, sp, #16
 1278              		@ sp needed
 1279 011a 80BD     		pop	{r7, pc}
 1280              	.L57:
 1281              		.align	2
 1282              	.L56:
 1283 011c 00000000 		.word	instruments
 1284 0120 00000000 		.word	fine_tuning
 1285              		.cfi_endproc
 1286              	.LFE10:
 1288              		.section	.text.channel_row,"ax",%progbits
 1289              		.align	1
 1290              		.syntax unified
 1291              		.code	16
 1292              		.thumb_func
 1293              		.fpu softvfp
 1295              	channel_row:
 1296              	.LFB11:
 193:Src/micromod.c **** 
ARM GAS  /tmp/ccaMRnUL.s 			page 26


 194:Src/micromod.c **** static void channel_row( struct channel *chan ) {
 1297              		.loc 1 194 0
 1298              		.cfi_startproc
 1299 0000 80B5     		push	{r7, lr}
 1300              	.LCFI33:
 1301              		.cfi_def_cfa_offset 8
 1302              		.cfi_offset 7, -8
 1303              		.cfi_offset 14, -4
 1304 0002 86B0     		sub	sp, sp, #24
 1305              	.LCFI34:
 1306              		.cfi_def_cfa_offset 32
 1307 0004 00AF     		add	r7, sp, #0
 1308              	.LCFI35:
 1309              		.cfi_def_cfa_register 7
 1310 0006 7860     		str	r0, [r7, #4]
 195:Src/micromod.c **** 	long effect, param, volume, period;
 196:Src/micromod.c **** 	effect = chan->note.effect;
 1311              		.loc 1 196 0
 1312 0008 7B68     		ldr	r3, [r7, #4]
 1313 000a DB78     		ldrb	r3, [r3, #3]
 1314 000c 7B61     		str	r3, [r7, #20]
 197:Src/micromod.c **** 	param = chan->note.param;
 1315              		.loc 1 197 0
 1316 000e 7B68     		ldr	r3, [r7, #4]
 1317 0010 1B79     		ldrb	r3, [r3, #4]
 1318 0012 3B61     		str	r3, [r7, #16]
 198:Src/micromod.c **** 	chan->vibrato_add = chan->tremolo_add = chan->arpeggio_add = chan->fx_count = 0;
 1319              		.loc 1 198 0
 1320 0014 7B68     		ldr	r3, [r7, #4]
 1321 0016 2122     		movs	r2, #33
 1322 0018 0021     		movs	r1, #0
 1323 001a 9954     		strb	r1, [r3, r2]
 1324 001c 7B68     		ldr	r3, [r7, #4]
 1325 001e 2C22     		movs	r2, #44
 1326 0020 0021     		movs	r1, #0
 1327 0022 9954     		strb	r1, [r3, r2]
 1328 0024 7B68     		ldr	r3, [r7, #4]
 1329 0026 2C22     		movs	r2, #44
 1330 0028 9956     		ldrsb	r1, [r3, r2]
 1331 002a 7B68     		ldr	r3, [r7, #4]
 1332 002c 2A22     		movs	r2, #42
 1333 002e 9954     		strb	r1, [r3, r2]
 1334 0030 7B68     		ldr	r3, [r7, #4]
 1335 0032 2A22     		movs	r2, #42
 1336 0034 9956     		ldrsb	r1, [r3, r2]
 1337 0036 7B68     		ldr	r3, [r7, #4]
 1338 0038 2B22     		movs	r2, #43
 1339 003a 9954     		strb	r1, [r3, r2]
 199:Src/micromod.c **** 	if( !( effect == 0x1D && param > 0 ) ) {
 1340              		.loc 1 199 0
 1341 003c 7B69     		ldr	r3, [r7, #20]
 1342 003e 1D2B     		cmp	r3, #29
 1343 0040 02D1     		bne	.L59
 1344              		.loc 1 199 0 is_stmt 0 discriminator 1
 1345 0042 3B69     		ldr	r3, [r7, #16]
 1346 0044 002B     		cmp	r3, #0
 1347 0046 03DC     		bgt	.L60
ARM GAS  /tmp/ccaMRnUL.s 			page 27


 1348              	.L59:
 200:Src/micromod.c **** 		/* Not note delay. */
 201:Src/micromod.c **** 		trigger( chan );
 1349              		.loc 1 201 0 is_stmt 1
 1350 0048 7B68     		ldr	r3, [r7, #4]
 1351 004a 1800     		movs	r0, r3
 1352 004c FFF7FEFF 		bl	trigger
 1353              	.L60:
 202:Src/micromod.c **** 	}
 203:Src/micromod.c **** 	switch( effect ) {
 1354              		.loc 1 203 0
 1355 0050 7B69     		ldr	r3, [r7, #20]
 1356 0052 033B     		subs	r3, r3, #3
 1357 0054 1B2B     		cmp	r3, #27
 1358 0056 00D9     		bls	.LCB1009
 1359 0058 57E1     		b	.L61	@long jump
 1360              	.LCB1009:
 1361 005a 9A00     		lsls	r2, r3, #2
 1362 005c AF4B     		ldr	r3, .L116
 1363 005e D318     		adds	r3, r2, r3
 1364 0060 1B68     		ldr	r3, [r3]
 1365 0062 9F46     		mov	pc, r3
 1366              		.section	.rodata.channel_row,"a",%progbits
 1367              		.align	2
 1368              	.L63:
 1369 0000 64000000 		.word	.L62
 1370 0004 76000000 		.word	.L64
 1371 0008 0A030000 		.word	.L61
 1372 000c B0000000 		.word	.L65
 1373 0010 BA000000 		.word	.L66
 1374 0014 F4000000 		.word	.L67
 1375 0018 0A030000 		.word	.L61
 1376 001c 0A030000 		.word	.L61
 1377 0020 16010000 		.word	.L68
 1378 0024 2E010000 		.word	.L69
 1379 0028 3E010000 		.word	.L70
 1380 002c 0A030000 		.word	.L61
 1381 0030 86010000 		.word	.L71
 1382 0034 0A030000 		.word	.L61
 1383 0038 AE010000 		.word	.L72
 1384 003c CA010000 		.word	.L73
 1385 0040 0A030000 		.word	.L61
 1386 0044 E8010000 		.word	.L74
 1387 0048 0A030000 		.word	.L61
 1388 004c FC010000 		.word	.L75
 1389 0050 80020000 		.word	.L76
 1390 0054 0A030000 		.word	.L61
 1391 0058 0A030000 		.word	.L61
 1392 005c 92020000 		.word	.L77
 1393 0060 AE020000 		.word	.L78
 1394 0064 CA020000 		.word	.L79
 1395 0068 0A030000 		.word	.L61
 1396 006c D8020000 		.word	.L80
 1397              		.section	.text.channel_row
 1398              	.L62:
 204:Src/micromod.c **** 		case 0x3: /* Tone Portamento.*/
 205:Src/micromod.c **** 			if( param > 0 ) chan->porta_speed = param;
ARM GAS  /tmp/ccaMRnUL.s 			page 28


 1399              		.loc 1 205 0
 1400 0064 3B69     		ldr	r3, [r7, #16]
 1401 0066 002B     		cmp	r3, #0
 1402 0068 00DC     		bgt	.LCB1023
 1403 006a 3DE1     		b	.L107	@long jump
 1404              	.LCB1023:
 1405              		.loc 1 205 0 is_stmt 0 discriminator 1
 1406 006c 3B69     		ldr	r3, [r7, #16]
 1407 006e DAB2     		uxtb	r2, r3
 1408 0070 7B68     		ldr	r3, [r7, #4]
 1409 0072 DA77     		strb	r2, [r3, #31]
 206:Src/micromod.c **** 			break;
 1410              		.loc 1 206 0 is_stmt 1 discriminator 1
 1411 0074 38E1     		b	.L107
 1412              	.L64:
 207:Src/micromod.c **** 		case 0x4: /* Vibrato.*/
 208:Src/micromod.c **** 			if( ( param & 0xF0 ) > 0 ) chan->vibrato_speed = param >> 4;
 1413              		.loc 1 208 0
 1414 0076 3B69     		ldr	r3, [r7, #16]
 1415 0078 F022     		movs	r2, #240
 1416 007a 1340     		ands	r3, r2
 1417 007c 002B     		cmp	r3, #0
 1418 007e 05DD     		ble	.L82
 1419              		.loc 1 208 0 is_stmt 0 discriminator 1
 1420 0080 3B69     		ldr	r3, [r7, #16]
 1421 0082 1B11     		asrs	r3, r3, #4
 1422 0084 D9B2     		uxtb	r1, r3
 1423 0086 7B68     		ldr	r3, [r7, #4]
 1424 0088 2422     		movs	r2, #36
 1425 008a 9954     		strb	r1, [r3, r2]
 1426              	.L82:
 209:Src/micromod.c **** 			if( ( param & 0x0F ) > 0 ) chan->vibrato_depth = param & 0xF;
 1427              		.loc 1 209 0 is_stmt 1
 1428 008c 3B69     		ldr	r3, [r7, #16]
 1429 008e 0F22     		movs	r2, #15
 1430 0090 1340     		ands	r3, r2
 1431 0092 002B     		cmp	r3, #0
 1432 0094 07DD     		ble	.L83
 1433              		.loc 1 209 0 is_stmt 0 discriminator 1
 1434 0096 3B69     		ldr	r3, [r7, #16]
 1435 0098 DBB2     		uxtb	r3, r3
 1436 009a 0F22     		movs	r2, #15
 1437 009c 1340     		ands	r3, r2
 1438 009e D9B2     		uxtb	r1, r3
 1439 00a0 7B68     		ldr	r3, [r7, #4]
 1440 00a2 2522     		movs	r2, #37
 1441 00a4 9954     		strb	r1, [r3, r2]
 1442              	.L83:
 210:Src/micromod.c **** 			vibrato( chan );
 1443              		.loc 1 210 0 is_stmt 1
 1444 00a6 7B68     		ldr	r3, [r7, #4]
 1445 00a8 1800     		movs	r0, r3
 1446 00aa FFF7FEFF 		bl	vibrato
 211:Src/micromod.c **** 			break;
 1447              		.loc 1 211 0
 1448 00ae 2CE1     		b	.L61
 1449              	.L65:
ARM GAS  /tmp/ccaMRnUL.s 			page 29


 212:Src/micromod.c **** 		case 0x6: /* Vibrato + Volume Slide.*/
 213:Src/micromod.c **** 			vibrato( chan );
 1450              		.loc 1 213 0
 1451 00b0 7B68     		ldr	r3, [r7, #4]
 1452 00b2 1800     		movs	r0, r3
 1453 00b4 FFF7FEFF 		bl	vibrato
 214:Src/micromod.c **** 			break;
 1454              		.loc 1 214 0
 1455 00b8 27E1     		b	.L61
 1456              	.L66:
 215:Src/micromod.c **** 		case 0x7: /* Tremolo.*/
 216:Src/micromod.c **** 			if( ( param & 0xF0 ) > 0 ) chan->tremolo_speed = param >> 4;
 1457              		.loc 1 216 0
 1458 00ba 3B69     		ldr	r3, [r7, #16]
 1459 00bc F022     		movs	r2, #240
 1460 00be 1340     		ands	r3, r2
 1461 00c0 002B     		cmp	r3, #0
 1462 00c2 05DD     		ble	.L84
 1463              		.loc 1 216 0 is_stmt 0 discriminator 1
 1464 00c4 3B69     		ldr	r3, [r7, #16]
 1465 00c6 1B11     		asrs	r3, r3, #4
 1466 00c8 D9B2     		uxtb	r1, r3
 1467 00ca 7B68     		ldr	r3, [r7, #4]
 1468 00cc 2822     		movs	r2, #40
 1469 00ce 9954     		strb	r1, [r3, r2]
 1470              	.L84:
 217:Src/micromod.c **** 			if( ( param & 0x0F ) > 0 ) chan->tremolo_depth = param & 0xF;
 1471              		.loc 1 217 0 is_stmt 1
 1472 00d0 3B69     		ldr	r3, [r7, #16]
 1473 00d2 0F22     		movs	r2, #15
 1474 00d4 1340     		ands	r3, r2
 1475 00d6 002B     		cmp	r3, #0
 1476 00d8 07DD     		ble	.L85
 1477              		.loc 1 217 0 is_stmt 0 discriminator 1
 1478 00da 3B69     		ldr	r3, [r7, #16]
 1479 00dc DBB2     		uxtb	r3, r3
 1480 00de 0F22     		movs	r2, #15
 1481 00e0 1340     		ands	r3, r2
 1482 00e2 D9B2     		uxtb	r1, r3
 1483 00e4 7B68     		ldr	r3, [r7, #4]
 1484 00e6 2922     		movs	r2, #41
 1485 00e8 9954     		strb	r1, [r3, r2]
 1486              	.L85:
 218:Src/micromod.c **** 			tremolo( chan );
 1487              		.loc 1 218 0 is_stmt 1
 1488 00ea 7B68     		ldr	r3, [r7, #4]
 1489 00ec 1800     		movs	r0, r3
 1490 00ee FFF7FEFF 		bl	tremolo
 219:Src/micromod.c **** 			break;
 1491              		.loc 1 219 0
 1492 00f2 0AE1     		b	.L61
 1493              	.L67:
 220:Src/micromod.c **** 		case 0x8: /* Set Panning. Not for 4-channel ProTracker. */
 221:Src/micromod.c **** 			if( num_channels != 4 ) {
 1494              		.loc 1 221 0
 1495 00f4 8A4B     		ldr	r3, .L116+4
 1496 00f6 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccaMRnUL.s 			page 30


 1497 00f8 042B     		cmp	r3, #4
 1498 00fa 00D1     		bne	.LCB1112
 1499 00fc F6E0     		b	.L108	@long jump
 1500              	.LCB1112:
 222:Src/micromod.c **** 				chan->panning = ( param < 128 ) ? ( param << 1 ) : 255;
 1501              		.loc 1 222 0
 1502 00fe 3B69     		ldr	r3, [r7, #16]
 1503 0100 7F2B     		cmp	r3, #127
 1504 0102 04DC     		bgt	.L87
 1505              		.loc 1 222 0 is_stmt 0 discriminator 1
 1506 0104 3B69     		ldr	r3, [r7, #16]
 1507 0106 DBB2     		uxtb	r3, r3
 1508 0108 DB18     		adds	r3, r3, r3
 1509 010a DAB2     		uxtb	r2, r3
 1510 010c 00E0     		b	.L88
 1511              	.L87:
 1512              		.loc 1 222 0 discriminator 2
 1513 010e FF22     		movs	r2, #255
 1514              	.L88:
 1515              		.loc 1 222 0 discriminator 4
 1516 0110 7B68     		ldr	r3, [r7, #4]
 1517 0112 5A76     		strb	r2, [r3, #25]
 223:Src/micromod.c **** 			}
 224:Src/micromod.c **** 			break;
 1518              		.loc 1 224 0 is_stmt 1 discriminator 4
 1519 0114 EAE0     		b	.L108
 1520              	.L68:
 225:Src/micromod.c **** 		case 0xB: /* Pattern Jump.*/
 226:Src/micromod.c **** 			if( pl_count < 0 ) {
 1521              		.loc 1 226 0
 1522 0116 834B     		ldr	r3, .L116+8
 1523 0118 1B68     		ldr	r3, [r3]
 1524 011a 002B     		cmp	r3, #0
 1525 011c 00DB     		blt	.LCB1136
 1526 011e E7E0     		b	.L109	@long jump
 1527              	.LCB1136:
 227:Src/micromod.c **** 				break_pattern = param;
 1528              		.loc 1 227 0
 1529 0120 814B     		ldr	r3, .L116+12
 1530 0122 3A69     		ldr	r2, [r7, #16]
 1531 0124 1A60     		str	r2, [r3]
 228:Src/micromod.c **** 				next_row = 0;
 1532              		.loc 1 228 0
 1533 0126 814B     		ldr	r3, .L116+16
 1534 0128 0022     		movs	r2, #0
 1535 012a 1A60     		str	r2, [r3]
 229:Src/micromod.c **** 			}
 230:Src/micromod.c **** 			break;
 1536              		.loc 1 230 0
 1537 012c E0E0     		b	.L109
 1538              	.L69:
 231:Src/micromod.c **** 		case 0xC: /* Set Volume.*/
 232:Src/micromod.c **** 			chan->volume = param > 64 ? 64 : param;
 1539              		.loc 1 232 0
 1540 012e 3B69     		ldr	r3, [r7, #16]
 1541 0130 402B     		cmp	r3, #64
 1542 0132 00DD     		ble	.L90
ARM GAS  /tmp/ccaMRnUL.s 			page 31


 1543 0134 4023     		movs	r3, #64
 1544              	.L90:
 1545 0136 DAB2     		uxtb	r2, r3
 1546 0138 7B68     		ldr	r3, [r7, #4]
 1547 013a 1A76     		strb	r2, [r3, #24]
 233:Src/micromod.c **** 			break;
 1548              		.loc 1 233 0
 1549 013c E5E0     		b	.L61
 1550              	.L70:
 234:Src/micromod.c **** 		case 0xD: /* Pattern Break.*/
 235:Src/micromod.c **** 			if( pl_count < 0 ) {
 1551              		.loc 1 235 0
 1552 013e 794B     		ldr	r3, .L116+8
 1553 0140 1B68     		ldr	r3, [r3]
 1554 0142 002B     		cmp	r3, #0
 1555 0144 00DB     		blt	.LCB1163
 1556 0146 D5E0     		b	.L110	@long jump
 1557              	.LCB1163:
 236:Src/micromod.c **** 				if( break_pattern < 0 ) break_pattern = pattern + 1;
 1558              		.loc 1 236 0
 1559 0148 774B     		ldr	r3, .L116+12
 1560 014a 1B68     		ldr	r3, [r3]
 1561 014c 002B     		cmp	r3, #0
 1562 014e 04DA     		bge	.L92
 1563              		.loc 1 236 0 is_stmt 0 discriminator 1
 1564 0150 774B     		ldr	r3, .L116+20
 1565 0152 1B68     		ldr	r3, [r3]
 1566 0154 5A1C     		adds	r2, r3, #1
 1567 0156 744B     		ldr	r3, .L116+12
 1568 0158 1A60     		str	r2, [r3]
 1569              	.L92:
 237:Src/micromod.c **** 				next_row = ( param >> 4 ) * 10 + ( param & 0xF );
 1570              		.loc 1 237 0 is_stmt 1
 1571 015a 3B69     		ldr	r3, [r7, #16]
 1572 015c 1A11     		asrs	r2, r3, #4
 1573 015e 1300     		movs	r3, r2
 1574 0160 9B00     		lsls	r3, r3, #2
 1575 0162 9B18     		adds	r3, r3, r2
 1576 0164 5B00     		lsls	r3, r3, #1
 1577 0166 1900     		movs	r1, r3
 1578 0168 3B69     		ldr	r3, [r7, #16]
 1579 016a 0F22     		movs	r2, #15
 1580 016c 1340     		ands	r3, r2
 1581 016e CA18     		adds	r2, r1, r3
 1582 0170 6E4B     		ldr	r3, .L116+16
 1583 0172 1A60     		str	r2, [r3]
 238:Src/micromod.c **** 				if( next_row >= 64 ) next_row = 0;
 1584              		.loc 1 238 0
 1585 0174 6D4B     		ldr	r3, .L116+16
 1586 0176 1B68     		ldr	r3, [r3]
 1587 0178 3F2B     		cmp	r3, #63
 1588 017a 00DC     		bgt	.LCB1191
 1589 017c BAE0     		b	.L110	@long jump
 1590              	.LCB1191:
 1591              		.loc 1 238 0 is_stmt 0 discriminator 1
 1592 017e 6B4B     		ldr	r3, .L116+16
 1593 0180 0022     		movs	r2, #0
ARM GAS  /tmp/ccaMRnUL.s 			page 32


 1594 0182 1A60     		str	r2, [r3]
 239:Src/micromod.c **** 			}
 240:Src/micromod.c **** 			break;
 1595              		.loc 1 240 0 is_stmt 1 discriminator 1
 1596 0184 B6E0     		b	.L110
 1597              	.L71:
 241:Src/micromod.c **** 		case 0xF: /* Set Speed.*/
 242:Src/micromod.c **** 			if( param > 0 ) {
 1598              		.loc 1 242 0
 1599 0186 3B69     		ldr	r3, [r7, #16]
 1600 0188 002B     		cmp	r3, #0
 1601 018a 00DC     		bgt	.LCB1201
 1602 018c B4E0     		b	.L111	@long jump
 1603              	.LCB1201:
 243:Src/micromod.c **** 				if( param < 32 ) tick = speed = param;
 1604              		.loc 1 243 0
 1605 018e 3B69     		ldr	r3, [r7, #16]
 1606 0190 1F2B     		cmp	r3, #31
 1607 0192 07DC     		bgt	.L94
 1608              		.loc 1 243 0 is_stmt 0 discriminator 1
 1609 0194 674B     		ldr	r3, .L116+24
 1610 0196 3A69     		ldr	r2, [r7, #16]
 1611 0198 1A60     		str	r2, [r3]
 1612 019a 664B     		ldr	r3, .L116+24
 1613 019c 1A68     		ldr	r2, [r3]
 1614 019e 664B     		ldr	r3, .L116+28
 1615 01a0 1A60     		str	r2, [r3]
 244:Src/micromod.c **** 				else set_tempo( param );
 245:Src/micromod.c **** 			}
 246:Src/micromod.c **** 			break;
 1616              		.loc 1 246 0 is_stmt 1 discriminator 1
 1617 01a2 A9E0     		b	.L111
 1618              	.L94:
 244:Src/micromod.c **** 				else set_tempo( param );
 1619              		.loc 1 244 0
 1620 01a4 3B69     		ldr	r3, [r7, #16]
 1621 01a6 1800     		movs	r0, r3
 1622 01a8 FFF7FEFF 		bl	set_tempo
 1623              		.loc 1 246 0
 1624 01ac A4E0     		b	.L111
 1625              	.L72:
 247:Src/micromod.c **** 		case 0x11: /* Fine Portamento Up.*/
 248:Src/micromod.c **** 			period = chan->period - param;
 1626              		.loc 1 248 0
 1627 01ae 7B68     		ldr	r3, [r7, #4]
 1628 01b0 DB88     		ldrh	r3, [r3, #6]
 1629 01b2 1A00     		movs	r2, r3
 1630 01b4 3B69     		ldr	r3, [r7, #16]
 1631 01b6 D31A     		subs	r3, r2, r3
 1632 01b8 FB60     		str	r3, [r7, #12]
 249:Src/micromod.c **** 			chan->period = period < 0 ? 0 : period;
 1633              		.loc 1 249 0
 1634 01ba FB68     		ldr	r3, [r7, #12]
 1635 01bc 002B     		cmp	r3, #0
 1636 01be 00DA     		bge	.L95
 1637 01c0 0023     		movs	r3, #0
 1638              	.L95:
ARM GAS  /tmp/ccaMRnUL.s 			page 33


 1639 01c2 9AB2     		uxth	r2, r3
 1640 01c4 7B68     		ldr	r3, [r7, #4]
 1641 01c6 DA80     		strh	r2, [r3, #6]
 250:Src/micromod.c **** 			break;
 1642              		.loc 1 250 0
 1643 01c8 9FE0     		b	.L61
 1644              	.L73:
 251:Src/micromod.c **** 		case 0x12: /* Fine Portamento Down.*/
 252:Src/micromod.c **** 			period = chan->period + param;
 1645              		.loc 1 252 0
 1646 01ca 7B68     		ldr	r3, [r7, #4]
 1647 01cc DB88     		ldrh	r3, [r3, #6]
 1648 01ce 1A00     		movs	r2, r3
 1649 01d0 3B69     		ldr	r3, [r7, #16]
 1650 01d2 D318     		adds	r3, r2, r3
 1651 01d4 FB60     		str	r3, [r7, #12]
 253:Src/micromod.c **** 			chan->period = period > 65535 ? 65535 : period;
 1652              		.loc 1 253 0
 1653 01d6 FB68     		ldr	r3, [r7, #12]
 1654 01d8 584A     		ldr	r2, .L116+32
 1655 01da 9342     		cmp	r3, r2
 1656 01dc 00DD     		ble	.L96
 1657 01de 574B     		ldr	r3, .L116+32
 1658              	.L96:
 1659 01e0 9AB2     		uxth	r2, r3
 1660 01e2 7B68     		ldr	r3, [r7, #4]
 1661 01e4 DA80     		strh	r2, [r3, #6]
 254:Src/micromod.c **** 			break;
 1662              		.loc 1 254 0
 1663 01e6 90E0     		b	.L61
 1664              	.L74:
 255:Src/micromod.c **** 		case 0x14: /* Set Vibrato Waveform.*/
 256:Src/micromod.c **** 			if( param < 8 ) chan->vibrato_type = param;
 1665              		.loc 1 256 0
 1666 01e8 3B69     		ldr	r3, [r7, #16]
 1667 01ea 072B     		cmp	r3, #7
 1668 01ec 00DD     		ble	.LCB1264
 1669 01ee 85E0     		b	.L112	@long jump
 1670              	.LCB1264:
 1671              		.loc 1 256 0 is_stmt 0 discriminator 1
 1672 01f0 3B69     		ldr	r3, [r7, #16]
 1673 01f2 D9B2     		uxtb	r1, r3
 1674 01f4 7B68     		ldr	r3, [r7, #4]
 1675 01f6 2222     		movs	r2, #34
 1676 01f8 9954     		strb	r1, [r3, r2]
 257:Src/micromod.c **** 			break;
 1677              		.loc 1 257 0 is_stmt 1 discriminator 1
 1678 01fa 7FE0     		b	.L112
 1679              	.L75:
 258:Src/micromod.c **** 		case 0x16: /* Pattern Loop.*/
 259:Src/micromod.c **** 			if( param == 0 ) /* Set loop marker on this channel. */
 1680              		.loc 1 259 0
 1681 01fc 3B69     		ldr	r3, [r7, #16]
 1682 01fe 002B     		cmp	r3, #0
 1683 0200 05D1     		bne	.L98
 260:Src/micromod.c **** 				chan->pl_row = row;
 1684              		.loc 1 260 0
ARM GAS  /tmp/ccaMRnUL.s 			page 34


 1685 0202 4F4B     		ldr	r3, .L116+36
 1686 0204 1B68     		ldr	r3, [r3]
 1687 0206 D9B2     		uxtb	r1, r3
 1688 0208 7B68     		ldr	r3, [r7, #4]
 1689 020a 2022     		movs	r2, #32
 1690 020c 9954     		strb	r1, [r3, r2]
 1691              	.L98:
 261:Src/micromod.c **** 			if( chan->pl_row < row ) { /* Marker valid. Begin looping. */
 1692              		.loc 1 261 0
 1693 020e 7B68     		ldr	r3, [r7, #4]
 1694 0210 2022     		movs	r2, #32
 1695 0212 9B5C     		ldrb	r3, [r3, r2]
 1696 0214 1A00     		movs	r2, r3
 1697 0216 4A4B     		ldr	r3, .L116+36
 1698 0218 1B68     		ldr	r3, [r3]
 1699 021a 9A42     		cmp	r2, r3
 1700 021c 00DB     		blt	.LCB1292
 1701 021e 6FE0     		b	.L113	@long jump
 1702              	.LCB1292:
 262:Src/micromod.c **** 				if( pl_count < 0 ) { /* Not already looping, begin. */
 1703              		.loc 1 262 0
 1704 0220 404B     		ldr	r3, .L116+8
 1705 0222 1B68     		ldr	r3, [r3]
 1706 0224 002B     		cmp	r3, #0
 1707 0226 07DA     		bge	.L100
 263:Src/micromod.c **** 					pl_count = param;
 1708              		.loc 1 263 0
 1709 0228 3E4B     		ldr	r3, .L116+8
 1710 022a 3A69     		ldr	r2, [r7, #16]
 1711 022c 1A60     		str	r2, [r3]
 264:Src/micromod.c **** 					pl_channel = chan->id;
 1712              		.loc 1 264 0
 1713 022e 7B68     		ldr	r3, [r7, #4]
 1714 0230 1B7F     		ldrb	r3, [r3, #28]
 1715 0232 1A00     		movs	r2, r3
 1716 0234 434B     		ldr	r3, .L116+40
 1717 0236 1A60     		str	r2, [r3]
 1718              	.L100:
 265:Src/micromod.c **** 				}
 266:Src/micromod.c **** 				if( pl_channel == chan->id ) { /* Next Loop.*/
 1719              		.loc 1 266 0
 1720 0238 7B68     		ldr	r3, [r7, #4]
 1721 023a 1B7F     		ldrb	r3, [r3, #28]
 1722 023c 1A00     		movs	r2, r3
 1723 023e 414B     		ldr	r3, .L116+40
 1724 0240 1B68     		ldr	r3, [r3]
 1725 0242 9A42     		cmp	r2, r3
 1726 0244 5CD1     		bne	.L113
 267:Src/micromod.c **** 					if( pl_count == 0 ) { /* Loop finished. */
 1727              		.loc 1 267 0
 1728 0246 374B     		ldr	r3, .L116+8
 1729 0248 1B68     		ldr	r3, [r3]
 1730 024a 002B     		cmp	r3, #0
 1731 024c 08D1     		bne	.L101
 268:Src/micromod.c **** 						/* Invalidate current marker. */
 269:Src/micromod.c **** 						chan->pl_row = row + 1;
 1732              		.loc 1 269 0
ARM GAS  /tmp/ccaMRnUL.s 			page 35


 1733 024e 3C4B     		ldr	r3, .L116+36
 1734 0250 1B68     		ldr	r3, [r3]
 1735 0252 DBB2     		uxtb	r3, r3
 1736 0254 0133     		adds	r3, r3, #1
 1737 0256 D9B2     		uxtb	r1, r3
 1738 0258 7B68     		ldr	r3, [r7, #4]
 1739 025a 2022     		movs	r2, #32
 1740 025c 9954     		strb	r1, [r3, r2]
 1741 025e 09E0     		b	.L102
 1742              	.L101:
 270:Src/micromod.c **** 					} else { /* Loop and cancel any breaks on this row. */
 271:Src/micromod.c **** 						next_row = chan->pl_row;
 1743              		.loc 1 271 0
 1744 0260 7B68     		ldr	r3, [r7, #4]
 1745 0262 2022     		movs	r2, #32
 1746 0264 9B5C     		ldrb	r3, [r3, r2]
 1747 0266 1A00     		movs	r2, r3
 1748 0268 304B     		ldr	r3, .L116+16
 1749 026a 1A60     		str	r2, [r3]
 272:Src/micromod.c **** 						break_pattern = -1;
 1750              		.loc 1 272 0
 1751 026c 2E4B     		ldr	r3, .L116+12
 1752 026e 0122     		movs	r2, #1
 1753 0270 5242     		rsbs	r2, r2, #0
 1754 0272 1A60     		str	r2, [r3]
 1755              	.L102:
 273:Src/micromod.c **** 					}
 274:Src/micromod.c **** 					pl_count--;
 1756              		.loc 1 274 0
 1757 0274 2B4B     		ldr	r3, .L116+8
 1758 0276 1B68     		ldr	r3, [r3]
 1759 0278 5A1E     		subs	r2, r3, #1
 1760 027a 2A4B     		ldr	r3, .L116+8
 1761 027c 1A60     		str	r2, [r3]
 275:Src/micromod.c **** 				}
 276:Src/micromod.c **** 			}
 277:Src/micromod.c **** 			break;
 1762              		.loc 1 277 0
 1763 027e 3FE0     		b	.L113
 1764              	.L76:
 278:Src/micromod.c **** 		case 0x17: /* Set Tremolo Waveform.*/
 279:Src/micromod.c **** 			if( param < 8 ) chan->tremolo_type = param;
 1765              		.loc 1 279 0
 1766 0280 3B69     		ldr	r3, [r7, #16]
 1767 0282 072B     		cmp	r3, #7
 1768 0284 3EDC     		bgt	.L114
 1769              		.loc 1 279 0 is_stmt 0 discriminator 1
 1770 0286 3B69     		ldr	r3, [r7, #16]
 1771 0288 D9B2     		uxtb	r1, r3
 1772 028a 7B68     		ldr	r3, [r7, #4]
 1773 028c 2622     		movs	r2, #38
 1774 028e 9954     		strb	r1, [r3, r2]
 280:Src/micromod.c **** 			break;
 1775              		.loc 1 280 0 is_stmt 1 discriminator 1
 1776 0290 38E0     		b	.L114
 1777              	.L77:
 281:Src/micromod.c **** 		case 0x1A: /* Fine Volume Up.*/
ARM GAS  /tmp/ccaMRnUL.s 			page 36


 282:Src/micromod.c **** 			volume = chan->volume + param;
 1778              		.loc 1 282 0
 1779 0292 7B68     		ldr	r3, [r7, #4]
 1780 0294 1B7E     		ldrb	r3, [r3, #24]
 1781 0296 1A00     		movs	r2, r3
 1782 0298 3B69     		ldr	r3, [r7, #16]
 1783 029a D318     		adds	r3, r2, r3
 1784 029c BB60     		str	r3, [r7, #8]
 283:Src/micromod.c **** 			chan->volume = volume > 64 ? 64 : volume;
 1785              		.loc 1 283 0
 1786 029e BB68     		ldr	r3, [r7, #8]
 1787 02a0 402B     		cmp	r3, #64
 1788 02a2 00DD     		ble	.L104
 1789 02a4 4023     		movs	r3, #64
 1790              	.L104:
 1791 02a6 DAB2     		uxtb	r2, r3
 1792 02a8 7B68     		ldr	r3, [r7, #4]
 1793 02aa 1A76     		strb	r2, [r3, #24]
 284:Src/micromod.c **** 			break;
 1794              		.loc 1 284 0
 1795 02ac 2DE0     		b	.L61
 1796              	.L78:
 285:Src/micromod.c **** 		case 0x1B: /* Fine Volume Down.*/
 286:Src/micromod.c **** 			volume = chan->volume - param;
 1797              		.loc 1 286 0
 1798 02ae 7B68     		ldr	r3, [r7, #4]
 1799 02b0 1B7E     		ldrb	r3, [r3, #24]
 1800 02b2 1A00     		movs	r2, r3
 1801 02b4 3B69     		ldr	r3, [r7, #16]
 1802 02b6 D31A     		subs	r3, r2, r3
 1803 02b8 BB60     		str	r3, [r7, #8]
 287:Src/micromod.c **** 			chan->volume = volume < 0 ? 0 : volume;
 1804              		.loc 1 287 0
 1805 02ba BB68     		ldr	r3, [r7, #8]
 1806 02bc 002B     		cmp	r3, #0
 1807 02be 00DA     		bge	.L105
 1808 02c0 0023     		movs	r3, #0
 1809              	.L105:
 1810 02c2 DAB2     		uxtb	r2, r3
 1811 02c4 7B68     		ldr	r3, [r7, #4]
 1812 02c6 1A76     		strb	r2, [r3, #24]
 288:Src/micromod.c **** 			break;
 1813              		.loc 1 288 0
 1814 02c8 1FE0     		b	.L61
 1815              	.L79:
 289:Src/micromod.c **** 		case 0x1C: /* Note Cut.*/
 290:Src/micromod.c **** 			if( param <= 0 ) chan->volume = 0;
 1816              		.loc 1 290 0
 1817 02ca 3B69     		ldr	r3, [r7, #16]
 1818 02cc 002B     		cmp	r3, #0
 1819 02ce 1BDC     		bgt	.L115
 1820              		.loc 1 290 0 is_stmt 0 discriminator 1
 1821 02d0 7B68     		ldr	r3, [r7, #4]
 1822 02d2 0022     		movs	r2, #0
 1823 02d4 1A76     		strb	r2, [r3, #24]
 291:Src/micromod.c **** 			break;
 1824              		.loc 1 291 0 is_stmt 1 discriminator 1
ARM GAS  /tmp/ccaMRnUL.s 			page 37


 1825 02d6 17E0     		b	.L115
 1826              	.L80:
 292:Src/micromod.c **** 		case 0x1E: /* Pattern Delay.*/
 293:Src/micromod.c **** 			tick = speed + speed * param;
 1827              		.loc 1 293 0
 1828 02d8 3B69     		ldr	r3, [r7, #16]
 1829 02da 5A1C     		adds	r2, r3, #1
 1830 02dc 154B     		ldr	r3, .L116+24
 1831 02de 1B68     		ldr	r3, [r3]
 1832 02e0 5A43     		muls	r2, r3
 1833 02e2 154B     		ldr	r3, .L116+28
 1834 02e4 1A60     		str	r2, [r3]
 294:Src/micromod.c **** 			break;
 1835              		.loc 1 294 0
 1836 02e6 10E0     		b	.L61
 1837              	.L107:
 206:Src/micromod.c **** 		case 0x4: /* Vibrato.*/
 1838              		.loc 1 206 0
 1839 02e8 C046     		nop
 1840 02ea 0EE0     		b	.L61
 1841              	.L108:
 224:Src/micromod.c **** 		case 0xB: /* Pattern Jump.*/
 1842              		.loc 1 224 0
 1843 02ec C046     		nop
 1844 02ee 0CE0     		b	.L61
 1845              	.L109:
 230:Src/micromod.c **** 		case 0xC: /* Set Volume.*/
 1846              		.loc 1 230 0
 1847 02f0 C046     		nop
 1848 02f2 0AE0     		b	.L61
 1849              	.L110:
 240:Src/micromod.c **** 		case 0xF: /* Set Speed.*/
 1850              		.loc 1 240 0
 1851 02f4 C046     		nop
 1852 02f6 08E0     		b	.L61
 1853              	.L111:
 246:Src/micromod.c **** 		case 0x11: /* Fine Portamento Up.*/
 1854              		.loc 1 246 0
 1855 02f8 C046     		nop
 1856 02fa 06E0     		b	.L61
 1857              	.L112:
 257:Src/micromod.c **** 		case 0x16: /* Pattern Loop.*/
 1858              		.loc 1 257 0
 1859 02fc C046     		nop
 1860 02fe 04E0     		b	.L61
 1861              	.L113:
 277:Src/micromod.c **** 		case 0x17: /* Set Tremolo Waveform.*/
 1862              		.loc 1 277 0
 1863 0300 C046     		nop
 1864 0302 02E0     		b	.L61
 1865              	.L114:
 280:Src/micromod.c **** 		case 0x1A: /* Fine Volume Up.*/
 1866              		.loc 1 280 0
 1867 0304 C046     		nop
 1868 0306 00E0     		b	.L61
 1869              	.L115:
 291:Src/micromod.c **** 		case 0x1E: /* Pattern Delay.*/
ARM GAS  /tmp/ccaMRnUL.s 			page 38


 1870              		.loc 1 291 0
 1871 0308 C046     		nop
 1872              	.L61:
 295:Src/micromod.c **** 	}
 296:Src/micromod.c **** 	update_frequency( chan );
 1873              		.loc 1 296 0
 1874 030a 7B68     		ldr	r3, [r7, #4]
 1875 030c 1800     		movs	r0, r3
 1876 030e FFF7FEFF 		bl	update_frequency
 297:Src/micromod.c **** }
 1877              		.loc 1 297 0
 1878 0312 C046     		nop
 1879 0314 BD46     		mov	sp, r7
 1880 0316 06B0     		add	sp, sp, #24
 1881              		@ sp needed
 1882 0318 80BD     		pop	{r7, pc}
 1883              	.L117:
 1884 031a C046     		.align	2
 1885              	.L116:
 1886 031c 00000000 		.word	.L63
 1887 0320 00000000 		.word	num_channels
 1888 0324 00000000 		.word	pl_count
 1889 0328 00000000 		.word	break_pattern
 1890 032c 00000000 		.word	next_row
 1891 0330 00000000 		.word	pattern
 1892 0334 00000000 		.word	speed
 1893 0338 00000000 		.word	tick
 1894 033c FFFF0000 		.word	65535
 1895 0340 00000000 		.word	row
 1896 0344 00000000 		.word	pl_channel
 1897              		.cfi_endproc
 1898              	.LFE11:
 1900              		.section	.text.channel_tick,"ax",%progbits
 1901              		.align	1
 1902              		.syntax unified
 1903              		.code	16
 1904              		.thumb_func
 1905              		.fpu softvfp
 1907              	channel_tick:
 1908              	.LFB12:
 298:Src/micromod.c **** 
 299:Src/micromod.c **** static void channel_tick( struct channel *chan ) {
 1909              		.loc 1 299 0
 1910              		.cfi_startproc
 1911 0000 80B5     		push	{r7, lr}
 1912              	.LCFI36:
 1913              		.cfi_def_cfa_offset 8
 1914              		.cfi_offset 7, -8
 1915              		.cfi_offset 14, -4
 1916 0002 86B0     		sub	sp, sp, #24
 1917              	.LCFI37:
 1918              		.cfi_def_cfa_offset 32
 1919 0004 00AF     		add	r7, sp, #0
 1920              	.LCFI38:
 1921              		.cfi_def_cfa_register 7
 1922 0006 7860     		str	r0, [r7, #4]
 300:Src/micromod.c **** 	long effect, param, period;
ARM GAS  /tmp/ccaMRnUL.s 			page 39


 301:Src/micromod.c **** 	effect = chan->note.effect;
 1923              		.loc 1 301 0
 1924 0008 7B68     		ldr	r3, [r7, #4]
 1925 000a DB78     		ldrb	r3, [r3, #3]
 1926 000c 7B61     		str	r3, [r7, #20]
 302:Src/micromod.c **** 	param = chan->note.param;
 1927              		.loc 1 302 0
 1928 000e 7B68     		ldr	r3, [r7, #4]
 1929 0010 1B79     		ldrb	r3, [r3, #4]
 1930 0012 3B61     		str	r3, [r7, #16]
 303:Src/micromod.c **** 	chan->fx_count++;
 1931              		.loc 1 303 0
 1932 0014 7B68     		ldr	r3, [r7, #4]
 1933 0016 2122     		movs	r2, #33
 1934 0018 9B5C     		ldrb	r3, [r3, r2]
 1935 001a 0133     		adds	r3, r3, #1
 1936 001c D9B2     		uxtb	r1, r3
 1937 001e 7B68     		ldr	r3, [r7, #4]
 1938 0020 2122     		movs	r2, #33
 1939 0022 9954     		strb	r1, [r3, r2]
 304:Src/micromod.c **** 	switch( effect ) {
 1940              		.loc 1 304 0
 1941 0024 7B69     		ldr	r3, [r7, #20]
 1942 0026 1D2B     		cmp	r3, #29
 1943 0028 00D9     		bls	.LCB1526
 1944 002a C7E0     		b	.L119	@long jump
 1945              	.LCB1526:
 1946 002c 7B69     		ldr	r3, [r7, #20]
 1947 002e 9A00     		lsls	r2, r3, #2
 1948 0030 684B     		ldr	r3, .L148
 1949 0032 D318     		adds	r3, r2, r3
 1950 0034 1B68     		ldr	r3, [r3]
 1951 0036 9F46     		mov	pc, r3
 1952              		.section	.rodata.channel_tick,"a",%progbits
 1953              		.align	2
 1954              	.L121:
 1955 0000 BC010000 		.word	.L119
 1956 0004 38000000 		.word	.L120
 1957 0008 54000000 		.word	.L122
 1958 000c 72000000 		.word	.L123
 1959 0010 7C000000 		.word	.L124
 1960 0014 9C000000 		.word	.L125
 1961 0018 B2000000 		.word	.L126
 1962 001c DE000000 		.word	.L127
 1963 0020 BC010000 		.word	.L119
 1964 0024 BC010000 		.word	.L119
 1965 0028 FE000000 		.word	.L128
 1966 002c BC010000 		.word	.L119
 1967 0030 BC010000 		.word	.L119
 1968 0034 BC010000 		.word	.L119
 1969 0038 0C010000 		.word	.L129
 1970 003c BC010000 		.word	.L119
 1971 0040 BC010000 		.word	.L119
 1972 0044 BC010000 		.word	.L119
 1973 0048 BC010000 		.word	.L119
 1974 004c BC010000 		.word	.L119
 1975 0050 BC010000 		.word	.L119
ARM GAS  /tmp/ccaMRnUL.s 			page 40


 1976 0054 BC010000 		.word	.L119
 1977 0058 BC010000 		.word	.L119
 1978 005c BC010000 		.word	.L119
 1979 0060 BC010000 		.word	.L119
 1980 0064 62010000 		.word	.L130
 1981 0068 BC010000 		.word	.L119
 1982 006c BC010000 		.word	.L119
 1983 0070 80010000 		.word	.L131
 1984 0074 96010000 		.word	.L132
 1985              		.section	.text.channel_tick
 1986              	.L120:
 305:Src/micromod.c **** 		case 0x1: /* Portamento Up.*/
 306:Src/micromod.c **** 			period = chan->period - param;
 1987              		.loc 1 306 0
 1988 0038 7B68     		ldr	r3, [r7, #4]
 1989 003a DB88     		ldrh	r3, [r3, #6]
 1990 003c 1A00     		movs	r2, r3
 1991 003e 3B69     		ldr	r3, [r7, #16]
 1992 0040 D31A     		subs	r3, r2, r3
 1993 0042 FB60     		str	r3, [r7, #12]
 307:Src/micromod.c **** 			chan->period = period < 0 ? 0 : period;
 1994              		.loc 1 307 0
 1995 0044 FB68     		ldr	r3, [r7, #12]
 1996 0046 002B     		cmp	r3, #0
 1997 0048 00DA     		bge	.L133
 1998 004a 0023     		movs	r3, #0
 1999              	.L133:
 2000 004c 9AB2     		uxth	r2, r3
 2001 004e 7B68     		ldr	r3, [r7, #4]
 2002 0050 DA80     		strh	r2, [r3, #6]
 308:Src/micromod.c **** 			break;
 2003              		.loc 1 308 0
 2004 0052 B3E0     		b	.L119
 2005              	.L122:
 309:Src/micromod.c **** 		case 0x2: /* Portamento Down.*/
 310:Src/micromod.c **** 			period = chan->period + param;
 2006              		.loc 1 310 0
 2007 0054 7B68     		ldr	r3, [r7, #4]
 2008 0056 DB88     		ldrh	r3, [r3, #6]
 2009 0058 1A00     		movs	r2, r3
 2010 005a 3B69     		ldr	r3, [r7, #16]
 2011 005c D318     		adds	r3, r2, r3
 2012 005e FB60     		str	r3, [r7, #12]
 311:Src/micromod.c **** 			chan->period = period > 65535 ? 65535 : period;
 2013              		.loc 1 311 0
 2014 0060 FB68     		ldr	r3, [r7, #12]
 2015 0062 5D4A     		ldr	r2, .L148+4
 2016 0064 9342     		cmp	r3, r2
 2017 0066 00DD     		ble	.L134
 2018 0068 5B4B     		ldr	r3, .L148+4
 2019              	.L134:
 2020 006a 9AB2     		uxth	r2, r3
 2021 006c 7B68     		ldr	r3, [r7, #4]
 2022 006e DA80     		strh	r2, [r3, #6]
 312:Src/micromod.c **** 			break;
 2023              		.loc 1 312 0
 2024 0070 A4E0     		b	.L119
ARM GAS  /tmp/ccaMRnUL.s 			page 41


 2025              	.L123:
 313:Src/micromod.c **** 		case 0x3: /* Tone Portamento.*/
 314:Src/micromod.c **** 			tone_portamento( chan );
 2026              		.loc 1 314 0
 2027 0072 7B68     		ldr	r3, [r7, #4]
 2028 0074 1800     		movs	r0, r3
 2029 0076 FFF7FEFF 		bl	tone_portamento
 315:Src/micromod.c **** 			break;
 2030              		.loc 1 315 0
 2031 007a 9FE0     		b	.L119
 2032              	.L124:
 316:Src/micromod.c **** 		case 0x4: /* Vibrato.*/
 317:Src/micromod.c **** 			chan->vibrato_phase += chan->vibrato_speed;
 2033              		.loc 1 317 0
 2034 007c 7B68     		ldr	r3, [r7, #4]
 2035 007e 2322     		movs	r2, #35
 2036 0080 9A5C     		ldrb	r2, [r3, r2]
 2037 0082 7B68     		ldr	r3, [r7, #4]
 2038 0084 2421     		movs	r1, #36
 2039 0086 5B5C     		ldrb	r3, [r3, r1]
 2040 0088 D318     		adds	r3, r2, r3
 2041 008a D9B2     		uxtb	r1, r3
 2042 008c 7B68     		ldr	r3, [r7, #4]
 2043 008e 2322     		movs	r2, #35
 2044 0090 9954     		strb	r1, [r3, r2]
 318:Src/micromod.c **** 			vibrato( chan );
 2045              		.loc 1 318 0
 2046 0092 7B68     		ldr	r3, [r7, #4]
 2047 0094 1800     		movs	r0, r3
 2048 0096 FFF7FEFF 		bl	vibrato
 319:Src/micromod.c **** 			break;
 2049              		.loc 1 319 0
 2050 009a 8FE0     		b	.L119
 2051              	.L125:
 320:Src/micromod.c **** 		case 0x5: /* Tone Porta + Volume Slide.*/
 321:Src/micromod.c **** 			tone_portamento( chan );
 2052              		.loc 1 321 0
 2053 009c 7B68     		ldr	r3, [r7, #4]
 2054 009e 1800     		movs	r0, r3
 2055 00a0 FFF7FEFF 		bl	tone_portamento
 322:Src/micromod.c **** 			volume_slide( chan, param );
 2056              		.loc 1 322 0
 2057 00a4 3A69     		ldr	r2, [r7, #16]
 2058 00a6 7B68     		ldr	r3, [r7, #4]
 2059 00a8 1100     		movs	r1, r2
 2060 00aa 1800     		movs	r0, r3
 2061 00ac FFF7FEFF 		bl	volume_slide
 323:Src/micromod.c **** 			break;
 2062              		.loc 1 323 0
 2063 00b0 84E0     		b	.L119
 2064              	.L126:
 324:Src/micromod.c **** 		case 0x6: /* Vibrato + Volume Slide.*/
 325:Src/micromod.c **** 			chan->vibrato_phase += chan->vibrato_speed;
 2065              		.loc 1 325 0
 2066 00b2 7B68     		ldr	r3, [r7, #4]
 2067 00b4 2322     		movs	r2, #35
 2068 00b6 9A5C     		ldrb	r2, [r3, r2]
ARM GAS  /tmp/ccaMRnUL.s 			page 42


 2069 00b8 7B68     		ldr	r3, [r7, #4]
 2070 00ba 2421     		movs	r1, #36
 2071 00bc 5B5C     		ldrb	r3, [r3, r1]
 2072 00be D318     		adds	r3, r2, r3
 2073 00c0 D9B2     		uxtb	r1, r3
 2074 00c2 7B68     		ldr	r3, [r7, #4]
 2075 00c4 2322     		movs	r2, #35
 2076 00c6 9954     		strb	r1, [r3, r2]
 326:Src/micromod.c **** 			vibrato( chan );
 2077              		.loc 1 326 0
 2078 00c8 7B68     		ldr	r3, [r7, #4]
 2079 00ca 1800     		movs	r0, r3
 2080 00cc FFF7FEFF 		bl	vibrato
 327:Src/micromod.c **** 			volume_slide( chan, param );
 2081              		.loc 1 327 0
 2082 00d0 3A69     		ldr	r2, [r7, #16]
 2083 00d2 7B68     		ldr	r3, [r7, #4]
 2084 00d4 1100     		movs	r1, r2
 2085 00d6 1800     		movs	r0, r3
 2086 00d8 FFF7FEFF 		bl	volume_slide
 328:Src/micromod.c **** 			break;
 2087              		.loc 1 328 0
 2088 00dc 6EE0     		b	.L119
 2089              	.L127:
 329:Src/micromod.c **** 		case 0x7: /* Tremolo.*/
 330:Src/micromod.c **** 			chan->tremolo_phase += chan->tremolo_speed;
 2090              		.loc 1 330 0
 2091 00de 7B68     		ldr	r3, [r7, #4]
 2092 00e0 2722     		movs	r2, #39
 2093 00e2 9A5C     		ldrb	r2, [r3, r2]
 2094 00e4 7B68     		ldr	r3, [r7, #4]
 2095 00e6 2821     		movs	r1, #40
 2096 00e8 5B5C     		ldrb	r3, [r3, r1]
 2097 00ea D318     		adds	r3, r2, r3
 2098 00ec D9B2     		uxtb	r1, r3
 2099 00ee 7B68     		ldr	r3, [r7, #4]
 2100 00f0 2722     		movs	r2, #39
 2101 00f2 9954     		strb	r1, [r3, r2]
 331:Src/micromod.c **** 			tremolo( chan );
 2102              		.loc 1 331 0
 2103 00f4 7B68     		ldr	r3, [r7, #4]
 2104 00f6 1800     		movs	r0, r3
 2105 00f8 FFF7FEFF 		bl	tremolo
 332:Src/micromod.c **** 			break;
 2106              		.loc 1 332 0
 2107 00fc 5EE0     		b	.L119
 2108              	.L128:
 333:Src/micromod.c **** 		case 0xA: /* Volume Slide.*/
 334:Src/micromod.c **** 			volume_slide( chan, param );
 2109              		.loc 1 334 0
 2110 00fe 3A69     		ldr	r2, [r7, #16]
 2111 0100 7B68     		ldr	r3, [r7, #4]
 2112 0102 1100     		movs	r1, r2
 2113 0104 1800     		movs	r0, r3
 2114 0106 FFF7FEFF 		bl	volume_slide
 335:Src/micromod.c **** 			break;
 2115              		.loc 1 335 0
ARM GAS  /tmp/ccaMRnUL.s 			page 43


 2116 010a 57E0     		b	.L119
 2117              	.L129:
 336:Src/micromod.c **** 		case 0xE: /* Arpeggio.*/
 337:Src/micromod.c **** 			if( chan->fx_count > 2 ) chan->fx_count = 0;
 2118              		.loc 1 337 0
 2119 010c 7B68     		ldr	r3, [r7, #4]
 2120 010e 2122     		movs	r2, #33
 2121 0110 9B5C     		ldrb	r3, [r3, r2]
 2122 0112 022B     		cmp	r3, #2
 2123 0114 03D9     		bls	.L135
 2124              		.loc 1 337 0 is_stmt 0 discriminator 1
 2125 0116 7B68     		ldr	r3, [r7, #4]
 2126 0118 2122     		movs	r2, #33
 2127 011a 0021     		movs	r1, #0
 2128 011c 9954     		strb	r1, [r3, r2]
 2129              	.L135:
 338:Src/micromod.c **** 			if( chan->fx_count == 0 ) chan->arpeggio_add = 0;
 2130              		.loc 1 338 0 is_stmt 1
 2131 011e 7B68     		ldr	r3, [r7, #4]
 2132 0120 2122     		movs	r2, #33
 2133 0122 9B5C     		ldrb	r3, [r3, r2]
 2134 0124 002B     		cmp	r3, #0
 2135 0126 03D1     		bne	.L136
 2136              		.loc 1 338 0 is_stmt 0 discriminator 1
 2137 0128 7B68     		ldr	r3, [r7, #4]
 2138 012a 2C22     		movs	r2, #44
 2139 012c 0021     		movs	r1, #0
 2140 012e 9954     		strb	r1, [r3, r2]
 2141              	.L136:
 339:Src/micromod.c **** 			if( chan->fx_count == 1 ) chan->arpeggio_add = param >> 4;
 2142              		.loc 1 339 0 is_stmt 1
 2143 0130 7B68     		ldr	r3, [r7, #4]
 2144 0132 2122     		movs	r2, #33
 2145 0134 9B5C     		ldrb	r3, [r3, r2]
 2146 0136 012B     		cmp	r3, #1
 2147 0138 05D1     		bne	.L137
 2148              		.loc 1 339 0 is_stmt 0 discriminator 1
 2149 013a 3B69     		ldr	r3, [r7, #16]
 2150 013c 1B11     		asrs	r3, r3, #4
 2151 013e 59B2     		sxtb	r1, r3
 2152 0140 7B68     		ldr	r3, [r7, #4]
 2153 0142 2C22     		movs	r2, #44
 2154 0144 9954     		strb	r1, [r3, r2]
 2155              	.L137:
 340:Src/micromod.c **** 			if( chan->fx_count == 2 ) chan->arpeggio_add = param & 0xF;
 2156              		.loc 1 340 0 is_stmt 1
 2157 0146 7B68     		ldr	r3, [r7, #4]
 2158 0148 2122     		movs	r2, #33
 2159 014a 9B5C     		ldrb	r3, [r3, r2]
 2160 014c 022B     		cmp	r3, #2
 2161 014e 2ED1     		bne	.L143
 2162              		.loc 1 340 0 is_stmt 0 discriminator 1
 2163 0150 3B69     		ldr	r3, [r7, #16]
 2164 0152 5BB2     		sxtb	r3, r3
 2165 0154 0F22     		movs	r2, #15
 2166 0156 1340     		ands	r3, r2
 2167 0158 59B2     		sxtb	r1, r3
ARM GAS  /tmp/ccaMRnUL.s 			page 44


 2168 015a 7B68     		ldr	r3, [r7, #4]
 2169 015c 2C22     		movs	r2, #44
 2170 015e 9954     		strb	r1, [r3, r2]
 341:Src/micromod.c **** 			break;
 2171              		.loc 1 341 0 is_stmt 1 discriminator 1
 2172 0160 25E0     		b	.L143
 2173              	.L130:
 342:Src/micromod.c **** 		case 0x19: /* Retrig.*/
 343:Src/micromod.c **** 			if( chan->fx_count >= param ) {
 2174              		.loc 1 343 0
 2175 0162 7B68     		ldr	r3, [r7, #4]
 2176 0164 2122     		movs	r2, #33
 2177 0166 9B5C     		ldrb	r3, [r3, r2]
 2178 0168 1A00     		movs	r2, r3
 2179 016a 3B69     		ldr	r3, [r7, #16]
 2180 016c 9A42     		cmp	r2, r3
 2181 016e 20DB     		blt	.L144
 344:Src/micromod.c **** 				chan->fx_count = 0;
 2182              		.loc 1 344 0
 2183 0170 7B68     		ldr	r3, [r7, #4]
 2184 0172 2122     		movs	r2, #33
 2185 0174 0021     		movs	r1, #0
 2186 0176 9954     		strb	r1, [r3, r2]
 345:Src/micromod.c **** 				chan->sample_idx = 0;
 2187              		.loc 1 345 0
 2188 0178 7B68     		ldr	r3, [r7, #4]
 2189 017a 0022     		movs	r2, #0
 2190 017c 1A61     		str	r2, [r3, #16]
 346:Src/micromod.c **** 			}
 347:Src/micromod.c **** 			break;
 2191              		.loc 1 347 0
 2192 017e 18E0     		b	.L144
 2193              	.L131:
 348:Src/micromod.c **** 		case 0x1C: /* Note Cut.*/
 349:Src/micromod.c **** 			if( param == chan->fx_count ) chan->volume = 0;
 2194              		.loc 1 349 0
 2195 0180 7B68     		ldr	r3, [r7, #4]
 2196 0182 2122     		movs	r2, #33
 2197 0184 9B5C     		ldrb	r3, [r3, r2]
 2198 0186 1A00     		movs	r2, r3
 2199 0188 3B69     		ldr	r3, [r7, #16]
 2200 018a 9A42     		cmp	r2, r3
 2201 018c 13D1     		bne	.L145
 2202              		.loc 1 349 0 is_stmt 0 discriminator 1
 2203 018e 7B68     		ldr	r3, [r7, #4]
 2204 0190 0022     		movs	r2, #0
 2205 0192 1A76     		strb	r2, [r3, #24]
 350:Src/micromod.c **** 			break;
 2206              		.loc 1 350 0 is_stmt 1 discriminator 1
 2207 0194 0FE0     		b	.L145
 2208              	.L132:
 351:Src/micromod.c **** 		case 0x1D: /* Note Delay.*/
 352:Src/micromod.c **** 			if( param == chan->fx_count ) trigger( chan );
 2209              		.loc 1 352 0
 2210 0196 7B68     		ldr	r3, [r7, #4]
 2211 0198 2122     		movs	r2, #33
 2212 019a 9B5C     		ldrb	r3, [r3, r2]
ARM GAS  /tmp/ccaMRnUL.s 			page 45


 2213 019c 1A00     		movs	r2, r3
 2214 019e 3B69     		ldr	r3, [r7, #16]
 2215 01a0 9A42     		cmp	r2, r3
 2216 01a2 0AD1     		bne	.L146
 2217              		.loc 1 352 0 is_stmt 0 discriminator 1
 2218 01a4 7B68     		ldr	r3, [r7, #4]
 2219 01a6 1800     		movs	r0, r3
 2220 01a8 FFF7FEFF 		bl	trigger
 353:Src/micromod.c **** 			break;
 2221              		.loc 1 353 0 is_stmt 1 discriminator 1
 2222 01ac 05E0     		b	.L146
 2223              	.L143:
 341:Src/micromod.c **** 		case 0x19: /* Retrig.*/
 2224              		.loc 1 341 0
 2225 01ae C046     		nop
 2226 01b0 04E0     		b	.L119
 2227              	.L144:
 347:Src/micromod.c **** 		case 0x1C: /* Note Cut.*/
 2228              		.loc 1 347 0
 2229 01b2 C046     		nop
 2230 01b4 02E0     		b	.L119
 2231              	.L145:
 350:Src/micromod.c **** 		case 0x1D: /* Note Delay.*/
 2232              		.loc 1 350 0
 2233 01b6 C046     		nop
 2234 01b8 00E0     		b	.L119
 2235              	.L146:
 2236              		.loc 1 353 0
 2237 01ba C046     		nop
 2238              	.L119:
 354:Src/micromod.c **** 	}
 355:Src/micromod.c **** 	if( effect > 0 ) update_frequency( chan );
 2239              		.loc 1 355 0
 2240 01bc 7B69     		ldr	r3, [r7, #20]
 2241 01be 002B     		cmp	r3, #0
 2242 01c0 03DD     		ble	.L147
 2243              		.loc 1 355 0 is_stmt 0 discriminator 1
 2244 01c2 7B68     		ldr	r3, [r7, #4]
 2245 01c4 1800     		movs	r0, r3
 2246 01c6 FFF7FEFF 		bl	update_frequency
 2247              	.L147:
 356:Src/micromod.c **** }
 2248              		.loc 1 356 0 is_stmt 1
 2249 01ca C046     		nop
 2250 01cc BD46     		mov	sp, r7
 2251 01ce 06B0     		add	sp, sp, #24
 2252              		@ sp needed
 2253 01d0 80BD     		pop	{r7, pc}
 2254              	.L149:
 2255 01d2 C046     		.align	2
 2256              	.L148:
 2257 01d4 00000000 		.word	.L121
 2258 01d8 FFFF0000 		.word	65535
 2259              		.cfi_endproc
 2260              	.LFE12:
 2262              		.section	.text.sequence_row,"ax",%progbits
 2263              		.align	1
ARM GAS  /tmp/ccaMRnUL.s 			page 46


 2264              		.syntax unified
 2265              		.code	16
 2266              		.thumb_func
 2267              		.fpu softvfp
 2269              	sequence_row:
 2270              	.LFB13:
 357:Src/micromod.c **** 
 358:Src/micromod.c **** static long sequence_row() {
 2271              		.loc 1 358 0
 2272              		.cfi_startproc
 2273 0000 80B5     		push	{r7, lr}
 2274              	.LCFI39:
 2275              		.cfi_def_cfa_offset 8
 2276              		.cfi_offset 7, -8
 2277              		.cfi_offset 14, -4
 2278 0002 86B0     		sub	sp, sp, #24
 2279              	.LCFI40:
 2280              		.cfi_def_cfa_offset 32
 2281 0004 00AF     		add	r7, sp, #0
 2282              	.LCFI41:
 2283              		.cfi_def_cfa_register 7
 359:Src/micromod.c **** 	long song_end, chan_idx, pat_offset;
 360:Src/micromod.c **** 	long effect, param;
 361:Src/micromod.c **** 	struct note *note;
 362:Src/micromod.c **** 	song_end = 0;
 2284              		.loc 1 362 0
 2285 0006 0023     		movs	r3, #0
 2286 0008 7B61     		str	r3, [r7, #20]
 363:Src/micromod.c **** 	if( break_pattern >= 0 ) {
 2287              		.loc 1 363 0
 2288 000a 714B     		ldr	r3, .L162
 2289 000c 1B68     		ldr	r3, [r3]
 2290 000e 002B     		cmp	r3, #0
 2291 0010 32DB     		blt	.L151
 364:Src/micromod.c **** 		if( break_pattern >= song_length ) break_pattern = next_row = 0;
 2292              		.loc 1 364 0
 2293 0012 6F4B     		ldr	r3, .L162
 2294 0014 1A68     		ldr	r2, [r3]
 2295 0016 6F4B     		ldr	r3, .L162+4
 2296 0018 1B68     		ldr	r3, [r3]
 2297 001a 9A42     		cmp	r2, r3
 2298 001c 06DB     		blt	.L152
 2299              		.loc 1 364 0 is_stmt 0 discriminator 1
 2300 001e 6E4B     		ldr	r3, .L162+8
 2301 0020 0022     		movs	r2, #0
 2302 0022 1A60     		str	r2, [r3]
 2303 0024 6C4B     		ldr	r3, .L162+8
 2304 0026 1A68     		ldr	r2, [r3]
 2305 0028 694B     		ldr	r3, .L162
 2306 002a 1A60     		str	r2, [r3]
 2307              	.L152:
 365:Src/micromod.c **** 		if( break_pattern <= pattern ) song_end = 1;
 2308              		.loc 1 365 0 is_stmt 1
 2309 002c 684B     		ldr	r3, .L162
 2310 002e 1A68     		ldr	r2, [r3]
 2311 0030 6A4B     		ldr	r3, .L162+12
 2312 0032 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccaMRnUL.s 			page 47


 2313 0034 9A42     		cmp	r2, r3
 2314 0036 01DC     		bgt	.L153
 2315              		.loc 1 365 0 is_stmt 0 discriminator 1
 2316 0038 0123     		movs	r3, #1
 2317 003a 7B61     		str	r3, [r7, #20]
 2318              	.L153:
 366:Src/micromod.c **** 		pattern = break_pattern;
 2319              		.loc 1 366 0 is_stmt 1
 2320 003c 644B     		ldr	r3, .L162
 2321 003e 1A68     		ldr	r2, [r3]
 2322 0040 664B     		ldr	r3, .L162+12
 2323 0042 1A60     		str	r2, [r3]
 367:Src/micromod.c **** 		for( chan_idx = 0; chan_idx < num_channels; chan_idx++ ) channels[ chan_idx ].pl_row = 0;
 2324              		.loc 1 367 0
 2325 0044 0023     		movs	r3, #0
 2326 0046 3B61     		str	r3, [r7, #16]
 2327 0048 0DE0     		b	.L154
 2328              	.L155:
 2329              		.loc 1 367 0 is_stmt 0 discriminator 3
 2330 004a 6549     		ldr	r1, .L162+16
 2331 004c 3A69     		ldr	r2, [r7, #16]
 2332 004e 2020     		movs	r0, #32
 2333 0050 1300     		movs	r3, r2
 2334 0052 5B00     		lsls	r3, r3, #1
 2335 0054 9B18     		adds	r3, r3, r2
 2336 0056 1B01     		lsls	r3, r3, #4
 2337 0058 CB18     		adds	r3, r1, r3
 2338 005a 1B18     		adds	r3, r3, r0
 2339 005c 0022     		movs	r2, #0
 2340 005e 1A70     		strb	r2, [r3]
 2341 0060 3B69     		ldr	r3, [r7, #16]
 2342 0062 0133     		adds	r3, r3, #1
 2343 0064 3B61     		str	r3, [r7, #16]
 2344              	.L154:
 2345              		.loc 1 367 0 discriminator 1
 2346 0066 5F4B     		ldr	r3, .L162+20
 2347 0068 1B68     		ldr	r3, [r3]
 2348 006a 3A69     		ldr	r2, [r7, #16]
 2349 006c 9A42     		cmp	r2, r3
 2350 006e ECDB     		blt	.L155
 368:Src/micromod.c **** 		break_pattern = -1;
 2351              		.loc 1 368 0 is_stmt 1
 2352 0070 574B     		ldr	r3, .L162
 2353 0072 0122     		movs	r2, #1
 2354 0074 5242     		rsbs	r2, r2, #0
 2355 0076 1A60     		str	r2, [r3]
 2356              	.L151:
 369:Src/micromod.c **** 	}
 370:Src/micromod.c **** 	row = next_row;
 2357              		.loc 1 370 0
 2358 0078 574B     		ldr	r3, .L162+8
 2359 007a 1A68     		ldr	r2, [r3]
 2360 007c 5A4B     		ldr	r3, .L162+24
 2361 007e 1A60     		str	r2, [r3]
 371:Src/micromod.c **** 	next_row = row + 1;
 2362              		.loc 1 371 0
 2363 0080 594B     		ldr	r3, .L162+24
ARM GAS  /tmp/ccaMRnUL.s 			page 48


 2364 0082 1B68     		ldr	r3, [r3]
 2365 0084 5A1C     		adds	r2, r3, #1
 2366 0086 544B     		ldr	r3, .L162+8
 2367 0088 1A60     		str	r2, [r3]
 372:Src/micromod.c **** 	if( next_row >= 64 ) {
 2368              		.loc 1 372 0
 2369 008a 534B     		ldr	r3, .L162+8
 2370 008c 1B68     		ldr	r3, [r3]
 2371 008e 3F2B     		cmp	r3, #63
 2372 0090 07DD     		ble	.L156
 373:Src/micromod.c **** 		break_pattern = pattern + 1;
 2373              		.loc 1 373 0
 2374 0092 524B     		ldr	r3, .L162+12
 2375 0094 1B68     		ldr	r3, [r3]
 2376 0096 5A1C     		adds	r2, r3, #1
 2377 0098 4D4B     		ldr	r3, .L162
 2378 009a 1A60     		str	r2, [r3]
 374:Src/micromod.c **** 		next_row = 0;
 2379              		.loc 1 374 0
 2380 009c 4E4B     		ldr	r3, .L162+8
 2381 009e 0022     		movs	r2, #0
 2382 00a0 1A60     		str	r2, [r3]
 2383              	.L156:
 375:Src/micromod.c **** 	}
 376:Src/micromod.c **** 	pat_offset = ( sequence[ pattern ] * 64 + row ) * num_channels * 4;
 2384              		.loc 1 376 0
 2385 00a2 524B     		ldr	r3, .L162+28
 2386 00a4 1A68     		ldr	r2, [r3]
 2387 00a6 4D4B     		ldr	r3, .L162+12
 2388 00a8 1B68     		ldr	r3, [r3]
 2389 00aa D318     		adds	r3, r2, r3
 2390 00ac 1B78     		ldrb	r3, [r3]
 2391 00ae 9A01     		lsls	r2, r3, #6
 2392 00b0 4D4B     		ldr	r3, .L162+24
 2393 00b2 1B68     		ldr	r3, [r3]
 2394 00b4 D218     		adds	r2, r2, r3
 2395 00b6 4B4B     		ldr	r3, .L162+20
 2396 00b8 1B68     		ldr	r3, [r3]
 2397 00ba 5343     		muls	r3, r2
 2398 00bc 9B00     		lsls	r3, r3, #2
 2399 00be FB60     		str	r3, [r7, #12]
 377:Src/micromod.c **** 	for( chan_idx = 0; chan_idx < num_channels; chan_idx++ ) {
 2400              		.loc 1 377 0
 2401 00c0 0023     		movs	r3, #0
 2402 00c2 3B61     		str	r3, [r7, #16]
 2403 00c4 79E0     		b	.L157
 2404              	.L160:
 378:Src/micromod.c **** 		note = &channels[ chan_idx ].note;
 2405              		.loc 1 378 0
 2406 00c6 3A69     		ldr	r2, [r7, #16]
 2407 00c8 1300     		movs	r3, r2
 2408 00ca 5B00     		lsls	r3, r3, #1
 2409 00cc 9B18     		adds	r3, r3, r2
 2410 00ce 1B01     		lsls	r3, r3, #4
 2411 00d0 434A     		ldr	r2, .L162+16
 2412 00d2 9B18     		adds	r3, r3, r2
 2413 00d4 3B60     		str	r3, [r7]
ARM GAS  /tmp/ccaMRnUL.s 			page 49


 379:Src/micromod.c **** 		note->key  = ( pattern_data[ pat_offset ] & 0xF ) << 8;
 2414              		.loc 1 379 0
 2415 00d6 464B     		ldr	r3, .L162+32
 2416 00d8 1A68     		ldr	r2, [r3]
 2417 00da FB68     		ldr	r3, [r7, #12]
 2418 00dc D318     		adds	r3, r2, r3
 2419 00de 1B78     		ldrb	r3, [r3]
 2420 00e0 1B02     		lsls	r3, r3, #8
 2421 00e2 9AB2     		uxth	r2, r3
 2422 00e4 F023     		movs	r3, #240
 2423 00e6 1B01     		lsls	r3, r3, #4
 2424 00e8 1340     		ands	r3, r2
 2425 00ea 9AB2     		uxth	r2, r3
 2426 00ec 3B68     		ldr	r3, [r7]
 2427 00ee 1A80     		strh	r2, [r3]
 380:Src/micromod.c **** 		note->key |=   pattern_data[ pat_offset + 1 ];
 2428              		.loc 1 380 0
 2429 00f0 3B68     		ldr	r3, [r7]
 2430 00f2 1A88     		ldrh	r2, [r3]
 2431 00f4 3E4B     		ldr	r3, .L162+32
 2432 00f6 1968     		ldr	r1, [r3]
 2433 00f8 FB68     		ldr	r3, [r7, #12]
 2434 00fa 0133     		adds	r3, r3, #1
 2435 00fc CB18     		adds	r3, r1, r3
 2436 00fe 1B78     		ldrb	r3, [r3]
 2437 0100 9BB2     		uxth	r3, r3
 2438 0102 1343     		orrs	r3, r2
 2439 0104 9AB2     		uxth	r2, r3
 2440 0106 3B68     		ldr	r3, [r7]
 2441 0108 1A80     		strh	r2, [r3]
 381:Src/micromod.c **** 		note->instrument  = pattern_data[ pat_offset + 2 ] >> 4;
 2442              		.loc 1 381 0
 2443 010a 394B     		ldr	r3, .L162+32
 2444 010c 1A68     		ldr	r2, [r3]
 2445 010e FB68     		ldr	r3, [r7, #12]
 2446 0110 0233     		adds	r3, r3, #2
 2447 0112 D318     		adds	r3, r2, r3
 2448 0114 1B78     		ldrb	r3, [r3]
 2449 0116 1B09     		lsrs	r3, r3, #4
 2450 0118 DAB2     		uxtb	r2, r3
 2451 011a 3B68     		ldr	r3, [r7]
 2452 011c 9A70     		strb	r2, [r3, #2]
 382:Src/micromod.c **** 		note->instrument |= pattern_data[ pat_offset ] & 0x10;
 2453              		.loc 1 382 0
 2454 011e 3B68     		ldr	r3, [r7]
 2455 0120 9B78     		ldrb	r3, [r3, #2]
 2456 0122 5AB2     		sxtb	r2, r3
 2457 0124 324B     		ldr	r3, .L162+32
 2458 0126 1968     		ldr	r1, [r3]
 2459 0128 FB68     		ldr	r3, [r7, #12]
 2460 012a CB18     		adds	r3, r1, r3
 2461 012c 1B78     		ldrb	r3, [r3]
 2462 012e 5BB2     		sxtb	r3, r3
 2463 0130 1021     		movs	r1, #16
 2464 0132 0B40     		ands	r3, r1
 2465 0134 5BB2     		sxtb	r3, r3
 2466 0136 1343     		orrs	r3, r2
ARM GAS  /tmp/ccaMRnUL.s 			page 50


 2467 0138 5BB2     		sxtb	r3, r3
 2468 013a DAB2     		uxtb	r2, r3
 2469 013c 3B68     		ldr	r3, [r7]
 2470 013e 9A70     		strb	r2, [r3, #2]
 383:Src/micromod.c **** 		effect = pattern_data[ pat_offset + 2 ] & 0xF;
 2471              		.loc 1 383 0
 2472 0140 2B4B     		ldr	r3, .L162+32
 2473 0142 1A68     		ldr	r2, [r3]
 2474 0144 FB68     		ldr	r3, [r7, #12]
 2475 0146 0233     		adds	r3, r3, #2
 2476 0148 D318     		adds	r3, r2, r3
 2477 014a 1B78     		ldrb	r3, [r3]
 2478 014c 1A00     		movs	r2, r3
 2479 014e 0F23     		movs	r3, #15
 2480 0150 1340     		ands	r3, r2
 2481 0152 BB60     		str	r3, [r7, #8]
 384:Src/micromod.c **** 		param = pattern_data[ pat_offset + 3 ];
 2482              		.loc 1 384 0
 2483 0154 264B     		ldr	r3, .L162+32
 2484 0156 1A68     		ldr	r2, [r3]
 2485 0158 FB68     		ldr	r3, [r7, #12]
 2486 015a 0333     		adds	r3, r3, #3
 2487 015c D318     		adds	r3, r2, r3
 2488 015e 1B78     		ldrb	r3, [r3]
 2489 0160 7B60     		str	r3, [r7, #4]
 385:Src/micromod.c **** 		pat_offset += 4;
 2490              		.loc 1 385 0
 2491 0162 FB68     		ldr	r3, [r7, #12]
 2492 0164 0433     		adds	r3, r3, #4
 2493 0166 FB60     		str	r3, [r7, #12]
 386:Src/micromod.c **** 		if( effect == 0xE ) {
 2494              		.loc 1 386 0
 2495 0168 BB68     		ldr	r3, [r7, #8]
 2496 016a 0E2B     		cmp	r3, #14
 2497 016c 08D1     		bne	.L158
 387:Src/micromod.c **** 			effect = 0x10 | ( param >> 4 );
 2498              		.loc 1 387 0
 2499 016e 7B68     		ldr	r3, [r7, #4]
 2500 0170 1B11     		asrs	r3, r3, #4
 2501 0172 1022     		movs	r2, #16
 2502 0174 1343     		orrs	r3, r2
 2503 0176 BB60     		str	r3, [r7, #8]
 388:Src/micromod.c **** 			param &= 0xF;
 2504              		.loc 1 388 0
 2505 0178 7B68     		ldr	r3, [r7, #4]
 2506 017a 0F22     		movs	r2, #15
 2507 017c 1340     		ands	r3, r2
 2508 017e 7B60     		str	r3, [r7, #4]
 2509              	.L158:
 389:Src/micromod.c **** 		}
 390:Src/micromod.c **** 		if( effect == 0 && param > 0 ) effect = 0xE;
 2510              		.loc 1 390 0
 2511 0180 BB68     		ldr	r3, [r7, #8]
 2512 0182 002B     		cmp	r3, #0
 2513 0184 04D1     		bne	.L159
 2514              		.loc 1 390 0 is_stmt 0 discriminator 1
 2515 0186 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccaMRnUL.s 			page 51


 2516 0188 002B     		cmp	r3, #0
 2517 018a 01DD     		ble	.L159
 2518              		.loc 1 390 0 discriminator 2
 2519 018c 0E23     		movs	r3, #14
 2520 018e BB60     		str	r3, [r7, #8]
 2521              	.L159:
 391:Src/micromod.c **** 		note->effect = effect;
 2522              		.loc 1 391 0 is_stmt 1 discriminator 2
 2523 0190 BB68     		ldr	r3, [r7, #8]
 2524 0192 DAB2     		uxtb	r2, r3
 2525 0194 3B68     		ldr	r3, [r7]
 2526 0196 DA70     		strb	r2, [r3, #3]
 392:Src/micromod.c **** 		note->param = param;
 2527              		.loc 1 392 0 discriminator 2
 2528 0198 7B68     		ldr	r3, [r7, #4]
 2529 019a DAB2     		uxtb	r2, r3
 2530 019c 3B68     		ldr	r3, [r7]
 2531 019e 1A71     		strb	r2, [r3, #4]
 393:Src/micromod.c **** 		channel_row( &channels[ chan_idx ] );
 2532              		.loc 1 393 0 discriminator 2
 2533 01a0 3A69     		ldr	r2, [r7, #16]
 2534 01a2 1300     		movs	r3, r2
 2535 01a4 5B00     		lsls	r3, r3, #1
 2536 01a6 9B18     		adds	r3, r3, r2
 2537 01a8 1B01     		lsls	r3, r3, #4
 2538 01aa 0D4A     		ldr	r2, .L162+16
 2539 01ac 9B18     		adds	r3, r3, r2
 2540 01ae 1800     		movs	r0, r3
 2541 01b0 FFF7FEFF 		bl	channel_row
 377:Src/micromod.c **** 		note = &channels[ chan_idx ].note;
 2542              		.loc 1 377 0 discriminator 2
 2543 01b4 3B69     		ldr	r3, [r7, #16]
 2544 01b6 0133     		adds	r3, r3, #1
 2545 01b8 3B61     		str	r3, [r7, #16]
 2546              	.L157:
 377:Src/micromod.c **** 		note = &channels[ chan_idx ].note;
 2547              		.loc 1 377 0 is_stmt 0 discriminator 1
 2548 01ba 0A4B     		ldr	r3, .L162+20
 2549 01bc 1B68     		ldr	r3, [r3]
 2550 01be 3A69     		ldr	r2, [r7, #16]
 2551 01c0 9A42     		cmp	r2, r3
 2552 01c2 00DA     		bge	.LCB2064
 2553 01c4 7FE7     		b	.L160	@long jump
 2554              	.LCB2064:
 394:Src/micromod.c **** 	}
 395:Src/micromod.c **** 	return song_end;
 2555              		.loc 1 395 0 is_stmt 1
 2556 01c6 7B69     		ldr	r3, [r7, #20]
 396:Src/micromod.c **** }
 2557              		.loc 1 396 0
 2558 01c8 1800     		movs	r0, r3
 2559 01ca BD46     		mov	sp, r7
 2560 01cc 06B0     		add	sp, sp, #24
 2561              		@ sp needed
 2562 01ce 80BD     		pop	{r7, pc}
 2563              	.L163:
 2564              		.align	2
ARM GAS  /tmp/ccaMRnUL.s 			page 52


 2565              	.L162:
 2566 01d0 00000000 		.word	break_pattern
 2567 01d4 00000000 		.word	song_length
 2568 01d8 00000000 		.word	next_row
 2569 01dc 00000000 		.word	pattern
 2570 01e0 00000000 		.word	channels
 2571 01e4 00000000 		.word	num_channels
 2572 01e8 00000000 		.word	row
 2573 01ec 00000000 		.word	sequence
 2574 01f0 00000000 		.word	pattern_data
 2575              		.cfi_endproc
 2576              	.LFE13:
 2578              		.section	.text.sequence_tick,"ax",%progbits
 2579              		.align	1
 2580              		.syntax unified
 2581              		.code	16
 2582              		.thumb_func
 2583              		.fpu softvfp
 2585              	sequence_tick:
 2586              	.LFB14:
 397:Src/micromod.c **** 
 398:Src/micromod.c **** static long sequence_tick() {
 2587              		.loc 1 398 0
 2588              		.cfi_startproc
 2589 0000 80B5     		push	{r7, lr}
 2590              	.LCFI42:
 2591              		.cfi_def_cfa_offset 8
 2592              		.cfi_offset 7, -8
 2593              		.cfi_offset 14, -4
 2594 0002 82B0     		sub	sp, sp, #8
 2595              	.LCFI43:
 2596              		.cfi_def_cfa_offset 16
 2597 0004 00AF     		add	r7, sp, #0
 2598              	.LCFI44:
 2599              		.cfi_def_cfa_register 7
 399:Src/micromod.c **** 	long song_end, chan_idx;
 400:Src/micromod.c **** 	song_end = 0;
 2600              		.loc 1 400 0
 2601 0006 0023     		movs	r3, #0
 2602 0008 7B60     		str	r3, [r7, #4]
 401:Src/micromod.c **** 	if( --tick <= 0 ) {
 2603              		.loc 1 401 0
 2604 000a 164B     		ldr	r3, .L170
 2605 000c 1B68     		ldr	r3, [r3]
 2606 000e 5A1E     		subs	r2, r3, #1
 2607 0010 144B     		ldr	r3, .L170
 2608 0012 1A60     		str	r2, [r3]
 2609 0014 134B     		ldr	r3, .L170
 2610 0016 1B68     		ldr	r3, [r3]
 2611 0018 002B     		cmp	r3, #0
 2612 001a 08DC     		bgt	.L165
 402:Src/micromod.c **** 		tick = speed;
 2613              		.loc 1 402 0
 2614 001c 124B     		ldr	r3, .L170+4
 2615 001e 1A68     		ldr	r2, [r3]
 2616 0020 104B     		ldr	r3, .L170
 2617 0022 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccaMRnUL.s 			page 53


 403:Src/micromod.c **** 		song_end = sequence_row();
 2618              		.loc 1 403 0
 2619 0024 FFF7FEFF 		bl	sequence_row
 2620 0028 0300     		movs	r3, r0
 2621 002a 7B60     		str	r3, [r7, #4]
 2622 002c 14E0     		b	.L166
 2623              	.L165:
 404:Src/micromod.c **** 	} else {
 405:Src/micromod.c **** 		for( chan_idx = 0; chan_idx < num_channels; chan_idx++ )
 2624              		.loc 1 405 0
 2625 002e 0023     		movs	r3, #0
 2626 0030 3B60     		str	r3, [r7]
 2627 0032 0CE0     		b	.L167
 2628              	.L168:
 406:Src/micromod.c **** 			channel_tick( &channels[ chan_idx ] );
 2629              		.loc 1 406 0 discriminator 3
 2630 0034 3A68     		ldr	r2, [r7]
 2631 0036 1300     		movs	r3, r2
 2632 0038 5B00     		lsls	r3, r3, #1
 2633 003a 9B18     		adds	r3, r3, r2
 2634 003c 1B01     		lsls	r3, r3, #4
 2635 003e 0B4A     		ldr	r2, .L170+8
 2636 0040 9B18     		adds	r3, r3, r2
 2637 0042 1800     		movs	r0, r3
 2638 0044 FFF7FEFF 		bl	channel_tick
 405:Src/micromod.c **** 			channel_tick( &channels[ chan_idx ] );
 2639              		.loc 1 405 0 discriminator 3
 2640 0048 3B68     		ldr	r3, [r7]
 2641 004a 0133     		adds	r3, r3, #1
 2642 004c 3B60     		str	r3, [r7]
 2643              	.L167:
 405:Src/micromod.c **** 			channel_tick( &channels[ chan_idx ] );
 2644              		.loc 1 405 0 is_stmt 0 discriminator 1
 2645 004e 084B     		ldr	r3, .L170+12
 2646 0050 1B68     		ldr	r3, [r3]
 2647 0052 3A68     		ldr	r2, [r7]
 2648 0054 9A42     		cmp	r2, r3
 2649 0056 EDDB     		blt	.L168
 2650              	.L166:
 407:Src/micromod.c **** 	}
 408:Src/micromod.c **** 	return song_end;
 2651              		.loc 1 408 0 is_stmt 1
 2652 0058 7B68     		ldr	r3, [r7, #4]
 409:Src/micromod.c **** }
 2653              		.loc 1 409 0
 2654 005a 1800     		movs	r0, r3
 2655 005c BD46     		mov	sp, r7
 2656 005e 02B0     		add	sp, sp, #8
 2657              		@ sp needed
 2658 0060 80BD     		pop	{r7, pc}
 2659              	.L171:
 2660 0062 C046     		.align	2
 2661              	.L170:
 2662 0064 00000000 		.word	tick
 2663 0068 00000000 		.word	speed
 2664 006c 00000000 		.word	channels
 2665 0070 00000000 		.word	num_channels
ARM GAS  /tmp/ccaMRnUL.s 			page 54


 2666              		.cfi_endproc
 2667              	.LFE14:
 2669              		.section	.text.resample,"ax",%progbits
 2670              		.align	1
 2671              		.syntax unified
 2672              		.code	16
 2673              		.thumb_func
 2674              		.fpu softvfp
 2676              	resample:
 2677              	.LFB15:
 410:Src/micromod.c **** 
 411:Src/micromod.c **** static void resample( struct channel *chan, short *buf, long offset, long count ) {
 2678              		.loc 1 411 0
 2679              		.cfi_startproc
 2680 0000 80B5     		push	{r7, lr}
 2681              	.LCFI45:
 2682              		.cfi_def_cfa_offset 8
 2683              		.cfi_offset 7, -8
 2684              		.cfi_offset 14, -4
 2685 0002 92B0     		sub	sp, sp, #72
 2686              	.LCFI46:
 2687              		.cfi_def_cfa_offset 80
 2688 0004 00AF     		add	r7, sp, #0
 2689              	.LCFI47:
 2690              		.cfi_def_cfa_register 7
 2691 0006 F860     		str	r0, [r7, #12]
 2692 0008 B960     		str	r1, [r7, #8]
 2693 000a 7A60     		str	r2, [r7, #4]
 2694 000c 3B60     		str	r3, [r7]
 412:Src/micromod.c **** 	long sample, ampl, lamp, ramp;
 413:Src/micromod.c **** 	unsigned long buf_idx, buf_end, sidx, step, inst, llen, lep1, epos;
 414:Src/micromod.c **** 	signed char *sdat;
 415:Src/micromod.c **** 	ampl = buf ? chan->ampl : 0;
 2695              		.loc 1 415 0
 2696 000e BB68     		ldr	r3, [r7, #8]
 2697 0010 002B     		cmp	r3, #0
 2698 0012 02D0     		beq	.L173
 2699              		.loc 1 415 0 is_stmt 0 discriminator 1
 2700 0014 FB68     		ldr	r3, [r7, #12]
 2701 0016 DB7E     		ldrb	r3, [r3, #27]
 2702 0018 00E0     		b	.L174
 2703              	.L173:
 2704              		.loc 1 415 0 discriminator 2
 2705 001a 0023     		movs	r3, #0
 2706              	.L174:
 2707              		.loc 1 415 0 discriminator 4
 2708 001c BB63     		str	r3, [r7, #56]
 416:Src/micromod.c **** 	ramp = ampl * chan->panning;
 2709              		.loc 1 416 0 is_stmt 1 discriminator 4
 2710 001e FB68     		ldr	r3, [r7, #12]
 2711 0020 5B7E     		ldrb	r3, [r3, #25]
 2712 0022 1A00     		movs	r2, r3
 2713 0024 BB6B     		ldr	r3, [r7, #56]
 2714 0026 5343     		muls	r3, r2
 2715 0028 7B63     		str	r3, [r7, #52]
 417:Src/micromod.c **** 	lamp = ampl * ( 255 - chan->panning );
 2716              		.loc 1 417 0 discriminator 4
ARM GAS  /tmp/ccaMRnUL.s 			page 55


 2717 002a FB68     		ldr	r3, [r7, #12]
 2718 002c 5B7E     		ldrb	r3, [r3, #25]
 2719 002e 1A00     		movs	r2, r3
 2720 0030 FF23     		movs	r3, #255
 2721 0032 9B1A     		subs	r3, r3, r2
 2722 0034 BA6B     		ldr	r2, [r7, #56]
 2723 0036 5343     		muls	r3, r2
 2724 0038 3B63     		str	r3, [r7, #48]
 418:Src/micromod.c **** 	sidx = chan->sample_idx;
 2725              		.loc 1 418 0 discriminator 4
 2726 003a FB68     		ldr	r3, [r7, #12]
 2727 003c 1B69     		ldr	r3, [r3, #16]
 2728 003e 3B64     		str	r3, [r7, #64]
 419:Src/micromod.c **** 	step = chan->step;
 2729              		.loc 1 419 0 discriminator 4
 2730 0040 FB68     		ldr	r3, [r7, #12]
 2731 0042 5B69     		ldr	r3, [r3, #20]
 2732 0044 FB62     		str	r3, [r7, #44]
 420:Src/micromod.c **** 	inst = chan->instrument;
 2733              		.loc 1 420 0 discriminator 4
 2734 0046 FB68     		ldr	r3, [r7, #12]
 2735 0048 5B7F     		ldrb	r3, [r3, #29]
 2736 004a BB62     		str	r3, [r7, #40]
 421:Src/micromod.c **** 	llen = instruments[ inst ].loop_length;
 2737              		.loc 1 421 0 discriminator 4
 2738 004c 464A     		ldr	r2, .L186
 2739 004e BB6A     		ldr	r3, [r7, #40]
 2740 0050 1B01     		lsls	r3, r3, #4
 2741 0052 D318     		adds	r3, r2, r3
 2742 0054 0833     		adds	r3, r3, #8
 2743 0056 1B68     		ldr	r3, [r3]
 2744 0058 7B62     		str	r3, [r7, #36]
 422:Src/micromod.c **** 	lep1 = instruments[ inst ].loop_start + llen;
 2745              		.loc 1 422 0 discriminator 4
 2746 005a 434A     		ldr	r2, .L186
 2747 005c BB6A     		ldr	r3, [r7, #40]
 2748 005e 1B01     		lsls	r3, r3, #4
 2749 0060 D318     		adds	r3, r2, r3
 2750 0062 0433     		adds	r3, r3, #4
 2751 0064 1A68     		ldr	r2, [r3]
 2752 0066 7B6A     		ldr	r3, [r7, #36]
 2753 0068 D318     		adds	r3, r2, r3
 2754 006a 3B62     		str	r3, [r7, #32]
 423:Src/micromod.c **** 	sdat = instruments[ inst ].sample_data;
 2755              		.loc 1 423 0 discriminator 4
 2756 006c 3E4A     		ldr	r2, .L186
 2757 006e BB6A     		ldr	r3, [r7, #40]
 2758 0070 1B01     		lsls	r3, r3, #4
 2759 0072 D318     		adds	r3, r2, r3
 2760 0074 0C33     		adds	r3, r3, #12
 2761 0076 1B68     		ldr	r3, [r3]
 2762 0078 FB61     		str	r3, [r7, #28]
 424:Src/micromod.c **** 	buf_idx = offset << 1;
 2763              		.loc 1 424 0 discriminator 4
 2764 007a 7B68     		ldr	r3, [r7, #4]
 2765 007c 5B00     		lsls	r3, r3, #1
 2766 007e 7B64     		str	r3, [r7, #68]
ARM GAS  /tmp/ccaMRnUL.s 			page 56


 425:Src/micromod.c **** 	buf_end = ( offset + count ) << 1;
 2767              		.loc 1 425 0 discriminator 4
 2768 0080 7A68     		ldr	r2, [r7, #4]
 2769 0082 3B68     		ldr	r3, [r7]
 2770 0084 D318     		adds	r3, r2, r3
 2771 0086 5B00     		lsls	r3, r3, #1
 2772 0088 BB61     		str	r3, [r7, #24]
 426:Src/micromod.c **** 	while( buf_idx < buf_end ) {
 2773              		.loc 1 426 0 discriminator 4
 2774 008a 62E0     		b	.L175
 2775              	.L185:
 427:Src/micromod.c **** 		if( sidx >= lep1 ) {
 2776              		.loc 1 427 0
 2777 008c 3A6C     		ldr	r2, [r7, #64]
 2778 008e 3B6A     		ldr	r3, [r7, #32]
 2779 0090 9A42     		cmp	r2, r3
 2780 0092 0FD3     		bcc	.L176
 428:Src/micromod.c **** 			/* Handle loop. */
 429:Src/micromod.c **** 			if( llen <= FP_ONE ) {
 2781              		.loc 1 429 0
 2782 0094 7A6A     		ldr	r2, [r7, #36]
 2783 0096 8023     		movs	r3, #128
 2784 0098 DB01     		lsls	r3, r3, #7
 2785 009a 9A42     		cmp	r2, r3
 2786 009c 06D8     		bhi	.L179
 430:Src/micromod.c **** 				/* One-shot sample. */
 431:Src/micromod.c **** 				sidx = lep1;
 2787              		.loc 1 431 0
 2788 009e 3B6A     		ldr	r3, [r7, #32]
 2789 00a0 3B64     		str	r3, [r7, #64]
 432:Src/micromod.c **** 				break;
 2790              		.loc 1 432 0
 2791 00a2 5AE0     		b	.L178
 2792              	.L180:
 433:Src/micromod.c **** 			}
 434:Src/micromod.c **** 			/* Subtract loop-length until within loop points. */
 435:Src/micromod.c **** 			while( sidx >= lep1 ) sidx -= llen;
 2793              		.loc 1 435 0 discriminator 2
 2794 00a4 3A6C     		ldr	r2, [r7, #64]
 2795 00a6 7B6A     		ldr	r3, [r7, #36]
 2796 00a8 D31A     		subs	r3, r2, r3
 2797 00aa 3B64     		str	r3, [r7, #64]
 2798              	.L179:
 2799              		.loc 1 435 0 is_stmt 0 discriminator 1
 2800 00ac 3A6C     		ldr	r2, [r7, #64]
 2801 00ae 3B6A     		ldr	r3, [r7, #32]
 2802 00b0 9A42     		cmp	r2, r3
 2803 00b2 F7D2     		bcs	.L180
 2804              	.L176:
 436:Src/micromod.c **** 		}
 437:Src/micromod.c **** 		/* Calculate sample position at end. */
 438:Src/micromod.c **** 		epos = sidx + ( ( buf_end - buf_idx ) >> 1 ) * step;
 2805              		.loc 1 438 0 is_stmt 1
 2806 00b4 BA69     		ldr	r2, [r7, #24]
 2807 00b6 7B6C     		ldr	r3, [r7, #68]
 2808 00b8 D31A     		subs	r3, r2, r3
 2809 00ba 5B08     		lsrs	r3, r3, #1
ARM GAS  /tmp/ccaMRnUL.s 			page 57


 2810 00bc FA6A     		ldr	r2, [r7, #44]
 2811 00be 5A43     		muls	r2, r3
 2812 00c0 3B6C     		ldr	r3, [r7, #64]
 2813 00c2 D318     		adds	r3, r2, r3
 2814 00c4 FB63     		str	r3, [r7, #60]
 439:Src/micromod.c **** 		if( ampl <= 0 ) {
 2815              		.loc 1 439 0
 2816 00c6 BB6B     		ldr	r3, [r7, #56]
 2817 00c8 002B     		cmp	r3, #0
 2818 00ca 02DC     		bgt	.L181
 440:Src/micromod.c **** 			/* No need to mix. */
 441:Src/micromod.c **** 			sidx = epos;
 2819              		.loc 1 441 0
 2820 00cc FB6B     		ldr	r3, [r7, #60]
 2821 00ce 3B64     		str	r3, [r7, #64]
 442:Src/micromod.c **** 			break;
 2822              		.loc 1 442 0
 2823 00d0 43E0     		b	.L178
 2824              	.L181:
 443:Src/micromod.c **** 		}
 444:Src/micromod.c **** 		/* Only mix to end of current loop. */
 445:Src/micromod.c **** 		if( epos > lep1 ) epos = lep1;
 2825              		.loc 1 445 0
 2826 00d2 FA6B     		ldr	r2, [r7, #60]
 2827 00d4 3B6A     		ldr	r3, [r7, #32]
 2828 00d6 9A42     		cmp	r2, r3
 2829 00d8 37D9     		bls	.L183
 2830              		.loc 1 445 0 is_stmt 0 discriminator 1
 2831 00da 3B6A     		ldr	r3, [r7, #32]
 2832 00dc FB63     		str	r3, [r7, #60]
 446:Src/micromod.c **** 		while( sidx < epos ) {
 2833              		.loc 1 446 0 is_stmt 1 discriminator 1
 2834 00de 34E0     		b	.L183
 2835              	.L184:
 447:Src/micromod.c **** 			/* Most of the cpu time is spent in here. */
 448:Src/micromod.c **** 			sample = sdat[ sidx >> FP_SHIFT ];
 2836              		.loc 1 448 0
 2837 00e0 3B6C     		ldr	r3, [r7, #64]
 2838 00e2 9B0B     		lsrs	r3, r3, #14
 2839 00e4 FA69     		ldr	r2, [r7, #28]
 2840 00e6 D318     		adds	r3, r2, r3
 2841 00e8 1B78     		ldrb	r3, [r3]
 2842 00ea 5BB2     		sxtb	r3, r3
 2843 00ec 7B61     		str	r3, [r7, #20]
 449:Src/micromod.c **** 			buf[ buf_idx++ ] += sample * lamp >> 8;
 2844              		.loc 1 449 0
 2845 00ee 7B6C     		ldr	r3, [r7, #68]
 2846 00f0 5A1C     		adds	r2, r3, #1
 2847 00f2 7A64     		str	r2, [r7, #68]
 2848 00f4 5A00     		lsls	r2, r3, #1
 2849 00f6 B968     		ldr	r1, [r7, #8]
 2850 00f8 8A18     		adds	r2, r1, r2
 2851 00fa 5B00     		lsls	r3, r3, #1
 2852 00fc B968     		ldr	r1, [r7, #8]
 2853 00fe CB18     		adds	r3, r1, r3
 2854 0100 0021     		movs	r1, #0
 2855 0102 5B5E     		ldrsh	r3, [r3, r1]
ARM GAS  /tmp/ccaMRnUL.s 			page 58


 2856 0104 99B2     		uxth	r1, r3
 2857 0106 7B69     		ldr	r3, [r7, #20]
 2858 0108 386B     		ldr	r0, [r7, #48]
 2859 010a 4343     		muls	r3, r0
 2860 010c 1B12     		asrs	r3, r3, #8
 2861 010e 9BB2     		uxth	r3, r3
 2862 0110 CB18     		adds	r3, r1, r3
 2863 0112 9BB2     		uxth	r3, r3
 2864 0114 1BB2     		sxth	r3, r3
 2865 0116 1380     		strh	r3, [r2]
 450:Src/micromod.c **** 			buf[ buf_idx++ ] += sample * ramp >> 8;
 2866              		.loc 1 450 0
 2867 0118 7B6C     		ldr	r3, [r7, #68]
 2868 011a 5A1C     		adds	r2, r3, #1
 2869 011c 7A64     		str	r2, [r7, #68]
 2870 011e 5A00     		lsls	r2, r3, #1
 2871 0120 B968     		ldr	r1, [r7, #8]
 2872 0122 8A18     		adds	r2, r1, r2
 2873 0124 5B00     		lsls	r3, r3, #1
 2874 0126 B968     		ldr	r1, [r7, #8]
 2875 0128 CB18     		adds	r3, r1, r3
 2876 012a 0021     		movs	r1, #0
 2877 012c 5B5E     		ldrsh	r3, [r3, r1]
 2878 012e 99B2     		uxth	r1, r3
 2879 0130 7B69     		ldr	r3, [r7, #20]
 2880 0132 786B     		ldr	r0, [r7, #52]
 2881 0134 4343     		muls	r3, r0
 2882 0136 1B12     		asrs	r3, r3, #8
 2883 0138 9BB2     		uxth	r3, r3
 2884 013a CB18     		adds	r3, r1, r3
 2885 013c 9BB2     		uxth	r3, r3
 2886 013e 1BB2     		sxth	r3, r3
 2887 0140 1380     		strh	r3, [r2]
 451:Src/micromod.c **** 			sidx += step;
 2888              		.loc 1 451 0
 2889 0142 3A6C     		ldr	r2, [r7, #64]
 2890 0144 FB6A     		ldr	r3, [r7, #44]
 2891 0146 D318     		adds	r3, r2, r3
 2892 0148 3B64     		str	r3, [r7, #64]
 2893              	.L183:
 446:Src/micromod.c **** 			/* Most of the cpu time is spent in here. */
 2894              		.loc 1 446 0
 2895 014a 3A6C     		ldr	r2, [r7, #64]
 2896 014c FB6B     		ldr	r3, [r7, #60]
 2897 014e 9A42     		cmp	r2, r3
 2898 0150 C6D3     		bcc	.L184
 2899              	.L175:
 426:Src/micromod.c **** 		if( sidx >= lep1 ) {
 2900              		.loc 1 426 0
 2901 0152 7A6C     		ldr	r2, [r7, #68]
 2902 0154 BB69     		ldr	r3, [r7, #24]
 2903 0156 9A42     		cmp	r2, r3
 2904 0158 98D3     		bcc	.L185
 2905              	.L178:
 452:Src/micromod.c **** 		}
 453:Src/micromod.c **** 	}
 454:Src/micromod.c **** 	chan->sample_idx = sidx;
ARM GAS  /tmp/ccaMRnUL.s 			page 59


 2906              		.loc 1 454 0
 2907 015a FB68     		ldr	r3, [r7, #12]
 2908 015c 3A6C     		ldr	r2, [r7, #64]
 2909 015e 1A61     		str	r2, [r3, #16]
 455:Src/micromod.c **** }
 2910              		.loc 1 455 0
 2911 0160 C046     		nop
 2912 0162 BD46     		mov	sp, r7
 2913 0164 12B0     		add	sp, sp, #72
 2914              		@ sp needed
 2915 0166 80BD     		pop	{r7, pc}
 2916              	.L187:
 2917              		.align	2
 2918              	.L186:
 2919 0168 00000000 		.word	instruments
 2920              		.cfi_endproc
 2921              	.LFE15:
 2923              		.section	.text.micromod_calculate_mod_file_len,"ax",%progbits
 2924              		.align	1
 2925              		.global	micromod_calculate_mod_file_len
 2926              		.syntax unified
 2927              		.code	16
 2928              		.thumb_func
 2929              		.fpu softvfp
 2931              	micromod_calculate_mod_file_len:
 2932              	.LFB16:
 456:Src/micromod.c **** 
 457:Src/micromod.c **** /*
 458:Src/micromod.c **** 	Calculate the length in bytes of a module file given the 1084-byte header.
 459:Src/micromod.c **** 	Returns -1 if the data is not recognised as a module.
 460:Src/micromod.c **** */
 461:Src/micromod.c **** long micromod_calculate_mod_file_len( signed char *module_header ) {
 2933              		.loc 1 461 0
 2934              		.cfi_startproc
 2935 0000 90B5     		push	{r4, r7, lr}
 2936              	.LCFI48:
 2937              		.cfi_def_cfa_offset 12
 2938              		.cfi_offset 4, -12
 2939              		.cfi_offset 7, -8
 2940              		.cfi_offset 14, -4
 2941 0002 87B0     		sub	sp, sp, #28
 2942              	.LCFI49:
 2943              		.cfi_def_cfa_offset 40
 2944 0004 00AF     		add	r7, sp, #0
 2945              	.LCFI50:
 2946              		.cfi_def_cfa_register 7
 2947 0006 7860     		str	r0, [r7, #4]
 462:Src/micromod.c **** 	long length, numchan, inst_idx;
 463:Src/micromod.c **** 	numchan = calculate_num_channels( module_header );
 2948              		.loc 1 463 0
 2949 0008 7B68     		ldr	r3, [r7, #4]
 2950 000a 1800     		movs	r0, r3
 2951 000c FFF7FEFF 		bl	calculate_num_channels
 2952 0010 0300     		movs	r3, r0
 2953 0012 FB60     		str	r3, [r7, #12]
 464:Src/micromod.c **** 	if( numchan <= 0 ) return -1;
 2954              		.loc 1 464 0
ARM GAS  /tmp/ccaMRnUL.s 			page 60


 2955 0014 FB68     		ldr	r3, [r7, #12]
 2956 0016 002B     		cmp	r3, #0
 2957 0018 02DC     		bgt	.L189
 2958              		.loc 1 464 0 is_stmt 0 discriminator 1
 2959 001a 0123     		movs	r3, #1
 2960 001c 5B42     		rsbs	r3, r3, #0
 2961 001e 26E0     		b	.L190
 2962              	.L189:
 465:Src/micromod.c **** 	length = 1084 + 4 * numchan * 64 * calculate_num_patterns( module_header );
 2963              		.loc 1 465 0 is_stmt 1
 2964 0020 FB68     		ldr	r3, [r7, #12]
 2965 0022 1C02     		lsls	r4, r3, #8
 2966 0024 7B68     		ldr	r3, [r7, #4]
 2967 0026 1800     		movs	r0, r3
 2968 0028 FFF7FEFF 		bl	calculate_num_patterns
 2969 002c 0300     		movs	r3, r0
 2970 002e 6343     		muls	r3, r4
 2971 0030 114A     		ldr	r2, .L193
 2972 0032 9446     		mov	ip, r2
 2973 0034 6344     		add	r3, r3, ip
 2974 0036 7B61     		str	r3, [r7, #20]
 466:Src/micromod.c **** 	for( inst_idx = 1; inst_idx < 32; inst_idx++ )
 2975              		.loc 1 466 0
 2976 0038 0123     		movs	r3, #1
 2977 003a 3B61     		str	r3, [r7, #16]
 2978 003c 13E0     		b	.L191
 2979              	.L192:
 467:Src/micromod.c **** 		length += unsigned_short_big_endian( module_header, inst_idx * 30 + 12 ) * 2;
 2980              		.loc 1 467 0 discriminator 3
 2981 003e 3A69     		ldr	r2, [r7, #16]
 2982 0040 1300     		movs	r3, r2
 2983 0042 1B01     		lsls	r3, r3, #4
 2984 0044 9B1A     		subs	r3, r3, r2
 2985 0046 5B00     		lsls	r3, r3, #1
 2986 0048 0C33     		adds	r3, r3, #12
 2987 004a 1A00     		movs	r2, r3
 2988 004c 7B68     		ldr	r3, [r7, #4]
 2989 004e 1100     		movs	r1, r2
 2990 0050 1800     		movs	r0, r3
 2991 0052 FFF7FEFF 		bl	unsigned_short_big_endian
 2992 0056 0300     		movs	r3, r0
 2993 0058 5B00     		lsls	r3, r3, #1
 2994 005a 7A69     		ldr	r2, [r7, #20]
 2995 005c D318     		adds	r3, r2, r3
 2996 005e 7B61     		str	r3, [r7, #20]
 466:Src/micromod.c **** 	for( inst_idx = 1; inst_idx < 32; inst_idx++ )
 2997              		.loc 1 466 0 discriminator 3
 2998 0060 3B69     		ldr	r3, [r7, #16]
 2999 0062 0133     		adds	r3, r3, #1
 3000 0064 3B61     		str	r3, [r7, #16]
 3001              	.L191:
 466:Src/micromod.c **** 	for( inst_idx = 1; inst_idx < 32; inst_idx++ )
 3002              		.loc 1 466 0 is_stmt 0 discriminator 1
 3003 0066 3B69     		ldr	r3, [r7, #16]
 3004 0068 1F2B     		cmp	r3, #31
 3005 006a E8DD     		ble	.L192
 468:Src/micromod.c **** 	return length;
ARM GAS  /tmp/ccaMRnUL.s 			page 61


 3006              		.loc 1 468 0 is_stmt 1
 3007 006c 7B69     		ldr	r3, [r7, #20]
 3008              	.L190:
 469:Src/micromod.c **** }
 3009              		.loc 1 469 0
 3010 006e 1800     		movs	r0, r3
 3011 0070 BD46     		mov	sp, r7
 3012 0072 07B0     		add	sp, sp, #28
 3013              		@ sp needed
 3014 0074 90BD     		pop	{r4, r7, pc}
 3015              	.L194:
 3016 0076 C046     		.align	2
 3017              	.L193:
 3018 0078 3C040000 		.word	1084
 3019              		.cfi_endproc
 3020              	.LFE16:
 3022              		.section	.text.micromod_initialise,"ax",%progbits
 3023              		.align	1
 3024              		.global	micromod_initialise
 3025              		.syntax unified
 3026              		.code	16
 3027              		.thumb_func
 3028              		.fpu softvfp
 3030              	micromod_initialise:
 3031              	.LFB17:
 470:Src/micromod.c **** 
 471:Src/micromod.c **** /*
 472:Src/micromod.c **** 	Set the player to play the specified module data.
 473:Src/micromod.c **** 	Returns -1 if the data is not recognised as a module.
 474:Src/micromod.c **** 	Returns -2 if the sampling rate is less than 8000hz.
 475:Src/micromod.c **** */
 476:Src/micromod.c **** long micromod_initialise( signed char *data, long sampling_rate ) {
 3032              		.loc 1 476 0
 3033              		.cfi_startproc
 3034 0000 80B5     		push	{r7, lr}
 3035              	.LCFI51:
 3036              		.cfi_def_cfa_offset 8
 3037              		.cfi_offset 7, -8
 3038              		.cfi_offset 14, -4
 3039 0002 8AB0     		sub	sp, sp, #40
 3040              	.LCFI52:
 3041              		.cfi_def_cfa_offset 48
 3042 0004 00AF     		add	r7, sp, #0
 3043              	.LCFI53:
 3044              		.cfi_def_cfa_register 7
 3045 0006 7860     		str	r0, [r7, #4]
 3046 0008 3960     		str	r1, [r7]
 477:Src/micromod.c **** 	struct instrument *inst;
 478:Src/micromod.c **** 	long sample_data_offset, inst_idx;
 479:Src/micromod.c **** 	long sample_length, volume, fine_tune, loop_start, loop_length;
 480:Src/micromod.c **** 	num_channels = calculate_num_channels( data );
 3047              		.loc 1 480 0
 3048 000a 7B68     		ldr	r3, [r7, #4]
 3049 000c 1800     		movs	r0, r3
 3050 000e FFF7FEFF 		bl	calculate_num_channels
 3051 0012 0200     		movs	r2, r0
 3052 0014 844B     		ldr	r3, .L209
ARM GAS  /tmp/ccaMRnUL.s 			page 62


 3053 0016 1A60     		str	r2, [r3]
 481:Src/micromod.c **** 	if( num_channels <= 0 ) {
 3054              		.loc 1 481 0
 3055 0018 834B     		ldr	r3, .L209
 3056 001a 1B68     		ldr	r3, [r3]
 3057 001c 002B     		cmp	r3, #0
 3058 001e 05DC     		bgt	.L196
 482:Src/micromod.c **** 		num_channels = 0;
 3059              		.loc 1 482 0
 3060 0020 814B     		ldr	r3, .L209
 3061 0022 0022     		movs	r2, #0
 3062 0024 1A60     		str	r2, [r3]
 483:Src/micromod.c **** 		return -1;
 3063              		.loc 1 483 0
 3064 0026 0123     		movs	r3, #1
 3065 0028 5B42     		rsbs	r3, r3, #0
 3066 002a F9E0     		b	.L197
 3067              	.L196:
 484:Src/micromod.c **** 	}
 485:Src/micromod.c **** 	if( sampling_rate < 8000 ) return -2;
 3068              		.loc 1 485 0
 3069 002c 3B68     		ldr	r3, [r7]
 3070 002e 7F4A     		ldr	r2, .L209+4
 3071 0030 9342     		cmp	r3, r2
 3072 0032 02DC     		bgt	.L198
 3073              		.loc 1 485 0 is_stmt 0 discriminator 1
 3074 0034 0223     		movs	r3, #2
 3075 0036 5B42     		rsbs	r3, r3, #0
 3076 0038 F2E0     		b	.L197
 3077              	.L198:
 486:Src/micromod.c **** 	module_data = data;
 3078              		.loc 1 486 0 is_stmt 1
 3079 003a 7D4B     		ldr	r3, .L209+8
 3080 003c 7A68     		ldr	r2, [r7, #4]
 3081 003e 1A60     		str	r2, [r3]
 487:Src/micromod.c **** 	sample_rate = sampling_rate;
 3082              		.loc 1 487 0
 3083 0040 7C4B     		ldr	r3, .L209+12
 3084 0042 3A68     		ldr	r2, [r7]
 3085 0044 1A60     		str	r2, [r3]
 488:Src/micromod.c **** 	song_length = module_data[ 950 ] & 0x7F;
 3086              		.loc 1 488 0
 3087 0046 7A4B     		ldr	r3, .L209+8
 3088 0048 1B68     		ldr	r3, [r3]
 3089 004a 7B4A     		ldr	r2, .L209+16
 3090 004c 9446     		mov	ip, r2
 3091 004e 6344     		add	r3, r3, ip
 3092 0050 1B78     		ldrb	r3, [r3]
 3093 0052 5BB2     		sxtb	r3, r3
 3094 0054 DBB2     		uxtb	r3, r3
 3095 0056 1A00     		movs	r2, r3
 3096 0058 7F23     		movs	r3, #127
 3097 005a 1A40     		ands	r2, r3
 3098 005c 774B     		ldr	r3, .L209+20
 3099 005e 1A60     		str	r2, [r3]
 489:Src/micromod.c **** 	restart = module_data[ 951 ] & 0x7F;
 3100              		.loc 1 489 0
ARM GAS  /tmp/ccaMRnUL.s 			page 63


 3101 0060 734B     		ldr	r3, .L209+8
 3102 0062 1B68     		ldr	r3, [r3]
 3103 0064 764A     		ldr	r2, .L209+24
 3104 0066 9446     		mov	ip, r2
 3105 0068 6344     		add	r3, r3, ip
 3106 006a 1B78     		ldrb	r3, [r3]
 3107 006c 5BB2     		sxtb	r3, r3
 3108 006e DBB2     		uxtb	r3, r3
 3109 0070 1A00     		movs	r2, r3
 3110 0072 7F23     		movs	r3, #127
 3111 0074 1A40     		ands	r2, r3
 3112 0076 734B     		ldr	r3, .L209+28
 3113 0078 1A60     		str	r2, [r3]
 490:Src/micromod.c **** 	if( restart >= song_length ) restart = 0;
 3114              		.loc 1 490 0
 3115 007a 724B     		ldr	r3, .L209+28
 3116 007c 1A68     		ldr	r2, [r3]
 3117 007e 6F4B     		ldr	r3, .L209+20
 3118 0080 1B68     		ldr	r3, [r3]
 3119 0082 9A42     		cmp	r2, r3
 3120 0084 02DB     		blt	.L199
 3121              		.loc 1 490 0 is_stmt 0 discriminator 1
 3122 0086 6F4B     		ldr	r3, .L209+28
 3123 0088 0022     		movs	r2, #0
 3124 008a 1A60     		str	r2, [r3]
 3125              	.L199:
 491:Src/micromod.c **** 	sequence = (unsigned char *) module_data + 952;
 3126              		.loc 1 491 0 is_stmt 1
 3127 008c 684B     		ldr	r3, .L209+8
 3128 008e 1B68     		ldr	r3, [r3]
 3129 0090 EE22     		movs	r2, #238
 3130 0092 9200     		lsls	r2, r2, #2
 3131 0094 9A18     		adds	r2, r3, r2
 3132 0096 6C4B     		ldr	r3, .L209+32
 3133 0098 1A60     		str	r2, [r3]
 492:Src/micromod.c **** 	pattern_data = (unsigned char *) module_data + 1084;
 3134              		.loc 1 492 0
 3135 009a 654B     		ldr	r3, .L209+8
 3136 009c 1B68     		ldr	r3, [r3]
 3137 009e 6B4A     		ldr	r2, .L209+36
 3138 00a0 9A18     		adds	r2, r3, r2
 3139 00a2 6B4B     		ldr	r3, .L209+40
 3140 00a4 1A60     		str	r2, [r3]
 493:Src/micromod.c **** 	num_patterns = calculate_num_patterns( module_data );
 3141              		.loc 1 493 0
 3142 00a6 624B     		ldr	r3, .L209+8
 3143 00a8 1B68     		ldr	r3, [r3]
 3144 00aa 1800     		movs	r0, r3
 3145 00ac FFF7FEFF 		bl	calculate_num_patterns
 3146 00b0 0200     		movs	r2, r0
 3147 00b2 684B     		ldr	r3, .L209+44
 3148 00b4 1A60     		str	r2, [r3]
 494:Src/micromod.c **** 	sample_data_offset = 1084 + num_patterns * 64 * num_channels * 4;
 3149              		.loc 1 494 0
 3150 00b6 674B     		ldr	r3, .L209+44
 3151 00b8 1B68     		ldr	r3, [r3]
 3152 00ba 1A02     		lsls	r2, r3, #8
ARM GAS  /tmp/ccaMRnUL.s 			page 64


 3153 00bc 5A4B     		ldr	r3, .L209
 3154 00be 1B68     		ldr	r3, [r3]
 3155 00c0 5343     		muls	r3, r2
 3156 00c2 624A     		ldr	r2, .L209+36
 3157 00c4 9446     		mov	ip, r2
 3158 00c6 6344     		add	r3, r3, ip
 3159 00c8 7B62     		str	r3, [r7, #36]
 495:Src/micromod.c **** 	for( inst_idx = 1; inst_idx < 32; inst_idx++ ) {
 3160              		.loc 1 495 0
 3161 00ca 0123     		movs	r3, #1
 3162 00cc 3B62     		str	r3, [r7, #32]
 3163 00ce 8DE0     		b	.L200
 3164              	.L204:
 496:Src/micromod.c **** 		inst = &instruments[ inst_idx ];
 3165              		.loc 1 496 0
 3166 00d0 3B6A     		ldr	r3, [r7, #32]
 3167 00d2 1A01     		lsls	r2, r3, #4
 3168 00d4 604B     		ldr	r3, .L209+48
 3169 00d6 D318     		adds	r3, r2, r3
 3170 00d8 7B61     		str	r3, [r7, #20]
 497:Src/micromod.c **** 		sample_length = unsigned_short_big_endian( module_data, inst_idx * 30 + 12 ) * 2;
 3171              		.loc 1 497 0
 3172 00da 554B     		ldr	r3, .L209+8
 3173 00dc 1868     		ldr	r0, [r3]
 3174 00de 3A6A     		ldr	r2, [r7, #32]
 3175 00e0 1300     		movs	r3, r2
 3176 00e2 1B01     		lsls	r3, r3, #4
 3177 00e4 9B1A     		subs	r3, r3, r2
 3178 00e6 5B00     		lsls	r3, r3, #1
 3179 00e8 0C33     		adds	r3, r3, #12
 3180 00ea 1900     		movs	r1, r3
 3181 00ec FFF7FEFF 		bl	unsigned_short_big_endian
 3182 00f0 0300     		movs	r3, r0
 3183 00f2 5B00     		lsls	r3, r3, #1
 3184 00f4 3B61     		str	r3, [r7, #16]
 498:Src/micromod.c **** 		fine_tune = module_data[ inst_idx * 30 + 14 ] & 0xF;
 3185              		.loc 1 498 0
 3186 00f6 4E4B     		ldr	r3, .L209+8
 3187 00f8 1968     		ldr	r1, [r3]
 3188 00fa 3A6A     		ldr	r2, [r7, #32]
 3189 00fc 1300     		movs	r3, r2
 3190 00fe 1B01     		lsls	r3, r3, #4
 3191 0100 9B1A     		subs	r3, r3, r2
 3192 0102 5B00     		lsls	r3, r3, #1
 3193 0104 0E33     		adds	r3, r3, #14
 3194 0106 CB18     		adds	r3, r1, r3
 3195 0108 1B78     		ldrb	r3, [r3]
 3196 010a 5BB2     		sxtb	r3, r3
 3197 010c DBB2     		uxtb	r3, r3
 3198 010e 1A00     		movs	r2, r3
 3199 0110 0F23     		movs	r3, #15
 3200 0112 1340     		ands	r3, r2
 3201 0114 FB60     		str	r3, [r7, #12]
 499:Src/micromod.c **** 		inst->fine_tune = ( fine_tune & 0x7 ) - ( fine_tune & 0x8 ) + 8;
 3202              		.loc 1 499 0
 3203 0116 FB68     		ldr	r3, [r7, #12]
 3204 0118 DBB2     		uxtb	r3, r3
ARM GAS  /tmp/ccaMRnUL.s 			page 65


 3205 011a 0722     		movs	r2, #7
 3206 011c 1340     		ands	r3, r2
 3207 011e DAB2     		uxtb	r2, r3
 3208 0120 FB68     		ldr	r3, [r7, #12]
 3209 0122 DBB2     		uxtb	r3, r3
 3210 0124 0821     		movs	r1, #8
 3211 0126 0B40     		ands	r3, r1
 3212 0128 DBB2     		uxtb	r3, r3
 3213 012a D31A     		subs	r3, r2, r3
 3214 012c DBB2     		uxtb	r3, r3
 3215 012e 0833     		adds	r3, r3, #8
 3216 0130 DAB2     		uxtb	r2, r3
 3217 0132 7B69     		ldr	r3, [r7, #20]
 3218 0134 5A70     		strb	r2, [r3, #1]
 500:Src/micromod.c **** 		volume = module_data[ inst_idx * 30 + 15 ] & 0x7F;
 3219              		.loc 1 500 0
 3220 0136 3E4B     		ldr	r3, .L209+8
 3221 0138 1968     		ldr	r1, [r3]
 3222 013a 3A6A     		ldr	r2, [r7, #32]
 3223 013c 1300     		movs	r3, r2
 3224 013e 1B01     		lsls	r3, r3, #4
 3225 0140 9B1A     		subs	r3, r3, r2
 3226 0142 5B00     		lsls	r3, r3, #1
 3227 0144 0F33     		adds	r3, r3, #15
 3228 0146 CB18     		adds	r3, r1, r3
 3229 0148 1B78     		ldrb	r3, [r3]
 3230 014a 5BB2     		sxtb	r3, r3
 3231 014c DBB2     		uxtb	r3, r3
 3232 014e 1A00     		movs	r2, r3
 3233 0150 7F23     		movs	r3, #127
 3234 0152 1340     		ands	r3, r2
 3235 0154 BB60     		str	r3, [r7, #8]
 501:Src/micromod.c **** 		inst->volume = volume > 64 ? 64 : volume;
 3236              		.loc 1 501 0
 3237 0156 BB68     		ldr	r3, [r7, #8]
 3238 0158 402B     		cmp	r3, #64
 3239 015a 00DD     		ble	.L201
 3240 015c 4023     		movs	r3, #64
 3241              	.L201:
 3242 015e DAB2     		uxtb	r2, r3
 3243 0160 7B69     		ldr	r3, [r7, #20]
 3244 0162 1A70     		strb	r2, [r3]
 502:Src/micromod.c **** 		loop_start = unsigned_short_big_endian( module_data, inst_idx * 30 + 16 ) * 2;
 3245              		.loc 1 502 0
 3246 0164 324B     		ldr	r3, .L209+8
 3247 0166 1868     		ldr	r0, [r3]
 3248 0168 3A6A     		ldr	r2, [r7, #32]
 3249 016a 1300     		movs	r3, r2
 3250 016c 1B01     		lsls	r3, r3, #4
 3251 016e 9B1A     		subs	r3, r3, r2
 3252 0170 5B00     		lsls	r3, r3, #1
 3253 0172 1033     		adds	r3, r3, #16
 3254 0174 1900     		movs	r1, r3
 3255 0176 FFF7FEFF 		bl	unsigned_short_big_endian
 3256 017a 0300     		movs	r3, r0
 3257 017c 5B00     		lsls	r3, r3, #1
 3258 017e FB61     		str	r3, [r7, #28]
ARM GAS  /tmp/ccaMRnUL.s 			page 66


 503:Src/micromod.c **** 		loop_length = unsigned_short_big_endian( module_data, inst_idx * 30 + 18 ) * 2;
 3259              		.loc 1 503 0
 3260 0180 2B4B     		ldr	r3, .L209+8
 3261 0182 1868     		ldr	r0, [r3]
 3262 0184 3A6A     		ldr	r2, [r7, #32]
 3263 0186 1300     		movs	r3, r2
 3264 0188 1B01     		lsls	r3, r3, #4
 3265 018a 9B1A     		subs	r3, r3, r2
 3266 018c 5B00     		lsls	r3, r3, #1
 3267 018e 1233     		adds	r3, r3, #18
 3268 0190 1900     		movs	r1, r3
 3269 0192 FFF7FEFF 		bl	unsigned_short_big_endian
 3270 0196 0300     		movs	r3, r0
 3271 0198 5B00     		lsls	r3, r3, #1
 3272 019a BB61     		str	r3, [r7, #24]
 504:Src/micromod.c **** 		if( loop_start + loop_length > sample_length )
 3273              		.loc 1 504 0
 3274 019c FA69     		ldr	r2, [r7, #28]
 3275 019e BB69     		ldr	r3, [r7, #24]
 3276 01a0 D218     		adds	r2, r2, r3
 3277 01a2 3B69     		ldr	r3, [r7, #16]
 3278 01a4 9A42     		cmp	r2, r3
 3279 01a6 03DD     		ble	.L202
 505:Src/micromod.c **** 			loop_length = sample_length - loop_start;
 3280              		.loc 1 505 0
 3281 01a8 3A69     		ldr	r2, [r7, #16]
 3282 01aa FB69     		ldr	r3, [r7, #28]
 3283 01ac D31A     		subs	r3, r2, r3
 3284 01ae BB61     		str	r3, [r7, #24]
 3285              	.L202:
 506:Src/micromod.c **** 		if( loop_length < 4 ) {
 3286              		.loc 1 506 0
 3287 01b0 BB69     		ldr	r3, [r7, #24]
 3288 01b2 032B     		cmp	r3, #3
 3289 01b4 03DC     		bgt	.L203
 507:Src/micromod.c **** 			loop_start = sample_length;
 3290              		.loc 1 507 0
 3291 01b6 3B69     		ldr	r3, [r7, #16]
 3292 01b8 FB61     		str	r3, [r7, #28]
 508:Src/micromod.c **** 			loop_length = 0;
 3293              		.loc 1 508 0
 3294 01ba 0023     		movs	r3, #0
 3295 01bc BB61     		str	r3, [r7, #24]
 3296              	.L203:
 509:Src/micromod.c **** 		}
 510:Src/micromod.c **** 		inst->loop_start = loop_start << FP_SHIFT;
 3297              		.loc 1 510 0 discriminator 2
 3298 01be FB69     		ldr	r3, [r7, #28]
 3299 01c0 9B03     		lsls	r3, r3, #14
 3300 01c2 1A00     		movs	r2, r3
 3301 01c4 7B69     		ldr	r3, [r7, #20]
 3302 01c6 5A60     		str	r2, [r3, #4]
 511:Src/micromod.c **** 		inst->loop_length = loop_length << FP_SHIFT;
 3303              		.loc 1 511 0 discriminator 2
 3304 01c8 BB69     		ldr	r3, [r7, #24]
 3305 01ca 9B03     		lsls	r3, r3, #14
 3306 01cc 1A00     		movs	r2, r3
ARM GAS  /tmp/ccaMRnUL.s 			page 67


 3307 01ce 7B69     		ldr	r3, [r7, #20]
 3308 01d0 9A60     		str	r2, [r3, #8]
 512:Src/micromod.c **** 		inst->sample_data = module_data + sample_data_offset;
 3309              		.loc 1 512 0 discriminator 2
 3310 01d2 174B     		ldr	r3, .L209+8
 3311 01d4 1A68     		ldr	r2, [r3]
 3312 01d6 7B6A     		ldr	r3, [r7, #36]
 3313 01d8 D218     		adds	r2, r2, r3
 3314 01da 7B69     		ldr	r3, [r7, #20]
 3315 01dc DA60     		str	r2, [r3, #12]
 513:Src/micromod.c **** 		sample_data_offset += sample_length;
 3316              		.loc 1 513 0 discriminator 2
 3317 01de 7A6A     		ldr	r2, [r7, #36]
 3318 01e0 3B69     		ldr	r3, [r7, #16]
 3319 01e2 D318     		adds	r3, r2, r3
 3320 01e4 7B62     		str	r3, [r7, #36]
 495:Src/micromod.c **** 		inst = &instruments[ inst_idx ];
 3321              		.loc 1 495 0 discriminator 2
 3322 01e6 3B6A     		ldr	r3, [r7, #32]
 3323 01e8 0133     		adds	r3, r3, #1
 3324 01ea 3B62     		str	r3, [r7, #32]
 3325              	.L200:
 495:Src/micromod.c **** 		inst = &instruments[ inst_idx ];
 3326              		.loc 1 495 0 is_stmt 0 discriminator 1
 3327 01ec 3B6A     		ldr	r3, [r7, #32]
 3328 01ee 1F2B     		cmp	r3, #31
 3329 01f0 00DC     		bgt	.LCB2769
 3330 01f2 6DE7     		b	.L204	@long jump
 3331              	.LCB2769:
 514:Src/micromod.c **** 	}
 515:Src/micromod.c **** 	c2_rate = ( num_channels > 4 ) ? 8363 : 8287;
 3332              		.loc 1 515 0 is_stmt 1
 3333 01f4 0C4B     		ldr	r3, .L209
 3334 01f6 1B68     		ldr	r3, [r3]
 3335 01f8 042B     		cmp	r3, #4
 3336 01fa 01DD     		ble	.L205
 3337              		.loc 1 515 0 is_stmt 0 discriminator 1
 3338 01fc 174A     		ldr	r2, .L209+52
 3339 01fe 00E0     		b	.L206
 3340              	.L205:
 3341              		.loc 1 515 0 discriminator 2
 3342 0200 174A     		ldr	r2, .L209+56
 3343              	.L206:
 3344              		.loc 1 515 0 discriminator 4
 3345 0202 184B     		ldr	r3, .L209+60
 3346 0204 1A60     		str	r2, [r3]
 516:Src/micromod.c **** 	gain = ( num_channels > 4 ) ? 1 : 2;
 3347              		.loc 1 516 0 is_stmt 1 discriminator 4
 3348 0206 084B     		ldr	r3, .L209
 3349 0208 1B68     		ldr	r3, [r3]
 3350 020a 042B     		cmp	r3, #4
 3351 020c 01DD     		ble	.L207
 3352              		.loc 1 516 0 is_stmt 0 discriminator 1
 3353 020e 0122     		movs	r2, #1
 3354 0210 00E0     		b	.L208
 3355              	.L207:
 3356              		.loc 1 516 0 discriminator 2
ARM GAS  /tmp/ccaMRnUL.s 			page 68


 3357 0212 0222     		movs	r2, #2
 3358              	.L208:
 3359              		.loc 1 516 0 discriminator 4
 3360 0214 144B     		ldr	r3, .L209+64
 3361 0216 1A60     		str	r2, [r3]
 517:Src/micromod.c **** 	micromod_set_position( 0 );
 3362              		.loc 1 517 0 is_stmt 1 discriminator 4
 3363 0218 0020     		movs	r0, #0
 3364 021a FFF7FEFF 		bl	micromod_set_position
 518:Src/micromod.c **** 	return 0;
 3365              		.loc 1 518 0 discriminator 4
 3366 021e 0023     		movs	r3, #0
 3367              	.L197:
 519:Src/micromod.c **** }
 3368              		.loc 1 519 0
 3369 0220 1800     		movs	r0, r3
 3370 0222 BD46     		mov	sp, r7
 3371 0224 0AB0     		add	sp, sp, #40
 3372              		@ sp needed
 3373 0226 80BD     		pop	{r7, pc}
 3374              	.L210:
 3375              		.align	2
 3376              	.L209:
 3377 0228 00000000 		.word	num_channels
 3378 022c 3F1F0000 		.word	7999
 3379 0230 00000000 		.word	module_data
 3380 0234 00000000 		.word	sample_rate
 3381 0238 B6030000 		.word	950
 3382 023c 00000000 		.word	song_length
 3383 0240 B7030000 		.word	951
 3384 0244 00000000 		.word	restart
 3385 0248 00000000 		.word	sequence
 3386 024c 3C040000 		.word	1084
 3387 0250 00000000 		.word	pattern_data
 3388 0254 00000000 		.word	num_patterns
 3389 0258 00000000 		.word	instruments
 3390 025c AB200000 		.word	8363
 3391 0260 5F200000 		.word	8287
 3392 0264 00000000 		.word	c2_rate
 3393 0268 00000000 		.word	gain
 3394              		.cfi_endproc
 3395              	.LFE17:
 3397              		.section	.text.micromod_get_string,"ax",%progbits
 3398              		.align	1
 3399              		.global	micromod_get_string
 3400              		.syntax unified
 3401              		.code	16
 3402              		.thumb_func
 3403              		.fpu softvfp
 3405              	micromod_get_string:
 3406              	.LFB18:
 520:Src/micromod.c **** 
 521:Src/micromod.c **** /*
 522:Src/micromod.c **** 	Obtains song and instrument names from the module.
 523:Src/micromod.c **** 	The song name is returned as instrument 0.
 524:Src/micromod.c **** 	The name is copied into the location pointed to by string,
 525:Src/micromod.c **** 	and is at most 23 characters long, including the trailing null.
ARM GAS  /tmp/ccaMRnUL.s 			page 69


 526:Src/micromod.c **** */
 527:Src/micromod.c **** void micromod_get_string( long instrument, char *string ) {
 3407              		.loc 1 527 0
 3408              		.cfi_startproc
 3409 0000 80B5     		push	{r7, lr}
 3410              	.LCFI54:
 3411              		.cfi_def_cfa_offset 8
 3412              		.cfi_offset 7, -8
 3413              		.cfi_offset 14, -4
 3414 0002 86B0     		sub	sp, sp, #24
 3415              	.LCFI55:
 3416              		.cfi_def_cfa_offset 32
 3417 0004 00AF     		add	r7, sp, #0
 3418              	.LCFI56:
 3419              		.cfi_def_cfa_register 7
 3420 0006 7860     		str	r0, [r7, #4]
 3421 0008 3960     		str	r1, [r7]
 528:Src/micromod.c **** 	long index, offset, length, character;
 529:Src/micromod.c **** 	if( num_channels <= 0 ) {
 3422              		.loc 1 529 0
 3423 000a 224B     		ldr	r3, .L219
 3424 000c 1B68     		ldr	r3, [r3]
 3425 000e 002B     		cmp	r3, #0
 3426 0010 03DC     		bgt	.L212
 530:Src/micromod.c **** 		string[ 0 ] = 0;
 3427              		.loc 1 530 0
 3428 0012 3B68     		ldr	r3, [r7]
 3429 0014 0022     		movs	r2, #0
 3430 0016 1A70     		strb	r2, [r3]
 531:Src/micromod.c **** 		return;
 3431              		.loc 1 531 0
 3432 0018 39E0     		b	.L211
 3433              	.L212:
 532:Src/micromod.c **** 	}
 533:Src/micromod.c **** 	offset = 0;
 3434              		.loc 1 533 0
 3435 001a 0023     		movs	r3, #0
 3436 001c 3B61     		str	r3, [r7, #16]
 534:Src/micromod.c **** 	length = 20;
 3437              		.loc 1 534 0
 3438 001e 1423     		movs	r3, #20
 3439 0020 FB60     		str	r3, [r7, #12]
 535:Src/micromod.c **** 	if( instrument > 0 && instrument < 32 ) {
 3440              		.loc 1 535 0
 3441 0022 7B68     		ldr	r3, [r7, #4]
 3442 0024 002B     		cmp	r3, #0
 3443 0026 0CDD     		ble	.L214
 3444              		.loc 1 535 0 is_stmt 0 discriminator 1
 3445 0028 7B68     		ldr	r3, [r7, #4]
 3446 002a 1F2B     		cmp	r3, #31
 3447 002c 09DC     		bgt	.L214
 536:Src/micromod.c **** 		offset = ( instrument - 1 ) * 30 + 20;
 3448              		.loc 1 536 0 is_stmt 1
 3449 002e 7B68     		ldr	r3, [r7, #4]
 3450 0030 5A1E     		subs	r2, r3, #1
 3451 0032 1300     		movs	r3, r2
 3452 0034 1B01     		lsls	r3, r3, #4
ARM GAS  /tmp/ccaMRnUL.s 			page 70


 3453 0036 9B1A     		subs	r3, r3, r2
 3454 0038 5B00     		lsls	r3, r3, #1
 3455 003a 1433     		adds	r3, r3, #20
 3456 003c 3B61     		str	r3, [r7, #16]
 537:Src/micromod.c **** 		length = 22;
 3457              		.loc 1 537 0
 3458 003e 1623     		movs	r3, #22
 3459 0040 FB60     		str	r3, [r7, #12]
 3460              	.L214:
 538:Src/micromod.c **** 	}
 539:Src/micromod.c **** 	for( index = 0; index < length; index++ ) {
 3461              		.loc 1 539 0
 3462 0042 0023     		movs	r3, #0
 3463 0044 7B61     		str	r3, [r7, #20]
 3464 0046 19E0     		b	.L215
 3465              	.L218:
 540:Src/micromod.c **** 		character = module_data[ offset + index ];
 3466              		.loc 1 540 0
 3467 0048 134B     		ldr	r3, .L219+4
 3468 004a 1B68     		ldr	r3, [r3]
 3469 004c 3969     		ldr	r1, [r7, #16]
 3470 004e 7A69     		ldr	r2, [r7, #20]
 3471 0050 8A18     		adds	r2, r1, r2
 3472 0052 9B18     		adds	r3, r3, r2
 3473 0054 1B78     		ldrb	r3, [r3]
 3474 0056 5BB2     		sxtb	r3, r3
 3475 0058 BB60     		str	r3, [r7, #8]
 541:Src/micromod.c **** 		if( character < 32 || character > 126 ) character = ' ';
 3476              		.loc 1 541 0
 3477 005a BB68     		ldr	r3, [r7, #8]
 3478 005c 1F2B     		cmp	r3, #31
 3479 005e 02DD     		ble	.L216
 3480              		.loc 1 541 0 is_stmt 0 discriminator 2
 3481 0060 BB68     		ldr	r3, [r7, #8]
 3482 0062 7E2B     		cmp	r3, #126
 3483 0064 01DD     		ble	.L217
 3484              	.L216:
 3485              		.loc 1 541 0 discriminator 3
 3486 0066 2023     		movs	r3, #32
 3487 0068 BB60     		str	r3, [r7, #8]
 3488              	.L217:
 542:Src/micromod.c **** 		string[ index ] = character;
 3489              		.loc 1 542 0 is_stmt 1 discriminator 2
 3490 006a 7B69     		ldr	r3, [r7, #20]
 3491 006c 3A68     		ldr	r2, [r7]
 3492 006e D318     		adds	r3, r2, r3
 3493 0070 BA68     		ldr	r2, [r7, #8]
 3494 0072 D2B2     		uxtb	r2, r2
 3495 0074 1A70     		strb	r2, [r3]
 539:Src/micromod.c **** 		character = module_data[ offset + index ];
 3496              		.loc 1 539 0 discriminator 2
 3497 0076 7B69     		ldr	r3, [r7, #20]
 3498 0078 0133     		adds	r3, r3, #1
 3499 007a 7B61     		str	r3, [r7, #20]
 3500              	.L215:
 539:Src/micromod.c **** 		character = module_data[ offset + index ];
 3501              		.loc 1 539 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccaMRnUL.s 			page 71


 3502 007c 7A69     		ldr	r2, [r7, #20]
 3503 007e FB68     		ldr	r3, [r7, #12]
 3504 0080 9A42     		cmp	r2, r3
 3505 0082 E1DB     		blt	.L218
 543:Src/micromod.c **** 	}
 544:Src/micromod.c **** 	string[ length ] = 0;
 3506              		.loc 1 544 0 is_stmt 1
 3507 0084 FB68     		ldr	r3, [r7, #12]
 3508 0086 3A68     		ldr	r2, [r7]
 3509 0088 D318     		adds	r3, r2, r3
 3510 008a 0022     		movs	r2, #0
 3511 008c 1A70     		strb	r2, [r3]
 3512              	.L211:
 545:Src/micromod.c **** }
 3513              		.loc 1 545 0
 3514 008e BD46     		mov	sp, r7
 3515 0090 06B0     		add	sp, sp, #24
 3516              		@ sp needed
 3517 0092 80BD     		pop	{r7, pc}
 3518              	.L220:
 3519              		.align	2
 3520              	.L219:
 3521 0094 00000000 		.word	num_channels
 3522 0098 00000000 		.word	module_data
 3523              		.cfi_endproc
 3524              	.LFE18:
 3526              		.section	.text.micromod_calculate_song_duration,"ax",%progbits
 3527              		.align	1
 3528              		.global	micromod_calculate_song_duration
 3529              		.syntax unified
 3530              		.code	16
 3531              		.thumb_func
 3532              		.fpu softvfp
 3534              	micromod_calculate_song_duration:
 3535              	.LFB19:
 546:Src/micromod.c **** 
 547:Src/micromod.c **** /*
 548:Src/micromod.c **** 	Returns the total song duration in samples at the current sampling rate.
 549:Src/micromod.c **** */
 550:Src/micromod.c **** long micromod_calculate_song_duration() {
 3536              		.loc 1 550 0
 3537              		.cfi_startproc
 3538 0000 80B5     		push	{r7, lr}
 3539              	.LCFI57:
 3540              		.cfi_def_cfa_offset 8
 3541              		.cfi_offset 7, -8
 3542              		.cfi_offset 14, -4
 3543 0002 82B0     		sub	sp, sp, #8
 3544              	.LCFI58:
 3545              		.cfi_def_cfa_offset 16
 3546 0004 00AF     		add	r7, sp, #0
 3547              	.LCFI59:
 3548              		.cfi_def_cfa_register 7
 551:Src/micromod.c **** 	long duration, song_end;
 552:Src/micromod.c **** 	duration = 0;
 3549              		.loc 1 552 0
 3550 0006 0023     		movs	r3, #0
ARM GAS  /tmp/ccaMRnUL.s 			page 72


 3551 0008 7B60     		str	r3, [r7, #4]
 553:Src/micromod.c **** 	if( num_channels > 0 ) {
 3552              		.loc 1 553 0
 3553 000a 0F4B     		ldr	r3, .L226
 3554 000c 1B68     		ldr	r3, [r3]
 3555 000e 002B     		cmp	r3, #0
 3556 0010 14DD     		ble	.L222
 554:Src/micromod.c **** 		micromod_set_position( 0 );
 3557              		.loc 1 554 0
 3558 0012 0020     		movs	r0, #0
 3559 0014 FFF7FEFF 		bl	micromod_set_position
 555:Src/micromod.c **** 		song_end = 0;
 3560              		.loc 1 555 0
 3561 0018 0023     		movs	r3, #0
 3562 001a 3B60     		str	r3, [r7]
 556:Src/micromod.c **** 		while( !song_end ) {
 3563              		.loc 1 556 0
 3564 001c 08E0     		b	.L223
 3565              	.L224:
 557:Src/micromod.c **** 			duration += tick_len;
 3566              		.loc 1 557 0
 3567 001e 0B4B     		ldr	r3, .L226+4
 3568 0020 1B68     		ldr	r3, [r3]
 3569 0022 7A68     		ldr	r2, [r7, #4]
 3570 0024 D318     		adds	r3, r2, r3
 3571 0026 7B60     		str	r3, [r7, #4]
 558:Src/micromod.c **** 			song_end = sequence_tick();
 3572              		.loc 1 558 0
 3573 0028 FFF7FEFF 		bl	sequence_tick
 3574 002c 0300     		movs	r3, r0
 3575 002e 3B60     		str	r3, [r7]
 3576              	.L223:
 556:Src/micromod.c **** 		while( !song_end ) {
 3577              		.loc 1 556 0
 3578 0030 3B68     		ldr	r3, [r7]
 3579 0032 002B     		cmp	r3, #0
 3580 0034 F3D0     		beq	.L224
 559:Src/micromod.c **** 		}
 560:Src/micromod.c **** 		micromod_set_position( 0 );
 3581              		.loc 1 560 0
 3582 0036 0020     		movs	r0, #0
 3583 0038 FFF7FEFF 		bl	micromod_set_position
 3584              	.L222:
 561:Src/micromod.c **** 	}
 562:Src/micromod.c **** 	return duration;
 3585              		.loc 1 562 0
 3586 003c 7B68     		ldr	r3, [r7, #4]
 563:Src/micromod.c **** }
 3587              		.loc 1 563 0
 3588 003e 1800     		movs	r0, r3
 3589 0040 BD46     		mov	sp, r7
 3590 0042 02B0     		add	sp, sp, #8
 3591              		@ sp needed
 3592 0044 80BD     		pop	{r7, pc}
 3593              	.L227:
 3594 0046 C046     		.align	2
 3595              	.L226:
ARM GAS  /tmp/ccaMRnUL.s 			page 73


 3596 0048 00000000 		.word	num_channels
 3597 004c 00000000 		.word	tick_len
 3598              		.cfi_endproc
 3599              	.LFE19:
 3601              		.section	.text.micromod_set_position,"ax",%progbits
 3602              		.align	1
 3603              		.global	micromod_set_position
 3604              		.syntax unified
 3605              		.code	16
 3606              		.thumb_func
 3607              		.fpu softvfp
 3609              	micromod_set_position:
 3610              	.LFB20:
 564:Src/micromod.c **** 
 565:Src/micromod.c **** /*
 566:Src/micromod.c **** 	Jump directly to a specific pattern in the sequence.
 567:Src/micromod.c **** */
 568:Src/micromod.c **** void micromod_set_position( long pos ) {
 3611              		.loc 1 568 0
 3612              		.cfi_startproc
 3613 0000 80B5     		push	{r7, lr}
 3614              	.LCFI60:
 3615              		.cfi_def_cfa_offset 8
 3616              		.cfi_offset 7, -8
 3617              		.cfi_offset 14, -4
 3618 0002 84B0     		sub	sp, sp, #16
 3619              	.LCFI61:
 3620              		.cfi_def_cfa_offset 24
 3621 0004 00AF     		add	r7, sp, #0
 3622              	.LCFI62:
 3623              		.cfi_def_cfa_register 7
 3624 0006 7860     		str	r0, [r7, #4]
 569:Src/micromod.c **** 	long chan_idx;
 570:Src/micromod.c **** 	struct channel *chan;
 571:Src/micromod.c **** 	if( num_channels <= 0 ) return;
 3625              		.loc 1 571 0
 3626 0008 314B     		ldr	r3, .L239
 3627 000a 1B68     		ldr	r3, [r3]
 3628 000c 002B     		cmp	r3, #0
 3629 000e 5BDD     		ble	.L238
 572:Src/micromod.c **** 	if( pos >= song_length ) pos = 0;
 3630              		.loc 1 572 0
 3631 0010 304B     		ldr	r3, .L239+4
 3632 0012 1B68     		ldr	r3, [r3]
 3633 0014 7A68     		ldr	r2, [r7, #4]
 3634 0016 9A42     		cmp	r2, r3
 3635 0018 01DB     		blt	.L231
 3636              		.loc 1 572 0 is_stmt 0 discriminator 1
 3637 001a 0023     		movs	r3, #0
 3638 001c 7B60     		str	r3, [r7, #4]
 3639              	.L231:
 573:Src/micromod.c **** 	break_pattern = pos;
 3640              		.loc 1 573 0 is_stmt 1
 3641 001e 2E4B     		ldr	r3, .L239+8
 3642 0020 7A68     		ldr	r2, [r7, #4]
 3643 0022 1A60     		str	r2, [r3]
 574:Src/micromod.c **** 	next_row = 0;
ARM GAS  /tmp/ccaMRnUL.s 			page 74


 3644              		.loc 1 574 0
 3645 0024 2D4B     		ldr	r3, .L239+12
 3646 0026 0022     		movs	r2, #0
 3647 0028 1A60     		str	r2, [r3]
 575:Src/micromod.c **** 	tick = 1;
 3648              		.loc 1 575 0
 3649 002a 2D4B     		ldr	r3, .L239+16
 3650 002c 0122     		movs	r2, #1
 3651 002e 1A60     		str	r2, [r3]
 576:Src/micromod.c **** 	speed = 6;
 3652              		.loc 1 576 0
 3653 0030 2C4B     		ldr	r3, .L239+20
 3654 0032 0622     		movs	r2, #6
 3655 0034 1A60     		str	r2, [r3]
 577:Src/micromod.c **** 	set_tempo( 125 );
 3656              		.loc 1 577 0
 3657 0036 7D20     		movs	r0, #125
 3658 0038 FFF7FEFF 		bl	set_tempo
 578:Src/micromod.c **** 	pl_count = pl_channel = -1;
 3659              		.loc 1 578 0
 3660 003c 2A4B     		ldr	r3, .L239+24
 3661 003e 0122     		movs	r2, #1
 3662 0040 5242     		rsbs	r2, r2, #0
 3663 0042 1A60     		str	r2, [r3]
 3664 0044 284B     		ldr	r3, .L239+24
 3665 0046 1A68     		ldr	r2, [r3]
 3666 0048 284B     		ldr	r3, .L239+28
 3667 004a 1A60     		str	r2, [r3]
 579:Src/micromod.c **** 	random_seed = 0xABCDEF;
 3668              		.loc 1 579 0
 3669 004c 284B     		ldr	r3, .L239+32
 3670 004e 294A     		ldr	r2, .L239+36
 3671 0050 1A60     		str	r2, [r3]
 580:Src/micromod.c **** 	for( chan_idx = 0; chan_idx < num_channels; chan_idx++ ) {
 3672              		.loc 1 580 0
 3673 0052 0023     		movs	r3, #0
 3674 0054 FB60     		str	r3, [r7, #12]
 3675 0056 2CE0     		b	.L232
 3676              	.L237:
 581:Src/micromod.c **** 		chan = &channels[ chan_idx ];
 3677              		.loc 1 581 0
 3678 0058 FA68     		ldr	r2, [r7, #12]
 3679 005a 1300     		movs	r3, r2
 3680 005c 5B00     		lsls	r3, r3, #1
 3681 005e 9B18     		adds	r3, r3, r2
 3682 0060 1B01     		lsls	r3, r3, #4
 3683 0062 254A     		ldr	r2, .L239+40
 3684 0064 9B18     		adds	r3, r3, r2
 3685 0066 BB60     		str	r3, [r7, #8]
 582:Src/micromod.c **** 		chan->id = chan_idx;
 3686              		.loc 1 582 0
 3687 0068 FB68     		ldr	r3, [r7, #12]
 3688 006a DAB2     		uxtb	r2, r3
 3689 006c BB68     		ldr	r3, [r7, #8]
 3690 006e 1A77     		strb	r2, [r3, #28]
 583:Src/micromod.c **** 		chan->instrument = chan->assigned = 0;
 3691              		.loc 1 583 0
ARM GAS  /tmp/ccaMRnUL.s 			page 75


 3692 0070 BB68     		ldr	r3, [r7, #8]
 3693 0072 0022     		movs	r2, #0
 3694 0074 9A77     		strb	r2, [r3, #30]
 3695 0076 BB68     		ldr	r3, [r7, #8]
 3696 0078 9A7F     		ldrb	r2, [r3, #30]
 3697 007a BB68     		ldr	r3, [r7, #8]
 3698 007c 5A77     		strb	r2, [r3, #29]
 584:Src/micromod.c **** 		chan->volume = 0;
 3699              		.loc 1 584 0
 3700 007e BB68     		ldr	r3, [r7, #8]
 3701 0080 0022     		movs	r2, #0
 3702 0082 1A76     		strb	r2, [r3, #24]
 585:Src/micromod.c **** 		switch( chan_idx & 0x3 ) {
 3703              		.loc 1 585 0
 3704 0084 FB68     		ldr	r3, [r7, #12]
 3705 0086 0322     		movs	r2, #3
 3706 0088 1340     		ands	r3, r2
 3707 008a 022B     		cmp	r3, #2
 3708 008c 04DC     		bgt	.L234
 3709 008e 012B     		cmp	r3, #1
 3710 0090 08DA     		bge	.L235
 3711 0092 002B     		cmp	r3, #0
 3712 0094 02D0     		beq	.L236
 3713 0096 09E0     		b	.L233
 3714              	.L234:
 3715 0098 032B     		cmp	r3, #3
 3716 009a 07D1     		bne	.L233
 3717              	.L236:
 586:Src/micromod.c **** 			case 0: case 3: chan->panning =  51; break;
 3718              		.loc 1 586 0
 3719 009c BB68     		ldr	r3, [r7, #8]
 3720 009e 3322     		movs	r2, #51
 3721 00a0 5A76     		strb	r2, [r3, #25]
 3722 00a2 03E0     		b	.L233
 3723              	.L235:
 587:Src/micromod.c **** 			case 1: case 2: chan->panning = 204; break;
 3724              		.loc 1 587 0
 3725 00a4 BB68     		ldr	r3, [r7, #8]
 3726 00a6 CC22     		movs	r2, #204
 3727 00a8 5A76     		strb	r2, [r3, #25]
 3728 00aa C046     		nop
 3729              	.L233:
 580:Src/micromod.c **** 		chan = &channels[ chan_idx ];
 3730              		.loc 1 580 0 discriminator 2
 3731 00ac FB68     		ldr	r3, [r7, #12]
 3732 00ae 0133     		adds	r3, r3, #1
 3733 00b0 FB60     		str	r3, [r7, #12]
 3734              	.L232:
 580:Src/micromod.c **** 		chan = &channels[ chan_idx ];
 3735              		.loc 1 580 0 is_stmt 0 discriminator 1
 3736 00b2 074B     		ldr	r3, .L239
 3737 00b4 1B68     		ldr	r3, [r3]
 3738 00b6 FA68     		ldr	r2, [r7, #12]
 3739 00b8 9A42     		cmp	r2, r3
 3740 00ba CDDB     		blt	.L237
 588:Src/micromod.c **** 		}
 589:Src/micromod.c **** 	}
ARM GAS  /tmp/ccaMRnUL.s 			page 76


 590:Src/micromod.c **** 	sequence_tick();
 3741              		.loc 1 590 0 is_stmt 1
 3742 00bc FFF7FEFF 		bl	sequence_tick
 591:Src/micromod.c **** 	tick_offset = 0;
 3743              		.loc 1 591 0
 3744 00c0 0E4B     		ldr	r3, .L239+44
 3745 00c2 0022     		movs	r2, #0
 3746 00c4 1A60     		str	r2, [r3]
 3747 00c6 00E0     		b	.L228
 3748              	.L238:
 571:Src/micromod.c **** 	if( pos >= song_length ) pos = 0;
 3749              		.loc 1 571 0
 3750 00c8 C046     		nop
 3751              	.L228:
 592:Src/micromod.c **** }
 3752              		.loc 1 592 0
 3753 00ca BD46     		mov	sp, r7
 3754 00cc 04B0     		add	sp, sp, #16
 3755              		@ sp needed
 3756 00ce 80BD     		pop	{r7, pc}
 3757              	.L240:
 3758              		.align	2
 3759              	.L239:
 3760 00d0 00000000 		.word	num_channels
 3761 00d4 00000000 		.word	song_length
 3762 00d8 00000000 		.word	break_pattern
 3763 00dc 00000000 		.word	next_row
 3764 00e0 00000000 		.word	tick
 3765 00e4 00000000 		.word	speed
 3766 00e8 00000000 		.word	pl_channel
 3767 00ec 00000000 		.word	pl_count
 3768 00f0 00000000 		.word	random_seed
 3769 00f4 EFCDAB00 		.word	11259375
 3770 00f8 00000000 		.word	channels
 3771 00fc 00000000 		.word	tick_offset
 3772              		.cfi_endproc
 3773              	.LFE20:
 3775              		.section	.text.micromod_get_audio,"ax",%progbits
 3776              		.align	1
 3777              		.global	micromod_get_audio
 3778              		.syntax unified
 3779              		.code	16
 3780              		.thumb_func
 3781              		.fpu softvfp
 3783              	micromod_get_audio:
 3784              	.LFB21:
 593:Src/micromod.c **** 
 594:Src/micromod.c **** /*
 595:Src/micromod.c **** 	Calculate the specified number of samples of audio.
 596:Src/micromod.c **** 	If output pointer is zero, the replay will quickly skip count samples.
 597:Src/micromod.c **** 	The output buffer should be cleared with zeroes.
 598:Src/micromod.c **** */
 599:Src/micromod.c **** void micromod_get_audio( short *output_buffer, long count ) {
 3785              		.loc 1 599 0
 3786              		.cfi_startproc
 3787 0000 80B5     		push	{r7, lr}
 3788              	.LCFI63:
ARM GAS  /tmp/ccaMRnUL.s 			page 77


 3789              		.cfi_def_cfa_offset 8
 3790              		.cfi_offset 7, -8
 3791              		.cfi_offset 14, -4
 3792 0002 86B0     		sub	sp, sp, #24
 3793              	.LCFI64:
 3794              		.cfi_def_cfa_offset 32
 3795 0004 00AF     		add	r7, sp, #0
 3796              	.LCFI65:
 3797              		.cfi_def_cfa_register 7
 3798 0006 7860     		str	r0, [r7, #4]
 3799 0008 3960     		str	r1, [r7]
 600:Src/micromod.c **** 	long offset, remain, chan_idx;
 601:Src/micromod.c **** 	if( num_channels <= 0 ) return;
 3800              		.loc 1 601 0
 3801 000a 254B     		ldr	r3, .L251
 3802 000c 1B68     		ldr	r3, [r3]
 3803 000e 002B     		cmp	r3, #0
 3804 0010 42DD     		ble	.L250
 602:Src/micromod.c **** 	offset = 0;
 3805              		.loc 1 602 0
 3806 0012 0023     		movs	r3, #0
 3807 0014 7B61     		str	r3, [r7, #20]
 603:Src/micromod.c **** 	while( count > 0 ) {
 3808              		.loc 1 603 0
 3809 0016 3BE0     		b	.L244
 3810              	.L249:
 604:Src/micromod.c **** 		remain = tick_len - tick_offset;
 3811              		.loc 1 604 0
 3812 0018 224B     		ldr	r3, .L251+4
 3813 001a 1A68     		ldr	r2, [r3]
 3814 001c 224B     		ldr	r3, .L251+8
 3815 001e 1B68     		ldr	r3, [r3]
 3816 0020 D31A     		subs	r3, r2, r3
 3817 0022 3B61     		str	r3, [r7, #16]
 605:Src/micromod.c **** 		if( remain > count ) remain = count;
 3818              		.loc 1 605 0
 3819 0024 3A69     		ldr	r2, [r7, #16]
 3820 0026 3B68     		ldr	r3, [r7]
 3821 0028 9A42     		cmp	r2, r3
 3822 002a 01DD     		ble	.L245
 3823              		.loc 1 605 0 is_stmt 0 discriminator 1
 3824 002c 3B68     		ldr	r3, [r7]
 3825 002e 3B61     		str	r3, [r7, #16]
 3826              	.L245:
 606:Src/micromod.c **** 		for( chan_idx = 0; chan_idx < num_channels; chan_idx++ ) {
 3827              		.loc 1 606 0 is_stmt 1
 3828 0030 0023     		movs	r3, #0
 3829 0032 FB60     		str	r3, [r7, #12]
 3830 0034 0EE0     		b	.L246
 3831              	.L247:
 607:Src/micromod.c **** 			resample( &channels[ chan_idx ], output_buffer, offset, remain );
 3832              		.loc 1 607 0 discriminator 3
 3833 0036 FA68     		ldr	r2, [r7, #12]
 3834 0038 1300     		movs	r3, r2
 3835 003a 5B00     		lsls	r3, r3, #1
 3836 003c 9B18     		adds	r3, r3, r2
 3837 003e 1B01     		lsls	r3, r3, #4
ARM GAS  /tmp/ccaMRnUL.s 			page 78


 3838 0040 1A4A     		ldr	r2, .L251+12
 3839 0042 9818     		adds	r0, r3, r2
 3840 0044 3B69     		ldr	r3, [r7, #16]
 3841 0046 7A69     		ldr	r2, [r7, #20]
 3842 0048 7968     		ldr	r1, [r7, #4]
 3843 004a FFF7FEFF 		bl	resample
 606:Src/micromod.c **** 		for( chan_idx = 0; chan_idx < num_channels; chan_idx++ ) {
 3844              		.loc 1 606 0 discriminator 3
 3845 004e FB68     		ldr	r3, [r7, #12]
 3846 0050 0133     		adds	r3, r3, #1
 3847 0052 FB60     		str	r3, [r7, #12]
 3848              	.L246:
 606:Src/micromod.c **** 		for( chan_idx = 0; chan_idx < num_channels; chan_idx++ ) {
 3849              		.loc 1 606 0 is_stmt 0 discriminator 1
 3850 0054 124B     		ldr	r3, .L251
 3851 0056 1B68     		ldr	r3, [r3]
 3852 0058 FA68     		ldr	r2, [r7, #12]
 3853 005a 9A42     		cmp	r2, r3
 3854 005c EBDB     		blt	.L247
 608:Src/micromod.c **** 		}
 609:Src/micromod.c **** 		tick_offset += remain;
 3855              		.loc 1 609 0 is_stmt 1
 3856 005e 124B     		ldr	r3, .L251+8
 3857 0060 1A68     		ldr	r2, [r3]
 3858 0062 3B69     		ldr	r3, [r7, #16]
 3859 0064 D218     		adds	r2, r2, r3
 3860 0066 104B     		ldr	r3, .L251+8
 3861 0068 1A60     		str	r2, [r3]
 610:Src/micromod.c **** 		if( tick_offset == tick_len ) {
 3862              		.loc 1 610 0
 3863 006a 0F4B     		ldr	r3, .L251+8
 3864 006c 1A68     		ldr	r2, [r3]
 3865 006e 0D4B     		ldr	r3, .L251+4
 3866 0070 1B68     		ldr	r3, [r3]
 3867 0072 9A42     		cmp	r2, r3
 3868 0074 04D1     		bne	.L248
 611:Src/micromod.c **** 			sequence_tick();
 3869              		.loc 1 611 0
 3870 0076 FFF7FEFF 		bl	sequence_tick
 612:Src/micromod.c **** 			tick_offset = 0;
 3871              		.loc 1 612 0
 3872 007a 0B4B     		ldr	r3, .L251+8
 3873 007c 0022     		movs	r2, #0
 3874 007e 1A60     		str	r2, [r3]
 3875              	.L248:
 613:Src/micromod.c **** 		}
 614:Src/micromod.c **** 		offset += remain;
 3876              		.loc 1 614 0
 3877 0080 7A69     		ldr	r2, [r7, #20]
 3878 0082 3B69     		ldr	r3, [r7, #16]
 3879 0084 D318     		adds	r3, r2, r3
 3880 0086 7B61     		str	r3, [r7, #20]
 615:Src/micromod.c **** 		count -= remain;
 3881              		.loc 1 615 0
 3882 0088 3A68     		ldr	r2, [r7]
 3883 008a 3B69     		ldr	r3, [r7, #16]
 3884 008c D31A     		subs	r3, r2, r3
ARM GAS  /tmp/ccaMRnUL.s 			page 79


 3885 008e 3B60     		str	r3, [r7]
 3886              	.L244:
 603:Src/micromod.c **** 		remain = tick_len - tick_offset;
 3887              		.loc 1 603 0
 3888 0090 3B68     		ldr	r3, [r7]
 3889 0092 002B     		cmp	r3, #0
 3890 0094 C0DC     		bgt	.L249
 3891 0096 00E0     		b	.L241
 3892              	.L250:
 601:Src/micromod.c **** 	offset = 0;
 3893              		.loc 1 601 0
 3894 0098 C046     		nop
 3895              	.L241:
 616:Src/micromod.c **** 	}
 617:Src/micromod.c **** }
 3896              		.loc 1 617 0
 3897 009a BD46     		mov	sp, r7
 3898 009c 06B0     		add	sp, sp, #24
 3899              		@ sp needed
 3900 009e 80BD     		pop	{r7, pc}
 3901              	.L252:
 3902              		.align	2
 3903              	.L251:
 3904 00a0 00000000 		.word	num_channels
 3905 00a4 00000000 		.word	tick_len
 3906 00a8 00000000 		.word	tick_offset
 3907 00ac 00000000 		.word	channels
 3908              		.cfi_endproc
 3909              	.LFE21:
 3911              		.text
 3912              	.Letext0:
ARM GAS  /tmp/ccaMRnUL.s 			page 80


DEFINED SYMBOLS
                            *ABS*:0000000000000000 micromod.c
     /tmp/ccaMRnUL.s:16     .rodata.fine_tuning:0000000000000000 $d
     /tmp/ccaMRnUL.s:19     .rodata.fine_tuning:0000000000000000 fine_tuning
     /tmp/ccaMRnUL.s:37     .rodata.arp_tuning:0000000000000000 $d
     /tmp/ccaMRnUL.s:40     .rodata.arp_tuning:0000000000000000 arp_tuning
     /tmp/ccaMRnUL.s:58     .rodata.sine_table:0000000000000000 $d
     /tmp/ccaMRnUL.s:61     .rodata.sine_table:0000000000000000 sine_table
     /tmp/ccaMRnUL.s:95     .bss.module_data:0000000000000000 $d
     /tmp/ccaMRnUL.s:98     .bss.module_data:0000000000000000 module_data
     /tmp/ccaMRnUL.s:101    .bss.pattern_data:0000000000000000 $d
     /tmp/ccaMRnUL.s:104    .bss.pattern_data:0000000000000000 pattern_data
     /tmp/ccaMRnUL.s:107    .bss.sequence:0000000000000000 $d
     /tmp/ccaMRnUL.s:110    .bss.sequence:0000000000000000 sequence
     /tmp/ccaMRnUL.s:113    .bss.song_length:0000000000000000 $d
     /tmp/ccaMRnUL.s:116    .bss.song_length:0000000000000000 song_length
     /tmp/ccaMRnUL.s:119    .bss.restart:0000000000000000 $d
     /tmp/ccaMRnUL.s:122    .bss.restart:0000000000000000 restart
     /tmp/ccaMRnUL.s:125    .bss.num_patterns:0000000000000000 $d
     /tmp/ccaMRnUL.s:128    .bss.num_patterns:0000000000000000 num_patterns
     /tmp/ccaMRnUL.s:131    .bss.num_channels:0000000000000000 $d
     /tmp/ccaMRnUL.s:134    .bss.num_channels:0000000000000000 num_channels
     /tmp/ccaMRnUL.s:137    .bss.instruments:0000000000000000 $d
     /tmp/ccaMRnUL.s:140    .bss.instruments:0000000000000000 instruments
     /tmp/ccaMRnUL.s:143    .bss.sample_rate:0000000000000000 $d
     /tmp/ccaMRnUL.s:146    .bss.sample_rate:0000000000000000 sample_rate
     /tmp/ccaMRnUL.s:149    .bss.c2_rate:0000000000000000 $d
     /tmp/ccaMRnUL.s:152    .bss.c2_rate:0000000000000000 c2_rate
     /tmp/ccaMRnUL.s:155    .bss.gain:0000000000000000 $d
     /tmp/ccaMRnUL.s:158    .bss.gain:0000000000000000 gain
     /tmp/ccaMRnUL.s:161    .bss.tick_len:0000000000000000 $d
     /tmp/ccaMRnUL.s:164    .bss.tick_len:0000000000000000 tick_len
     /tmp/ccaMRnUL.s:167    .bss.tick_offset:0000000000000000 $d
     /tmp/ccaMRnUL.s:170    .bss.tick_offset:0000000000000000 tick_offset
     /tmp/ccaMRnUL.s:173    .bss.pattern:0000000000000000 $d
     /tmp/ccaMRnUL.s:176    .bss.pattern:0000000000000000 pattern
     /tmp/ccaMRnUL.s:179    .bss.break_pattern:0000000000000000 $d
     /tmp/ccaMRnUL.s:182    .bss.break_pattern:0000000000000000 break_pattern
     /tmp/ccaMRnUL.s:185    .bss.row:0000000000000000 $d
     /tmp/ccaMRnUL.s:188    .bss.row:0000000000000000 row
     /tmp/ccaMRnUL.s:191    .bss.next_row:0000000000000000 $d
     /tmp/ccaMRnUL.s:194    .bss.next_row:0000000000000000 next_row
     /tmp/ccaMRnUL.s:197    .bss.tick:0000000000000000 $d
     /tmp/ccaMRnUL.s:200    .bss.tick:0000000000000000 tick
     /tmp/ccaMRnUL.s:203    .bss.speed:0000000000000000 $d
     /tmp/ccaMRnUL.s:206    .bss.speed:0000000000000000 speed
     /tmp/ccaMRnUL.s:209    .bss.pl_count:0000000000000000 $d
     /tmp/ccaMRnUL.s:212    .bss.pl_count:0000000000000000 pl_count
     /tmp/ccaMRnUL.s:215    .bss.pl_channel:0000000000000000 $d
     /tmp/ccaMRnUL.s:218    .bss.pl_channel:0000000000000000 pl_channel
     /tmp/ccaMRnUL.s:221    .bss.random_seed:0000000000000000 $d
     /tmp/ccaMRnUL.s:224    .bss.random_seed:0000000000000000 random_seed
     /tmp/ccaMRnUL.s:227    .bss.channels:0000000000000000 $d
     /tmp/ccaMRnUL.s:230    .bss.channels:0000000000000000 channels
     /tmp/ccaMRnUL.s:233    .text.calculate_num_patterns:0000000000000000 $t
     /tmp/ccaMRnUL.s:239    .text.calculate_num_patterns:0000000000000000 calculate_num_patterns
     /tmp/ccaMRnUL.s:311    .text.calculate_num_channels:0000000000000000 $t
ARM GAS  /tmp/ccaMRnUL.s 			page 81


     /tmp/ccaMRnUL.s:317    .text.calculate_num_channels:0000000000000000 calculate_num_channels
     /tmp/ccaMRnUL.s:443    .text.calculate_num_channels:00000000000000b4 $d
     /tmp/ccaMRnUL.s:456    .text.unsigned_short_big_endian:0000000000000000 $t
     /tmp/ccaMRnUL.s:462    .text.unsigned_short_big_endian:0000000000000000 unsigned_short_big_endian
     /tmp/ccaMRnUL.s:509    .text.set_tempo:0000000000000000 $t
     /tmp/ccaMRnUL.s:515    .text.set_tempo:0000000000000000 set_tempo
     /tmp/ccaMRnUL.s:556    .text.set_tempo:0000000000000030 $d
     /tmp/ccaMRnUL.s:563    .text.update_frequency:0000000000000000 $t
     /tmp/ccaMRnUL.s:569    .text.update_frequency:0000000000000000 update_frequency
     /tmp/ccaMRnUL.s:693    .text.update_frequency:00000000000000b8 $d
     /tmp/ccaMRnUL.s:701    .text.tone_portamento:0000000000000000 $t
     /tmp/ccaMRnUL.s:707    .text.tone_portamento:0000000000000000 tone_portamento
     /tmp/ccaMRnUL.s:789    .text.volume_slide:0000000000000000 $t
     /tmp/ccaMRnUL.s:795    .text.volume_slide:0000000000000000 volume_slide
     /tmp/ccaMRnUL.s:855    .text.waveform:0000000000000000 $t
     /tmp/ccaMRnUL.s:861    .text.waveform:0000000000000000 waveform
     /tmp/ccaMRnUL.s:977    .text.waveform:000000000000009c $d
     /tmp/ccaMRnUL.s:983    .text.vibrato:0000000000000000 $t
     /tmp/ccaMRnUL.s:989    .text.vibrato:0000000000000000 vibrato
     /tmp/ccaMRnUL.s:1035   .text.tremolo:0000000000000000 $t
     /tmp/ccaMRnUL.s:1041   .text.tremolo:0000000000000000 tremolo
     /tmp/ccaMRnUL.s:1087   .text.trigger:0000000000000000 $t
     /tmp/ccaMRnUL.s:1093   .text.trigger:0000000000000000 trigger
     /tmp/ccaMRnUL.s:1283   .text.trigger:000000000000011c $d
     /tmp/ccaMRnUL.s:1289   .text.channel_row:0000000000000000 $t
     /tmp/ccaMRnUL.s:1295   .text.channel_row:0000000000000000 channel_row
     /tmp/ccaMRnUL.s:1367   .rodata.channel_row:0000000000000000 $d
     /tmp/ccaMRnUL.s:1886   .text.channel_row:000000000000031c $d
     /tmp/ccaMRnUL.s:1901   .text.channel_tick:0000000000000000 $t
     /tmp/ccaMRnUL.s:1907   .text.channel_tick:0000000000000000 channel_tick
     /tmp/ccaMRnUL.s:1953   .rodata.channel_tick:0000000000000000 $d
     /tmp/ccaMRnUL.s:2257   .text.channel_tick:00000000000001d4 $d
     /tmp/ccaMRnUL.s:2263   .text.sequence_row:0000000000000000 $t
     /tmp/ccaMRnUL.s:2269   .text.sequence_row:0000000000000000 sequence_row
     /tmp/ccaMRnUL.s:2566   .text.sequence_row:00000000000001d0 $d
     /tmp/ccaMRnUL.s:2579   .text.sequence_tick:0000000000000000 $t
     /tmp/ccaMRnUL.s:2585   .text.sequence_tick:0000000000000000 sequence_tick
     /tmp/ccaMRnUL.s:2662   .text.sequence_tick:0000000000000064 $d
     /tmp/ccaMRnUL.s:2670   .text.resample:0000000000000000 $t
     /tmp/ccaMRnUL.s:2676   .text.resample:0000000000000000 resample
     /tmp/ccaMRnUL.s:2919   .text.resample:0000000000000168 $d
     /tmp/ccaMRnUL.s:2924   .text.micromod_calculate_mod_file_len:0000000000000000 $t
     /tmp/ccaMRnUL.s:2931   .text.micromod_calculate_mod_file_len:0000000000000000 micromod_calculate_mod_file_len
     /tmp/ccaMRnUL.s:3018   .text.micromod_calculate_mod_file_len:0000000000000078 $d
     /tmp/ccaMRnUL.s:3023   .text.micromod_initialise:0000000000000000 $t
     /tmp/ccaMRnUL.s:3030   .text.micromod_initialise:0000000000000000 micromod_initialise
     /tmp/ccaMRnUL.s:3609   .text.micromod_set_position:0000000000000000 micromod_set_position
     /tmp/ccaMRnUL.s:3377   .text.micromod_initialise:0000000000000228 $d
     /tmp/ccaMRnUL.s:3398   .text.micromod_get_string:0000000000000000 $t
     /tmp/ccaMRnUL.s:3405   .text.micromod_get_string:0000000000000000 micromod_get_string
     /tmp/ccaMRnUL.s:3521   .text.micromod_get_string:0000000000000094 $d
     /tmp/ccaMRnUL.s:3527   .text.micromod_calculate_song_duration:0000000000000000 $t
     /tmp/ccaMRnUL.s:3534   .text.micromod_calculate_song_duration:0000000000000000 micromod_calculate_song_duration
     /tmp/ccaMRnUL.s:3596   .text.micromod_calculate_song_duration:0000000000000048 $d
     /tmp/ccaMRnUL.s:3602   .text.micromod_set_position:0000000000000000 $t
     /tmp/ccaMRnUL.s:3760   .text.micromod_set_position:00000000000000d0 $d
     /tmp/ccaMRnUL.s:3776   .text.micromod_get_audio:0000000000000000 $t
ARM GAS  /tmp/ccaMRnUL.s 			page 82


     /tmp/ccaMRnUL.s:3783   .text.micromod_get_audio:0000000000000000 micromod_get_audio
     /tmp/ccaMRnUL.s:3904   .text.micromod_get_audio:00000000000000a0 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
__aeabi_idiv
__aeabi_uidiv
